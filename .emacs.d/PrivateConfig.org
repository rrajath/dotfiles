#+TITLE:      Custom Emacs Configuration
#+AUTHOR:     Rajath Ramakrishna
#+PROPERTY:   header-args:emacs-lisp :tangle ./private-config.el
#+STARTUP:    overview indent hidestars

* Table of Contents
:PROPERTIES:
:TOC:      :include all :ignore this
:END:
:CONTENTS:
- [[#introduction][Introduction]]
  - [[#personal-information][Personal Information]]
  - [[#why-literate-config][Why literate config?]]
- [[#current-issues][Current Issues]]
  - [[#hitting-x-in-evil-mode-deletes-alternate-characters-instead-of-the-one-just-behind-the-cursor][Hitting X in evil mode deletes alternate characters instead of the one just behind the cursor]]
- [[#first-things-first][First things first]]
  - [[#startup-performance][Startup Performance]]
  - [[#frame-management][Frame Management]]
    - [[#detect-display-size][Detect display size]]
    - [[#set-frame-size-and-position][Set frame size and position]]
  - [[#package-management-unused][Package Management (unused)]]
  - [[#using-straight][Using Straight]]
  - [[#garbage-collector-magic-hack][Garbage Collector Magic Hack]]
  - [[#keep-emacsd-clean][Keep .emacs.d clean]]
  - [[#auto-update-packages][Auto update packages]]
  - [[#native-comp-related][Native Comp related]]
  - [[#basic-setup][Basic Setup]]
    - [[#some-defaults][Some defaults]]
    - [[#tab-widths][Tab widths]]
    - [[#enable-global-subword-mode][Enable Global Subword Mode]]
    - [[#confirm-on-kill][Confirm on Kill]]
    - [[#ignore-some-additional-files-when-doing-completing-read][Ignore some additional files when doing completing-read]]
    - [[#repeat-mode][Repeat Mode]]
    - [[#other-basics][Other basics]]
- [[#ui-configuration][UI Configuration]]
  - [[#get-rid-of-the-startup-message][Get rid of the startup message]]
  - [[#remove-toolbar-scrollbars-etc][Remove toolbar, scrollbars, etc.]]
  - [[#make-titlebar-the-same-color-as-background][Make titlebar the same color as background]]
  - [[#set-up-fonts][Set up fonts]]
  - [[#set-up-theme][Set up theme]]
  - [[#show-line-and-column-numbers][Show line and column numbers]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
  - [[#smart-modeline-unused][Smart Modeline (unused)]]
  - [[#highlight-matching-braces][Highlight Matching Braces]]
  - [[#highlight-current-line][Highlight current line]]
- [[#usability][Usability]]
  - [[#general][General]]
  - [[#server-mode-unused][Server Mode (unused)]]
  - [[#auto-saving-changed-files][Auto-saving changed files]]
  - [[#auto-reverting-changed-files][Auto-reverting changed files]]
  - [[#automatically-clean-whitespaces-unused][Automatically clean whitespaces (unused)]]
  - [[#smart-parenthesis-unused][Smart Parenthesis (unused)]]
  - [[#jumping-around-with-avy][Jumping around with Avy]]
  - [[#eros-mode][Eros Mode]]
  - [[#hungry-delete][Hungry Delete]]
  - [[#go-to-last-change][Go to last change]]
  - [[#revert-buffer-noconfirm][Revert buffer NOCONFIRM]]
  - [[#popper][Popper]]
    - [[#keybindings][Keybindings]]
  - [[#undo-tree][Undo Tree]]
  - [[#recentf-mode][Recentf Mode]]
  - [[#insert-html-link-with-title-as-default-description][Insert HTML link with title as default description]]
  - [[#embark][Embark]]
  - [[#embrace][Embrace]]
  - [[#highlight-symbol][Highlight Symbol]]
- [[#keybindings][Keybindings]]
  - [[#make-esc-work-better][Make ESC work better]]
  - [[#switch-buffers-easily][Switch buffers easily]]
  - [[#which-key][Which key]]
  - [[#evil][Evil]]
    - [[#basic-setup][Basic Setup]]
    - [[#custom-keybindings-unused][Custom keybindings (unused)]]
    - [[#speedkeys][Speedkeys]]
  - [[#remap-universal-argument][Remap universal argument]]
  - [[#hydra][Hydra]]
    - [[#package-setup][Package Setup]]
    - [[#handle-window-resize][Handle Window Resize]]
  - [[#global-keys][Global keys]]
  - [[#meow][Meow]]
    - [[#custom-functions][Custom Functions]]
      - [[#meow-insert-at-start][Meow Insert at start]]
      - [[#meow-insert-at-end][Meow Insert at end]]
      - [[#meow-paste-before][Meow Paste before]]
      - [[#meow-delete-char-or-region][Meow delete char or region]]
      - [[#meow-save][Meow Save]]
    - [[#custom-keymaps][Custom Keymaps]]
      - [[#nav-keymap][Nav Keymap]]
      - [[#persp-keymap][Persp keymap]]
      - [[#buffer-keymap][Buffer Keymap]]
      - [[#help-keymap][Help Keymap]]
      - [[#dired-keymap][Dired Keymap]]
      - [[#window-keymap][Window Keymap]]
      - [[#file-keymap][File Keymap]]
      - [[#org-keymaps][Org Keymaps]]
        - [[#org-checklist-keymap][Org checklist keymap]]
        - [[#org-clock-keymap][Org clock keymap]]
        - [[#org-narrow-keymap][Org narrow keymap]]
        - [[#org-deadline-keymap][Org deadline keymap]]
        - [[#org-link-keymap][Org link keymap]]
        - [[#org-toggle-keymap][Org toggle keymap]]
        - [[#org-refile-keymap][Org refile keymap]]
        - [[#org-main-keymap][Org main keymap]]
      - [[#avy-keymap][Avy Keymap]]
      - [[#eglotflymake-keymap][Eglot/Flymake keymap]]
      - [[#utilities][Utilities]]
        - [[#highlight-symbol-keymap][Highlight Symbol Keymap]]
        - [[#util-keymap][Util Keymap]]
    - [[#meow-setup][Meow Setup]]
    - [[#meow-package-setup][Meow Package Setup]]
- [[#completion-frameworks][Completion Frameworks]]
  - [[#vertico][Vertico]]
  - [[#marginalia][Marginalia]]
  - [[#orderless][Orderless]]
  - [[#consult][Consult]]
    - [[#consult-package-setup][Consult package setup]]
    - [[#projectile-related][Projectile related]]
  - [[#corfu][Corfu]]
  - [[#kind-icon][Kind Icon]]
- [[#utilities][Utilities]]
  - [[#helpful-package-for-better-documentation-formatting][Helpful package for better documentation formatting]]
  - [[#expand-region][Expand Region]]
  - [[#focus-mode][Focus mode]]
  - [[#crux][Crux]]
  - [[#writegood][Writegood]]
  - [[#centaur-tabs][Centaur Tabs]]
  - [[#free-keys][Free Keys]]
- [[#dired][Dired]]
- [[#development][Development]]
  - [[#projectile][Projectile]]
  - [[#flymake][Flymake]]
  - [[#git-gutter][Git Gutter]]
  - [[#magit][Magit]]
  - [[#blamer][Blamer]]
  - [[#terminal][Terminal]]
    - [[#vterm-setup][Vterm setup]]
    - [[#invoke-terminal-in-projects-root-as-popup][Invoke terminal in project's root (as popup)]]
  - [[#languages][Languages]]
    - [[#language-servers-unused][Language Servers (unused)]]
    - [[#typescript-unused][TypeScript (unused)]]
    - [[#completions-with-company-mode-unused][Completions with Company-mode (unused)]]
    - [[#tide-unused][Tide (unused)]]
      - [[#tsx][TSX]]
      - [[#jsx][JSX]]
      - [[#tide][Tide]]
    - [[#flycheck-unused][Flycheck (unused)]]
    - [[#tide-unused][Tide (unused)]]
    - [[#aphelia-for-auto-format][Aphelia for auto-format]]
    - [[#treesitter-unused][Treesitter (unused)]]
    - [[#treesitter][Treesitter]]
    - [[#eglot][Eglot]]
- [[#buffers][Buffers]]
  - [[#perspectives][Perspectives]]
    - [[#basic-setup][Basic Setup]]
    - [[#ibuffer-hook][IBuffer hook]]
    - [[#saving-sessions][Saving Sessions]]
- [[#orgmode][OrgMode]]
  - [[#capture-templates][Capture Templates]]
  - [[#basic-setup][Basic setup]]
  - [[#org-export-git-flavored-markdown][Org Export Git Flavored Markdown]]
  - [[#org-appear][Org Appear]]
  - [[#prettier-bullets][Prettier bullets]]
  - [[#visual-fill-column][Visual Fill Column]]
  - [[#evil-org-mode-unused][Evil-Org-Mode (unused)]]
  - [[#agenda-configs][Agenda Configs]]
  - [[#org-super-agenda][Org Super Agenda]]
  - [[#babel-configuration][Babel Configuration]]
    - [[#configure-babel-languages][Configure Babel Languages]]
    - [[#source-language-modes][Source Language Modes]]
    - [[#auto-tangle-configuration-files][Auto-tangle Configuration Files]]
    - [[#use-noweb-yes-to-pull-work-related-configs][Use :noweb yes to pull work related configs]]
  - [[#generate-table-of-contents][Generate Table of Contents]]
  - [[#org-todo-keyword-faces][Org todo keyword faces]]
  - [[#org-faces][Org faces]]
  - [[#org-behaviors][Org Behaviors]]
    - [[#org-ret-key-behavior][Org RET key behavior]]
      - [[#org-get-todo-keywords-for][Org get todo keywords for]]
      - [[#org-dwim-at-point][Org dwim-at-point]]
      - [[#bind-ret-to-orgdwim-at-point][Bind RET to +org/dwim-at-point]]
    - [[#org-links-behavior][Org links behavior]]
    - [[#org-cycle-behavior][Org cycle behavior]]
      - [[#set-up-function-for-custom-cycling-unused][Set up function for custom cycling (unused)]]
      - [[#bind-tab-to-org-cycle-only-current-subtree-h][Bind TAB to +org-cycle-only-current-subtree-h]]
    - [[#org-insert-behavior][Org insert behavior]]
      - [[#insert-item][Insert item]]
      - [[#insert-item-below][Insert item below]]
      - [[#insert-item-above][Insert item above]]
    - [[#org-refile-to-current-file][Org refile to current file]]
    - [[#org-showhide-drawers][Org show/hide drawers]]
    - [[#org-show-nextprev-headings-tidily][Org show next/prev headings tidily]]
    - [[#org-sort-list-by-checkbox-type][Org sort list by checkbox type]]
    - [[#use-idle-timer-for-automatic-agenda-views][Use idle timer for automatic agenda views]]
    - [[#mark-heading-done-when-all-checkboxes-are-checked][Mark heading DONE when all checkboxes are checked]]
- [[#org-roam][Org Roam]]
  - [[#basic-setup][Basic Setup]]
  - [[#insert-new-note-immediately][Insert new note immediately]]
  - [[#org-roam-ui][Org Roam UI]]
- [[#blogging][Blogging]]
  - [[#ox-hugo][ox-hugo]]
  - [[#turn-on-org-hugo-auto-export-mode-when-you-visit-blogorg][Turn on org-hugo-auto-export-mode when you visit blog.org]]
  - [[#generate-a-filename-given-a-blog-post-title][Generate a filename given a blog post title]]
- [[#work][Work]]
  - [[#excorporate][Excorporate]]
    - [[#setup-unused][Setup (unused)]]
    - [[#show-todays-meetings][Show today's meetings]]
- [[#ideas][Ideas]]
- [[#packages-i-want-to-try][Packages I want to try]]
- [[#runtime-performance][Runtime Performance]]
- [[#launch-config][Launch Config]]
- [[#pending-customizations][Pending Customizations]]
  - [[#custom-killring][Custom killring]]
  - [[#install-packages][Install packages]]
    - [[#vterm][vterm]]
    - [[#vertico][vertico]]
    - [[#lsp][lsp]]
    - [[#auto-update-packages][auto update packages]]
    - [[#git-gutter-or-diff-hl-mode][git gutter (or diff-hl-mode)]]
    - [[#yasnippets][yasnippets]]
    - [[#edwina][Edwina?]]
- [[#tips--tricks][Tips & Tricks]]
  - [[#insert-timestamp-with-current-time][Insert timestamp with current time]]
  - [[#use-m-m-to-go-to-the-first-non-whitespace-in-a-line][Use M-m to go to the first non-whitespace in a line]]
:END:

* Introduction
This config is built by copying parts from [[https://github.com/daviwil/dotfiles/blob/master/Emacs.org][System Crafters dotfiles repo]], what I found on the internet (Reddit, Discord, Stack Overflow, etc.) and some of my own config. This configuration is based on the [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] paradigm which makes the config be self-documenting. This means, the file is basically a fully explained documentation of my config and also contains code blocks in between that can be evaluated and tangled into a config file.
** Personal Information
It's useful to set up personal information. Some packages tend to use it.
#+begin_src emacs-lisp
  (setq user-full-name "Rajath Ramakrishna"
        user-mail-address "r.rajath@pm.me")
#+end_src

I've been using Emacs since Aug 2020. I used Spacemacs briefly for about a month and it was slow, clunky and I didn't have a good workflow for editing org files on my phone. I decided to give Emacs another go and used Doom Emacs since it looked prettier and I instantly fell in love with it. I used Doom Emacs for about a year and some time late August 2021 is when I started building my own config.

If this is the first time you are looking at my configuration, feel free to jump around and look at any code blocks. Headings that are marked with =TODO= need some work. They either have configs that are not completely set up or have tangling disabled, or just need some text.
** Why literate config?
Literate config has a few benefits:
- Easy to understand. Thanks to the documentation surrounding the code snippets
- Easy to share. People you share this with need no explanation as to what's in your config, your documentation takes care of that
- Easy to maintain. You never touch the actual config, you only update this .org file and make it generate the actual source file
- Easy to publish. If you want to publish your config online, it's super easy. GitHub, for example, natively supports org the same way it supports Markdown. So, these org files are rendered nicely, just as regular documentation.
* Current Issues
** DONE Hitting =X= in evil mode deletes alternate characters instead of the one just behind the cursor
CLOSED: [2022-12-23 Fri 00:18]
:LOGBOOK:
- Note taken on [2022-12-23 Fri 00:18] \\
  No longer using evil. Resolving.
:END:
In vim normal mode, hitting =x= would delete the character right in front of the cursor whereas hitting =X= /should/ delete the character just before the cursor, but it doesn't. For example, if there is a word called "emacs" and the cursor was right after the letter 's', hitting =X= twice would delete the letters 'c' and 'm'.
* First things first
** Startup Performance

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun rr/display-startup-time ()
    "Displays startup time in the echo buffer and Messages buffer as
  soon as Emacs loads."
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time (time-subtract after-init-time before-init-time)))
             gcs-done))
  (add-hook 'emacs-startup-hook #'rr/display-startup-time)
#+end_src

** Frame Management
*** Detect display size
I want Emacs to take up full screen if I'm on my laptop and take up half of the right screen if I'm on a bigger monitor. This is not the best way of implementing it, but since I'm still learning and it gets the job done, I'm happy with it for now. I'll come back and optimize this once I learn elisp better.
=1512= in the code block below is the pixel width of my laptop.
=5232= is the pixel width of my monitor.
If =display-pixel-width= is neither of these, then the frame will not be moved or resized.
[[https://emacs.stackexchange.com/questions/16961/how-to-set-emacs-frame-size-by-pixels/17354#17354][A stack overflow post]] has another way to set this; something I want to try in the future.

#+begin_src emacs-lisp
  (setq pixel-width (display-pixel-width))
  (setq pixel-height (display-pixel-height))
  (setq display-mode "")

  (cond
   ((= pixel-width 1512)
    (setq display-mode "laptop"))
   ((= pixel-width 5232)
    (setq display-mode "desktop")))
  (message "Display Mode: %s" display-mode)
#+end_src

*** Set frame size and position
This block of code uses the =display-mode= variable set in the previous section to set the frame size and position accordingly.

#+begin_src emacs-lisp
  (message "Setting frame size and position based on display size")

  (cond
   ((equal display-mode "laptop")
    (add-to-list 'default-frame-alist '(fullscreen . maximized)))
   ((equal display-mode "desktop")
    (progn
      (add-to-list 'default-frame-alist
                   (cons 'left 1720))
      (add-to-list 'default-frame-alist
                   (cons 'width 214))
      (add-to-list 'default-frame-alist
                   (cons 'height 83))
      )))
#+end_src

** Package Management (unused)
Adding package sources and setting =use-package-always-ensure= to =t=. This setting will eliminate the need to specify =:ensure t= while running writing =use-package= commands.

#+begin_src emacs-lisp
  (setq use-package-verbose t)
#+end_src

#+begin_src emacs-lisp :tangle no
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  ;; Fix an issue accessing the ELPA archive in Termux

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (package-install 'use-package)
  (require 'use-package)

  ;; Uncomment this to get a reading on packages that get loaded at startup
  ;;(setq use-package-verbose t)

  ;; On non-Guix systems, "ensure" packages by default
  (setq use-package-always-ensure t)
  (setq use-package-verbose t)
#+end_src

** Using Straight

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)

  (setq straight-use-package-by-default t)
#+end_src

** Garbage Collector Magic Hack
This is to enforce a sneaky garbage collection strategy to minimize GC interference with user activity
Package: [[https://gitlab.com/koral/gcmh][gcmh]]

#+begin_src emacs-lisp
  (use-package gcmh
    :init
    (gcmh-mode 1))
#+end_src

** Keep .emacs.d clean
This is to avoid emacs from creating temporary files:
Package: [[https://github.com/emacscollective/no-littering][no-littering]]

#+begin_src emacs-lisp
  (use-package no-littering)

  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+end_src

** Auto update packages
Automatically update packages. Nothing more to it.
Package: [[https://github.com/rranelli/auto-package-update.el][auto-package-update]]

#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))
#+end_src

** Native Comp related
#+begin_src emacs-lisp
  ;; Silence compiler warnings as they can be pretty disruptive
  (setq native-comp-async-report-warnings-errors 'silent)

  ;; Set the right directory to store the native comp cache
  (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))
#+end_src
** Basic Setup
*** Some defaults
I want files to move to trash when I delete them in Emacs. I want better undo unlike vim where entire block is considered giant undo step. This settting changes the undo structure into finer steps. I also want to auto save files by default.

#+begin_src emacs-lisp
  (setq-default
   delete-by-moving-to-trash t
   evil-want-fine-undo t
   auto-save-default t)
#+end_src

*** Tab widths
I mostly use typescript and I want to have tab width to 2

#+begin_src emacs-lisp
  (setq-default tab-width 2)
  (setq-default evil-shift-width tab-width)
#+end_src

*** Enable Global Subword Mode
Subword mode is great when you have to deal with camel case (or pascal case) strings. For example, if you have a word like EmacsIsAwesome, you can move between Emacs, Is and Awesome.

#+begin_src emacs-lisp
  (global-subword-mode 1)
#+end_src
*** Confirm on Kill
Sometimes I hit =Cmd+q= by accident. I want to avoid this by setting the confirm on kill variable to true.
#+begin_src emacs-lisp
  (setq confirm-kill-emacs #'y-or-n-p)
#+end_src
*** Ignore some additional files when doing completing-read
[[https://emacs.stackexchange.com/questions/29914/how-to-ignore-certain-filename-patterns-in-find-file-counsel-find-file][Stack Exchange]] answer on the subject.

#+begin_src emacs-lisp
  (add-to-list 'completion-ignored-extensions ".DS_Store")
#+end_src
*** Repeat Mode
#+begin_src emacs-lisp
  (repeat-mode)
#+end_src
*** Other basics
#+begin_src emacs-lisp  
  (save-place-mode +1)
  (electric-pair-mode +1)
  (electric-quote-mode +1)
  (electric-indent-mode +1)
#+end_src

* UI Configuration
** Get rid of the startup message
This is to remove the ugly annoying startup message on a white screen that you get when you load emacs (without any custom configs)

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

** Remove toolbar, scrollbars, etc.
Maximize the goodness

#+begin_src emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 0)
#+end_src

** Make titlebar the same color as background
I don't like Mac's default titlebar and I'd rather have the titlebar blend with the background

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
#+end_src

** Set up fonts
This font face will be used everywhere in Emacs, not just in source code

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "JetBrains Mono" :height 125)
#+end_src

** Set up theme
I use the Doom-One theme with a Doom modeline and also use all-the-icons for pretty icons. The following code block sets them up
Packages:
- [[https://github.com/seagle0128/doom-modeline][doom-modeline]]
- [[https://github.com/hlissner/emacs-doom-themes][doom-themes]]
- [[https://github.com/domtronn/all-the-icons.el][all-the-icons]]

#+begin_src emacs-lisp
  (use-package doom-modeline
    :straight t
    :init (doom-modeline-mode 1))

  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme
    ;; (doom-themes-neotree-config)
    (doom-themes-org-config))

  (use-package all-the-icons)

  ;; Set modeline's background to something lighter
  (set-face-attribute 'mode-line nil
                      :background "#2c323b")
#+end_src

** Show line and column numbers
I want to see line numbers and column numbers in most modes execpt a few.

#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  vterm-mode-hook
                  shell-mode-hook
                  ;; treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Rainbow Delimiters
Lisp stands for Lots of Irritating Superfluous Parentheses. Let's make them colorful at least.
Package: [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Smart Modeline (unused)
Make the mode line pretty
Package: [[https://github.com/Malabarba/smart-mode-line][smart-mode-line]]

#+begin_src emacs-lisp :tangle no
  (use-package smart-mode-line
    :config
    (setq
     sml/theme 'atom-one-dark
     sml/no-confirm-load-theme t
     sml/mode-width 'right
     sml/name-width 60)
    (sml/setup))
#+end_src

** Highlight Matching Braces
This is super helpful, especially in lisp

#+begin_src emacs-lisp
  (use-package paren
    :defer t
    :config
    (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
    (show-paren-mode 1))
#+end_src

** Highlight current line
I want to be able to easily see the line my cursor is currently on

#+begin_src emacs-lisp
  (global-hl-line-mode)
#+end_src

* Usability
** General
General is a great package for adding custom keybindings not just globally, but for very specific modes (like org-mode-map, evil-mode-map, etc.). The following configuration is for global keybinding with =SPC= as the leader key.
Package: [[https://github.com/noctuid/general.el][General]]

#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup t))

  (general-define-key
   :states 'normal
   :keymaps 'override
   :prefix "SPC"
   "SPC" '(counsel-M-x :which-key "M-x")
   "X"   '(org-capture :which-key "org-capture")
   "`"   '(evil-switch-to-windows-last-buffer :which-key "last window")
   "RET" '(consult-bookmark :which-key "bookmarks")
   "t"   '(vterm-toggle :which-key "vterm-popup")
   ;; commands
   "e"   '(:ignore t :which-key "eval")
   "e e" '(eros-eval-last-sexp :which-key "eros-eval-last-sexp")
   "e r" '(eval-region :which-key "eval-region")
   "e b" '(eval-buffer :which-key "eval-buffer")
   ;; buffer management
   "b"   '(:ignore t :which-key "buffers")
   "b i" '(ibuffer :which-key "ibuffer")
   "b r" '(rr/revert-buffer-no-confirm :which-key "rr/revert-buffer-no-confirm")
   "b R" '(revert-buffer :which-key "revert-buffer")
   "b k" '(kill-buffer :which-key "kill-buffer")
   ;; perspectives
   "s"   '(:ignore t :which-key "perspectives")
   "s b" '(persp-switch-to-buffer* :which-key "switch-to-buffer")
   "s k" '(persp-kill-buffer :which-key "kill-buffer")
   "s a" '(persp-add-buffer :which-key "add-buffer")
   "s A" '(persp-set-buffer :which-key "set-buffer")
   "s s" '(persp-switch :which-key "persp-switch")
   "s r" '(persp-rename :which-key "persp-rename")
   "s k" '(persp-kill :which-key "persp-kill")
   ;; dired
   "d"   '(:ignore t :which-key "dired")
   "d j" '(dired-jump :which-key "dired-jump")
   "d J" '(dired-jump-other-window :which-key "dired-jump-other-window")
   "d d" '(dired :which-key "dired")
   "d n" '(dired-create-empty-file :which-key "dired-create-empty-file")
   ;; window management
   "w"   '(:ignore t :which-key "window")
   "w v" '(split-window-right :which-key "split window right")
   "w h" '(split-window-below :which-key "split window below")
   "w c" '(delete-window :which-key "delete-window")
   "w w" '(next-window-any-frame :which-key "next window")
   ;; help for variables, functions, keybindings, etc.
   "h"   '(:ignore t :which-key "help")
   "h a" '(consult-apropos :which-key "apropos")
   "h v" '(describe-variable :which-key "variable")
   "h f" '(describe-function :which-key "function")
   "h k" '(helpful-key :which-key "key")
   "h i" '(info :which-key "info")
   "h c" '(describe-key-briefly :which-key "describe-key-briefly")
   ;; jump with avy
   "j"   '(:ignore t :which-key "jump")
   "j j" '(avy-goto-char :which-key "avy-goto-char")
   "j w" '(avy-goto-word-1 :which-key "avy-goto-word-1")
   "j l" '(avy-goto-line :which-key "avy-goto-line")
   ;; magit status
   "g"   '(:ignore t :which-key "magit")
   "g g" '(magit-status :which-key "magit status")
   ;; org-mode
   "o"   '(:ignore t :which-key "org-mode")
   ;; org-mode
   "o a" '(org-agenda :which-key "org-agenda")
   "o e" '(org-export-dispatch :which-key "org-export-dispatch")
   "o t" '(org-todo :which-key "org-todo")
   "o h" '(org-toggle-heading :which-key "heading")
   "o i" '(org-toggle-item :which-key "item")
   "o o" '(consult-outline :which-key "consult-outline")
   "o S" '(org-show-todo-tree :which-key "org-show-todo-tree")
   "o q" '(org-set-tags-command :which-key "org-set-tags-command")
   "o N" '(org-add-note :which-key "org-add-note")
   ;; org-mode / checkbox
   "o x"   '(:ignore t :which-key "checkbox")
   "o x x" '(org-toggle-checkbox :which-key "org-toggle-checkbox")
   "o x s" '(rr/org-sort-list-by-checkbox-type :which-key "org-sort-checklist")
   ;; org-mode / clock
   "o c"   '(:ignore t :which-key "clock")
   "o c i" '(org-clock-in :which-key "org-clock-in")
   "o c o" '(org-clock-out :which-key "org-clock-out")
   "o c c" '(org-clock-cancel :which-key "org-clock-cancel")
   "o c d" '(org-clock-display :which-key "org-clock-display")
   "o c g" '(org-clock-goto :which-key "org-clock-goto")
   ;; org-mode / narrow
   "o n"   '(:ignore t :which-key "narrow")
   "o n s" '(org-narrow-to-subtree :which-key "org-narrow-to-subtree")
   "o n b" '(org-narrow-to-block :which-key "org-narrow-to-block")
   "o n e" '(org-narrow-to-element :which-key "org-narrow-to-element")
   "o n r" '(org-narrow-to-region :which-key "org-narrow-to-region")
   "o n w" '(widen :which-key "widen")
   ;; org-mode / refile
   "o r"   '(:ignore t :which-key "refile")
   "o r r" '(org-refile :which-key "org-refile")
   "o r c" '(org-refile-copy :which-key "org-refile-copy")
   "o r ." '(+org/refile-to-current-file :which-key "+org/refile-to-current-file")
   "o r A" '(org-archive-subtree :which-key "org-archive-subtree")
   ;; org-mode / date
   "o d"   '(:ignore t :which-key "date/deadline")
   "o d s" '(org-schedule :which-key "org-schedule")
   "o d d" '(org-deadline :which-key "org-deadline")
   "o d t" '(org-time-stamp :which-key "org-time-stamp")
   "o d T" '(org-time-stamp-inactive :which-key "org-time-stamp-inactive")
   ;; org-mode / links
   "o l"   '(:ignore t :which-key "links")
   "o l l" '(org-insert-link :which-key "org-insert-link")
   "o l v" '(crux-view-url :which-key "crux-view-url")
   "o l s" '(org-store-link :which-key "org-store-link")
   "o l h" '(rr/org-insert-html-link :which-key "org-insert-link-with-title")
   ;; projectile
   "p"   '(:ignore t :which-key "projectile")
   "p f" '(projectile-find-file :which-key "projectile-find-file")
   "p /" '(consult-ripgrep :which-key "consult-ripgrep")
   "p r" '(projectile-recentf :which-key "projectile-recentf")
   "p s" '(counsel-projectile-switch-project :which-key "projectile-switch-project")
   "p t" '(rr/projectile-run-vterm :which-key "rr/projectile-run-vterm")
   "p k" '(projectile-kill-buffers :which-key "projectile-kill-buffers")
   ;; files
   "f"   '(:ignore t :which-key "files")
   "f f" '(find-file :which-key "find-file")
   "f r" '(consult-recent-file :which-key "recent files")
   ;; consult
   "c"   '(:ignore t :which-key "consult")
   "c m" '(consult-mark :which-key "consult-mark")
   "c M" '(consult-global-mark :which-key "consult-global-mark")
   )

  (general-define-key
   :states '(normal insert)
   "C-e" 'end-of-line
   "C-a" 'beginning-of-line)

  (general-define-key
   :keymaps '(normal insert)
   "s-]" 'persp-next
   "s-[" 'persp-prev)
#+end_src

** Server Mode (unused)
Make this instance of emacs start server so that other client instances can connect to this.

*Note*: Actually, I never have more than one instance of Emacs open at any time. No need to do this.
#+begin_src emacs-lisp :tangle no
  (server-start)
#+end_src

** Auto-saving changed files
This removes the need to hit Save all the time.

#+begin_src emacs-lisp
  (use-package super-save
    :defer 1
    :diminish super-save-mode
    :config
    (super-save-mode +1)
    (setq super-save-auto-save-when-idle t))
#+end_src

** Auto-reverting changed files
This is to make sure regular files are reloaded when they're changed outside Emacs. For example, a file may have changed from another device (via Dropbox). Having the file open already and just going to that buffer will auto revert the file so that there are no overwrites.

#+begin_src emacs-lisp
  ;; Revert Dired and other buffers
  (setq global-auto-revert-non-file-buffers t)

  ;; Revert buffers when the underlying file has changed
  (global-auto-revert-mode 1)
#+end_src

** Automatically clean whitespaces (unused)
Trim whitespace at the end of the line. This happens when the buffer is saved and is unobtrusive. This means the user is not aware of the trimming that has happened. So, the point is not moved, but when the buffer is reverted this can be seen.
Package: [[https://github.com/lewang/ws-butler][ws-butler]]

#+begin_src emacs-lisp :tangle no
  (use-package ws-butler
    :hook ((text-mode . ws-butler-mode)
           (prog-mode . ws-butler-mode)))
#+end_src

** Smart Parenthesis (unused)
Add closing parenthesis whenever you open parenthesis.
Package: [[https://github.com/Fuco1/smartparens][smartparens]]

*Note*: temporarily disabling smartparens
#+begin_src emacs-lisp :tangle no
  (use-package smartparens)
  (smartparens-global-mode)
#+end_src

** Jumping around with Avy
Jump to any character, word or line in the visible region. Keybindings for this are described under Keybindings/General configuration.
Package: [[https://github.com/abo-abo/avy][avy]]

#+begin_src emacs-lisp
  (use-package avy
    :commands (avy-goto-char avy-goto-word-0 avy-goto-line))
#+end_src

** Eros Mode
While evaluating elisp expressions in a buffer, the eval results will be displayed as an overlay next to the expression instead of the echo area
Package: [[https://github.com/xiongtx/eros][eros]]

#+begin_src emacs-lisp
  (use-package eros
    :defer t)
  (eros-mode 1)
#+end_src

** Hungry Delete
If there are multiple consecutive whitespaces, I don't want to repeatedly hit delete to remove all the whitespaces. Instead, I just want to hit it once.
Package: [[https://github.com/nflath/hungry-delete][hungry-delete]]

#+begin_src emacs-lisp
  (use-package hungry-delete
    :defer 2
    :config
    (setq hungry-delete-join-reluctantly t))
  (global-hungry-delete-mode)
#+end_src

** Go to last change
As I make edits in different parts of the file, I want to go to last change and by default emacs gives the ability to do this only by explicitly setting a mark and then jumping to that mark. This is too tedious. This package takes care of going to last change with the keybinding =g ;=
Package: [[https://github.com/camdez/goto-last-change.el][goto-last-change]]

#+begin_src emacs-lisp
  (use-package goto-last-change)
#+end_src

** Revert buffer NOCONFIRM
I keep having to revert buffer for different reasons and when I hit the command, it asks me for confirmation. I don't want to say =yes= every single time.

#+begin_src emacs-lisp
  (defun rr/revert-buffer-no-confirm ()
    "Revert the buffer, but don't ask for confirmation"
    (interactive)
    (revert-buffer nil t nil))
#+end_src

** Popper
Manage pop up windows with ease. Make specific major modes open as popups.
Package: [[https://github.com/karthink/popper][popper]]

#+begin_src emacs-lisp
  (use-package popper
    :after projectile
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "^\\*Warnings\\*"
            "^\\*IBuffer\\*"
            "^\\*Compile-Log\\*"
            "^\\*Backtrace\\*"
            "[Oo]utput\\*$"
            "\\*Help\\*"
            "\\*helpful\\*"
            "\\*vterm\\*"
            "\\*Excorporate\\*"
            "\\*xref\\*"
            help-mode
            helpful-mode
            compilation-mode
            org-roam-mode
            term-mode
            vterm-mode)
          popper-group-function #'popper-group-by-projectile)
    (popper-mode +1))
#+end_src

*** Keybindings

#+begin_src emacs-lisp
  (general-define-key
   :keymaps '(normal insert)
   "C-;" 'popper-toggle-latest
   "C-:" 'popper-cycle)
#+end_src

** Undo Tree
Undo and redo actions are linear and quite frustrating in emacs. Undo tree helps visualize the tree of changes and revert to any of them
Package: [[https://github.com/apchamberlain/undo-tree.el][undo-tree]] 

#+begin_src emacs-lisp
  (use-package undo-tree)

  (global-undo-tree-mode)
#+end_src

** Recentf Mode
Enable =recentf= for usefulness.

#+begin_src emacs-lisp
  (recentf-mode)
#+end_src

** Insert HTML link with title as default description
Taken from: https://orgmode.org/worg/org-hacks.html#org4f1a640

#+begin_src emacs-lisp
  (require 'mm-url) ; to include mm-url-decode-entities-string

  (defun rr/org-insert-html-link ()
    "Insert org link where default description is set to html title."
    (interactive)
    (let* ((url (read-string "URL: "))
           (title (rr/get-html-title-from-url url)))
      (org-insert-link nil url title)))

  (defun rr/get-html-title-from-url (url)
    "Return content in <title> tag."
    (let (x1 x2 (download-buffer (url-retrieve-synchronously url)))
      (save-excursion
        (set-buffer download-buffer)
        (beginning-of-buffer)
        (setq x1 (search-forward "<title>"))
        (search-forward "</title>")
        (setq x2 (search-backward "<"))
        (mm-url-decode-entities-string (buffer-substring-no-properties x1 x2)))))
#+end_src

** Embark
Package: [[https://github.com/oantolin/embark][Embark]]

#+begin_src emacs-lisp
  (use-package embark
    :ensure t

    :bind
    (("C-," . embark-act)         ;; pick some comfortable binding
     ("C-M-," . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Embrace
#+begin_src emacs-lisp
  (use-package embrace)
  (global-set-key (kbd "C-.") #'embrace-commander)
  (add-hook 'org-mode-hook #'embrace-org-mode-hook)
#+end_src
** Highlight Symbol
#+begin_src emacs-lisp
  (use-package highlight-symbol :ensure t
    :config
    (set-face-attribute 'highlight-symbol-face nil
                        :background "default"
                        :foreground "#48E5C2") ;original: #FA009A, DE7C5A
    (setq highlight-symbol-idle-delay 0)
    (setq highlight-symbol-on-navigation-p t)
    (add-hook 'prog-mode-hook #'highlight-symbol-mode)
    (add-hook 'prog-mode-hook #'highlight-symbol-nav-mode))
#+end_src
* Keybindings
** Make ESC work better
Making =ESC= work like how it works in other programs - cancelling the operation

#+begin_src emacs-lisp
  ;; Making ESC key work like an ESC key by exiting/canceling stuff
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Switch buffers easily
=consult-buffer= lets you preview buffers as you scroll through them. It is not set to the keybinding =C-M-j= for easy access. Also, these buffers are aggregated across workspaces (or perspectives).

#+begin_src emacs-lisp
  (global-set-key (kbd "C-M-j") 'consult-buffer)
#+end_src

** Which key
This package shows up a mini help section kinda thing at the bottom that tells what commands are available for a given prefix. Great way to learn new commands and keybindings.
Package: [[https://github.com/justbur/emacs-which-key][emacs-which-key]]

#+begin_src emacs-lisp
  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.3))
#+end_src

** Evil
*** Basic Setup
This turns on evil mode with some specific customizations (that are self explanatory).
Package: [[https://github.com/emacs-evil/evil][Evil]]

#+begin_src emacs-lisp :tangle no
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-model 'normal))

  (evil-mode 1)

  ;; Evil Collection for predictable Vim keybindings in a lot of modes
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

*** Custom keybindings (unused)
Deleting words or lines make the deleted text end up in kill ring. This prevents me from pasting what I initially had in the clipboard. The following functions rewrite delete-word and delete-line functionalities without adding them to the kill-ring.
Currently, this is disabled. Will enable it once it's thoroughly tested.

#+begin_src emacs-lisp :tangle no
  (defun rr/delete-word (arg)
    (interactive "p")
    (delete-region
     (point)
     (progn
       (forward-word arg)
       (point))))

  (general-define-key
   :states 'normal
   "C-;" 'my-delete-word)
#+end_src
*** Speedkeys
Spacemacs has a cool feature where if you're on an org-mode heading and you press =t=, it invokes =org-todo= and you can quickly set the state of the heading to one of the many todo states. The following code is implementing that feature.

#+begin_src emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'org-mode-map
   "t" 'org-todo)
#+end_src

** Remap universal argument
Default keybinding for =prefix-argument= is =C-u=, but since this is now mapped to scrolling up half a page, it needs a new keybinding. The following code block remaps it to =C-S-u=.

#+begin_src emacs-lisp
  (general-define-key
   :states 'normal
   "C-S-u" 'universal-argument)
#+end_src

** Hydra
*** Package Setup
With a prefix set, Hydra helps you run similar commands in succession without having to run them with the prefix each time. For example, resizing windows or text scaling become much easier with this.
Package: [[https://github.com/abo-abo/hydra][Hydra]]

#+begin_src emacs-lisp
  (use-package hydra
    :defer t)
#+end_src

*** Handle Window Resize
This keybinding is to easily resize windows - horizontal or vertical

#+begin_src emacs-lisp
  (defhydra hydra-window-resize (global-map "C->")
    "resize"
    ("l" enlarge-window-horizontally "enlarge-horizontal")
    ("h" shrink-window-horizontally "shrink-horizontal")
    ("j" enlarge-window "enlarge-vertical")
    ("k" shrink-window "shrink-vertical"))
#+end_src

** Global keys
I constantly hit =C-w= to delete words and currently it’s bound to delete region, which deletes a huge chunk of text. This keybinding will give a better experience in deleting words.
#+begin_src emacs-lisp
  (keymap-global-set "C-w" 'backward-kill-word)
  (keymap-global-set "C-s" 'save-buffer)
  (keymap-global-set "s-[" 'persp-prev)
  (keymap-global-set "s-]" 'persp-next)
  (keymap-global-set "M-o" 'completion-at-point)
  #+end_src
** Meow
*** Custom Functions
This section has all the custom functions I use for Meow Mode. Most of them are written to make it work like Helix.
**** Meow Insert at start
This function upon execution moves the cursor to the beginning of the line and turns on the insert mode
#+begin_src emacs-lisp
  (defun rr/meow-insert-at-start ()
    (interactive)
    (beginning-of-line)
    (meow-insert-mode))
#+end_src
**** Meow Insert at end
This function upon execution moves the cursor to the end of the line and turns on the insert mode
#+begin_src emacs-lisp
  (defun rr/meow-insert-at-end ()
    (interactive)
    (end-of-line)
    (meow-insert-mode))
#+end_src
**** Meow Paste before
Pastes whatever is in the clipboard on the line above the cursor’s current position.
#+begin_src emacs-lisp
  (defun rr/meow-paste-before ()
    (interactive)
    (meow-open-above)
    (beginning-of-line)
    (meow-yank)
    (meow-normal-mode))
#+end_src
**** Meow delete char or region
Deletes char if no region is selected.
Deletes region if selected.
Cuts org subtree if point is on an org heading
#+begin_src emacs-lisp
  (defun rr/meow-delete-char-or-region ()
    (interactive)
    (cond
     ((equal mark-active t)
      (if (org-at-heading-p)
          (org-cut-subtree)
        (delete-region (region-beginning) (region-end))))
     ((equal mark-active nil)
      (delete-char 1))))
#+end_src
**** Meow Save
Copies the entire line when no selection exists
Copies region when there’s selection
Copies org subtree if point is on an org heading
#+begin_src emacs-lisp
  (defun rr/copy-line ()
    (interactive)
    (save-excursion
      (back-to-indentation)
      (kill-ring-save
       (point)
       (line-end-position)))
    (message "1 line copied"))

  (defun rr/meow-save ()
    (interactive)
    (cond
     ((org-at-heading-p)
      (org-copy-subtree))
     ((equal mark-active t)
      (meow-save))
     ((equal mark-active nil)
      (rr/copy-line))))
#+end_src
*** Custom Keymaps
**** Nav Keymap
This keymap is used for navigation. A lot of the functions here try to emulate Helix keybindings and navigation in order to make the experience more consistent.
#+begin_src emacs-lisp
  (defvar meow-nav-keymap
    (let ((keymap (make-keymap)))
      (define-key keymap (kbd "h") #'beginning-of-line)
      (define-key keymap (kbd "l") #'end-of-line)
      (define-key keymap (kbd "g") #'beginning-of-buffer)
      (define-key keymap (kbd "e") #'end-of-buffer)
      (define-key keymap (kbd "s") #'back-to-indentation)
      (define-key keymap (kbd "y") #'eglot-find-typeDefinition)
      (define-key keymap (kbd "i") #'eglot-find-implementation)
      keymap))

  ;; define an alias for your keymap
  (defalias 'meow-nav-keymap meow-nav-keymap)
  ;;  (global-set-key (kbd "C-x C-w") 'nav-keymap)
  ;;                              ^ note the quote
#+end_src
**** Persp keymap
#+begin_src emacs-lisp
  (defvar meow-persp-keymap
    (let ((keymap (make-keymap)))
      (define-key keymap (kbd "s") #'persp-switch)
      (define-key keymap (kbd "b") #'persp-switch-to-buffer)
      (define-key keymap (kbd "k") #'persp-kill)
      (define-key keymap (kbd "r") #'persp-rename)
      keymap))

  ;; define an alias for your keymap
  (defalias 'meow-persp-keymap meow-persp-keymap)
#+end_src
**** Buffer Keymap
#+begin_src emacs-lisp
  (defvar meow-buffer-keymap
    (let ((keymap (make-keymap)))
      (define-key keymap (kbd "k") #'kill-buffer)
      (define-key keymap (kbd "r") #'rr/revert-buffer-no-confirm)
      (define-key keymap (kbd "R") #'revert-buffer)
      (define-key keymap (kbd "i") #'ibuffer)
      keymap))

  ;; define an alias for your keymap
  (defalias 'meow-buffer-keymap meow-buffer-keymap)
#+end_src
**** Help Keymap
#+begin_src emacs-lisp
  (defvar meow-help-keymap
    (let ((keymap (make-keymap)))
      (define-key keymap (kbd "f") #'describe-function)
      (define-key keymap (kbd "v") #'describe-variable)
      (define-key keymap (kbd "c") #'describe-key-briefly)
      (define-key keymap (kbd "a") #'apropos-command)
      (define-key keymap (kbd "b") #'describe-bindings)
      keymap))

  ;; define an alias for your keymap
  (defalias 'meow-help-keymap meow-help-keymap)
#+end_src
**** Dired Keymap
#+begin_src emacs-lisp
  (defvar meow-dired-keymap
    (let ((keymap (make-keymap)))
      (define-key keymap (kbd "d") #'dired)
      (define-key keymap (kbd "j") #'dired-jump)
      (define-key keymap (kbd "J") #'dired-jump-other-window)
      (define-key keymap (kbd "n") #'dired-create-empty-file)
      keymap))

  ;; define an alias for your keymap
  (defalias 'meow-dired-keymap meow-dired-keymap)
#+end_src
**** Window Keymap
#+begin_src emacs-lisp
  (defvar meow-window-keymap
    (let ((keymap (make-keymap)))
      (define-key keymap (kbd "v") #'split-window-right)
      (define-key keymap (kbd "h") #'split-window-below)
      (define-key keymap (kbd "c") #'delete-window)
      (define-key keymap (kbd "w") #'next-window-any-frame)
      keymap))

  ;; define an alias for your keymap
  (defalias 'meow-window-keymap meow-window-keymap)
#+end_src  
**** File Keymap
#+begin_src emacs-lisp
  (defvar meow-file-keymap
    (let ((keymap (make-keymap)))
      (define-key keymap (kbd "f") #'find-file)
      (define-key keymap (kbd "r") #'consult-recent-file)
      (define-key keymap (kbd "p") #'projectile-find-file)
      keymap))

  ;; define an alias for your keymap
  (defalias 'meow-file-keymap meow-file-keymap)
#+end_src
**** Org Keymaps
***** Org checklist keymap
#+begin_src emacs-lisp
  (defvar meow-org-checklist-keymap
    (let ((keymap (make-keymap)))
      (define-key keymap (kbd "x") #'org-toggle-checkbox)
      (define-key keymap (kbd "s") #'rr/org-sort-list-by-checkbox-type)
      keymap))

  ;; define an alias for your keymap
  (defalias 'meow-org-checklist-keymap meow-org-checklist-keymap)
#+end_src
***** Org clock keymap
#+begin_src emacs-lisp
  (defvar meow-org-clock-keymap
    (let ((keymap (make-keymap)))
      (define-key keymap (kbd "i") #'org-clock-in)
      (define-key keymap (kbd "o") #'org-clock-out)
      (define-key keymap (kbd "c") #'org-clock-cancel)
      (define-key keymap (kbd "d") #'org-clock-display)
      (define-key keymap (kbd "i") #'org-clock-goto)
      keymap))

  ;; define an alias for your keymap
  (defalias 'meow-org-clock-keymap meow-org-clock-keymap)
#+end_src
***** Org narrow keymap
#+begin_src emacs-lisp
  (defvar meow-org-narrow-keymap
    (let ((keymap (make-keymap)))
      (define-key keymap (kbd "s") #'org-narrow-to-subtree)
      (define-key keymap (kbd "b") #'org-narrow-to-block)
      (define-key keymap (kbd "e") #'org-narrow-to-element)
      (define-key keymap (kbd "r") #'org-narrow-to-region)
      (define-key keymap (kbd "w") #'widen)
      keymap))

  ;; define an alias for your keymap
  (defalias 'meow-org-narrow-keymap meow-org-narrow-keymap)
#+end_src
***** Org deadline keymap
#+begin_src emacs-lisp
  (defvar meow-org-deadline-keymap
    (let ((keymap (make-keymap)))
      (define-key keymap (kbd "s") #'org-schedule)
      (define-key keymap (kbd "d") #'org-deadline)
      (define-key keymap (kbd "t") #'org-time-stamp)
      (define-key keymap (kbd "T") #'org-time-stamp-inactive)
      keymap))

  ;; define an alias for your keymap
  (defalias 'meow-org-deadline-keymap meow-org-deadline-keymap)
#+end_src
***** Org link keymap
#+begin_src emacs-lisp
  (defvar meow-org-link-keymap
    (let ((keymap (make-keymap)))
      (define-key keymap (kbd "l") #'org-insert-link)
      (define-key keymap (kbd "v") #'crux-view-url)
      (define-key keymap (kbd "s") #'org-store-link)
      (define-key keymap (kbd "h") #'rr/org-insert-html-link)
      (define-key keymap (kbd "d") #'rr/org-insert-link-dwim)
      keymap))

  ;; define an alias for your keymap
  (defalias 'meow-org-link-keymap meow-org-link-keymap)
#+end_src
***** Org toggle keymap
#+begin_src emacs-lisp
  (defvar meow-org-toggle-keymap
    (let ((keymap (make-keymap)))
      (define-key keymap (kbd "h") #'org-toggle-heading)
      (define-key keymap (kbd "i") #'org-toggle-item)
      (define-key keymap (kbd "x") #'org-toggle-checkbox)
      keymap))

  ;; define an alias for your keymap
  (defalias 'meow-org-toggle-keymap meow-org-toggle-keymap)
#+end_src
***** Org refile keymap
#+begin_src emacs-lisp
  (defvar meow-org-refile-keymap
    (let ((keymap (make-keymap)))
      (define-key keymap (kbd "r") #'org-refile)
      (define-key keymap (kbd "c") #'org-refile-copy)
      (define-key keymap (kbd ".") #'+org/refile-to-current-file)
      (define-key keymap (kbd "A") #'org-archive-subtree)
      keymap))

  ;; define an alias for your keymap
  (defalias 'meow-org-refile-keymap meow-org-refile-keymap)
#+end_src
***** Org main keymap
#+begin_src emacs-lisp
  (defvar meow-org-keymap
    (let ((keymap (make-keymap)))
      (define-key keymap (kbd "x") #'meow-org-checklist-keymap)
      (define-key keymap (kbd "c") #'meow-org-clock-keymap)
      (define-key keymap (kbd "r") #'meow-org-refile-keymap)
      (define-key keymap (kbd "n") #'meow-org-narrow-keymap)
      (define-key keymap (kbd "d") #'meow-org-deadline-keymap)
      (define-key keymap (kbd "l") #'meow-org-link-keymap)
      (define-key keymap (kbd "t") #'meow-org-toggle-keymap)
      (define-key keymap (kbd "N") #'org-add-note)
      (define-key keymap (kbd "o") #'consult-outline)
      (define-key keymap (kbd "q") #'org-set-tags-command)
      (define-key keymap (kbd "e") #'org-export-dispatch)
      (define-key keymap (kbd "a") #'org-agenda)
      keymap))

  ;; define an alias for your keymap
  (defalias 'meow-org-keymap meow-org-keymap)
#+end_src
**** Avy Keymap
#+begin_src emacs-lisp
  (defvar meow-avy-keymap
    (let ((keymap (make-keymap)))
      (define-key keymap (kbd "j") #'avy-goto-char)
      (define-key keymap (kbd "w") #'avy-goto-word-1)
      (define-key keymap (kbd "l") #'avy-goto-line)
      keymap))

  ;; define an alias for your keymap
  (defalias 'meow-avy-keymap meow-avy-keymap)
#+end_src
**** Eglot/Flymake keymap
#+begin_src emacs-lisp
  (defvar meow-eglot-keymap
    (let ((keymap (make-keymap)))
      (define-key keymap (kbd "a") #'eglot-code-actions)
      (define-key keymap (kbd "f") #'projectile-find-file)
      (define-key keymap (kbd "n") #'flymake-goto-next-error)
      (define-key keymap (kbd "p") #'flymake-goto-prev-error)
      (define-key keymap (kbd "s") #'flymake-show-project-diagnostics)
      (define-key keymap (kbd "r") #'eglot-rename)
      (define-key keymap (kbd "c") #'consult-flymake)
      keymap))

  ;; define an alias for your keymap
  (defalias 'meow-eglot-keymap meow-eglot-keymap)
#+end_src
**** Utilities
***** Highlight Symbol Keymap
#+begin_src emacs-lisp
  (defvar meow-highlight-keymap
    (let ((keymap (make-keymap)))
      (define-key keymap (kbd "t") #'highlight-symbol-mode)
      (define-key keymap (kbd "n") #'highlight-symbol-next)
      (define-key keymap (kbd "p") #'highlight-symbol-prev)
      (define-key keymap (kbd "r") #'highlight-symbol-remove-all)
      (define-key keymap (kbd "c") #'highlight-symbol-count)
      keymap))

  ;; define an alias for your keymap
  (defalias 'meow-highlight-keymap meow-highlight-keymap)
#+end_src
***** Util Keymap
#+begin_src emacs-lisp
  (defvar meow-util-keymap
    (let ((keymap (make-keymap)))
      (define-key keymap (kbd "r") #'restart-emacs)
      (define-key keymap (kbd "h") #'meow-highlight-keymap)
      (define-key keymap (kbd "g") #'magit-status)
      (define-key keymap (kbd "k") #'magit-discard)
      (define-key keymap (kbd "f") #'free-keys)
      (define-key keymap (kbd "w") #'writegood-mode)
      keymap))

  ;; define an alias for your keymap
  (defalias 'meow-util-keymap meow-util-keymap)
#+end_src
*** Meow Setup
This has key mappings to a bunch of things. It is the main entry point to do most of the operations. Space is the leader key and I’m trying to keep it consistent with the keymap I had with General.
#+begin_src emacs-lisp
  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; SPC j/k will run the original command in MOTION state.
     '("j" . "H-j")
     '("k" . "H-k")
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("`" . meow-last-buffer)
     '("RET" . consult-bookmark)
     '("b" . meow-buffer-keymap)
     '("h" . meow-help-keymap)  
     '("s" . meow-persp-keymap)
     '("d" . meow-dired-keymap)
     '("j" . meow-avy-keymap)
     '("f" . meow-file-keymap)
     '("l" . meow-eglot-keymap)
     '("u" . meow-util-keymap)
     '("w" . meow-window-keymap)
     '("o" . meow-org-keymap)
     '("/" . meow-keypad-describe-key)
     '("z" . scratch-buffer)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("M-j" . persp-prev)
     '("M-k" . persp-next)
     '("C-;" . popper-kill-latest-popup)
     '("C-S-s" . consult-line)
     '("C-u" . meow-page-up)
     '("C-d" . meow-page-down)
     '("C-w" . backward-kill-word)
     ;; '("C-n" . rr/org-show-next-heading-tidily)
     ;; '("C-p" . rr/org-show-previous-heading-tidily)
     '("t" . org-todo)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . rr/meow-insert-at-end)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . rr/meow-delete-char-or-region)
     '("D" . meow-backward-delete)
     '("e" . meow-block)
     '("E" . meow-to-block)
     '("f" . meow-find)
     '("g" . meow-nav-keymap)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . rr/meow-insert-at-start)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-mark-word)
     '("M" . meow-mark-symbol)
     '("n" . meow-search)
     '("o" . meow-open-below)
     '("O" . meow-open-above)
     '("p" . meow-yank)
     '("P" . rr/meow-paste-before)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("T" . meow-till)
     '("u" . undo-tree-undo)
     '("U" . undo-tree-redo)
     '("v" . meow-visit)
     '("w" . meow-next-word)
     '("W" . meow-next-symbol)
     '("x" . meow-line)
     '("X" . org-capture)
     '("y" . rr/meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '(";" . meow-cancel-selection)
     '(":" . meow-reverse)
     '("<escape>" . ignore)))
#+end_src
*** Meow Package Setup
#+begin_src emacs-lisp
  (use-package meow
    :custom
    (meow-use-cursor-position-hack t)
    (meow-use-clipboard t)
    (meow-goto-line-function 'consult-goto-line)
    :config
    (setq meow--kbd-delete-char "<deletechar>")
    (meow-thing-register 'angle '(regexp "<" ">") '(regexp "<" ">"))
    (add-to-list 'meow-char-thing-table '(?a . angle))
    (meow-global-mode 1)
    (meow-setup))
#+end_src
* Completion Frameworks
** Vertico
Package: [[https://github.com/minad/vertico][vertico]] 

#+begin_src emacs-lisp
  (defun rr/minibuffer-backward-kill (arg)
    "When minibuffer is completing a file name delete up to parent
  folder, otherwise delete a word"
    (interactive "p")
    (if minibuffer-completing-file-name
        ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
        (if (string-match-p "/." (minibuffer-contents))
            (zap-up-to-char (- arg) ?/)
          (delete-minibuffer-contents))
      (delete-word (- arg))))

#+end_src

#+begin_src emacs-lisp
  (use-package vertico
    :bind (:map minibuffer-local-map
                ("<Backspace>" . rr/minibuffer-backward-kill))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode +1)
    (setq completion-styles '(flex partial-completion)
          completion-ignore-case t
          completion-category-defaults nil
          completion-category-overrides nil))

  (define-key vertico-map "?" #'minibuffer-completion-help)
  (define-key vertico-map (kbd "M-RET") #'minibuffer-force-complete-and-exit)
  (define-key vertico-map (kbd "M-TAB") #'minibuffer-complete)

  (use-package savehist
    :custom
    (history-length 25)
    :init
    (savehist-mode))
#+end_src

** Marginalia
This package gives nice little extra information in the minibuffer while doing a describe function, describe variable, finding files, etc.
Package: [[https://github.com/minad/marginalia][marginalia]]

#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    (marginalia-align 'right)
    (marginalia-align-offset -5)
    :init
    (marginalia-mode))

  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))
#+end_src

** Orderless
Package: [[https://github.com/oantolin/orderless][orderless]]

#+begin_src emacs-lisp
  (use-package orderless
    :after vertico
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src
** Consult
Package: [[https://github.com/minad/consult][consult]]
*** Consult package setup
Sets up some basic hooks, keybindings, theme, etc.

#+begin_src emacs-lisp
  (use-package consult
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :init
    :config
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-recent-file
     consult--source-project-recent-file
     :preview-key (kbd "M-."))
    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")
    )
#+end_src

*** Projectile related
Copied over from [[https://github.com/daviwil/dotfiles/blob/master/Emacs.org#consult-commands][David Wilson's config on Consult]].

#+begin_src emacs-lisp
  (defun rr/get-project-root ()
    (when (fboundp 'projectile-project-root)
      (projectile-project-root)))

  (setq consult-project-root-function #'rr/get-project-root)
#+end_src

** Corfu
Found it here: https://gitlab.com/nathanfurnal/dotemacs/-/blob/master/init.el#L251
#+begin_src emacs-lisp
  (use-package corfu
    :ensure t
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-separator ?\s)          ;; Orderless field separator
    (corfu-quit-at-boundary 'separator)	;; Never quit at completion boundary
    (corfu-quit-no-match 'separator)      ;; Never quit, even if there is no match
    (corfu-preview-current 'insert)    ;; Disable current candidate preview
    (corfu-preselect-first nil)    ;; Disable candidate preselection
    (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    (corfu-echo-documentation nil) ;; Disable documentation in the echo area
    (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    :hook ((prog-mode . corfu-mode)
           (shell-mode . corfu-mode)
           (eshell-mode . corfu-mode)
           (typescript-mode . corfu-mode)
           (typescript-ts-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since Dabbrev can be used globally (M-/).
    ;; See also `corfu-excluded-modes'.
    :init
    (global-corfu-mode))

  (setq tab-always-indent 'complete)
#+end_src
** Kind Icon
Package: [[https://github.com/jdtsmith/kind-icon][kind-icon]]

#+begin_src emacs-lisp
  (use-package kind-icon
    :after corfu
    :custom
    (kind-icon-use-icons t)
    (kind-icon-default-face 'corfu-default)
    (kind-icon-blend-background nil)
    (kind-icon-blend-frac 0.08)
    (svg-lib-icons-dir (no-littering-expand-var-file-name "svg-lib/cache/"))
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

* Utilities
** Helpful package for better documentation formatting
This gives better links and formatting inside emacs documentation. This is particularly helpful while looking up documentation for functions, variables, etc.
I have remapped existing describe function to the =helpful= versions so that I don't have to specifically invoke =helpful= commands.
Package: [[https://github.com/Wilfred/helpful][helpful]]

#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key helpful-function)
    :bind
    ([remap describe-command] . helpful-command)
    ([remap describe-function] . helpful-callable)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))
#+end_src

** Expand Region
This is to mark/select regions that are nested. With repeated invocations of these commands, the selections expand outward level by level.
Package: [[https://github.com/magnars/expand-region.el][expand-region.el]]

#+begin_src emacs-lisp
  (use-package expand-region
    :bind (("M-[" . er/expand-region)
           ("C-(" . er/mark-outside-pairs)))
#+end_src

** Focus mode
This will highlight the current region and fade the region surrounding the point. It depends on =thing-at-point=, so what's highlight could be a word, a sentence, a code block, a paragraph, etc.
Package: [[https://github.com/larstvei/Focus][focus]]

#+begin_src emacs-lisp
  (use-package focus
    :defer 2)
#+end_src

** Crux
Collection of Really Useful eXtensions
Package: [[https://github.com/bbatsov/crux][crux]]

#+begin_src emacs-lisp
  (use-package crux
    :defer 2)
#+end_src

** Writegood
This package is to identify bad writing and help replace certain words/phrases in the sentence to make it better.
Package: [[https://github.com/bnbeckwith/writegood-mode][writegood-mode]]

#+begin_src emacs-lisp
  (use-package writegood-mode)
#+end_src
** Centaur Tabs
Package: [[https://github.com/ema2159/centaur-tabs][centaur-tabs]]

#+begin_src emacs-lisp
  (use-package centaur-tabs
    :demand
    :config
    (centaur-tabs-mode t)
    (setq
     centaur-tabs-cycle-scope 'tabs
     centaur-tabs-style "wave"
     centaur-tabs-set-icons t
     centaur-tabs-gray-out-icons 'buffer
     centaur-tabs-height 32
     centaur-tabs-set-bar 'under
     centaur-tabs-set-modified-marker t
     x-underline-at-descent-line t
     uniquify-separator "/"
     uniquify-buffer-name-style 'forward)
    (defun centaur-tabs-buffer-groups ()
      "`centaur-tabs-buffer-groups' control buffers' group rules.

  Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
  All buffer name start with * will group to \"Emacs\".
  Other buffer group by `centaur-tabs-get-group-name' with project name."
      (list
       (cond
        ;; ((not (eq (file-remote-p (buffer-file-name)) nil))
        ;; "Remote")
        ((or (string-equal "*" (substring (buffer-name) 0 1))
             (memq major-mode '(magit-process-mode
                                magit-status-mode
                                magit-diff-mode
                                magit-log-mode
                                magit-file-mode
                                magit-blob-mode
                                magit-blame-mode
                                )))
         "Emacs")
        ((derived-mode-p 'prog-mode)
         "Editing")
        ((derived-mode-p 'dired-mode)
         "Dired")
        ((memq major-mode '(helpful-mode
                            help-mode))
         "Help")
        ((memq major-mode '(org-mode
                            org-agenda-clockreport-mode
                            org-src-mode
                            org-agenda-mode
                            org-beamer-mode
                            org-indent-mode
                            org-bullets-mode
                            org-cdlatex-mode
                            org-agenda-log-mode
                            diary-mode))
         "OrgMode")
        (t
         (centaur-tabs-get-group-name (current-buffer))))))
    :bind
    ("C-S-<tab>" . centaur-tabs-backward)
    ("C-<tab>" . centaur-tabs-forward))
#+end_src
** Free Keys
This package shows a list of unbound keys so that it’s easy to pick one while assigning a keybinding to a function

#+begin_src emacs-lisp
  (use-package free-keys)
#+end_src
* Dired
File management with dired

#+begin_src emacs-lisp
  (use-package dired
    :straight nil
    :commands (dired dired-jump)
    :bind (:map dired-mode-map
                ("H" . dired-omit-mode)
                ("h" . dired-single-up-directory)
                ("l" . dired-single-buffer)
                ("s-[" . persp-prev)
                ("s-]" . persp-next)
                ("M-j" . persp-prev)
                ("M-k" . persp-next))
    :config
    (setq
     ;; https://github.com/d12frosted/homebrew-emacs-plus/issues/383
     insert-directory-program "/opt/homebrew/bin/gls"
     dired-listing-switches "-agho --group-directories-first"
     dired-omit-files "^\\.[^.].*"
     dired-omit-verbose nil
     dired-hide-details-hide-symlink-targets nil
     dired-kill-when-opening-new-dired-buffer t
     delete-by-moving-to-trash t)

    (autoload 'dired-omit-mode "dired-x")

    (add-hook 'dired-load-hook
              (lambda ()
                (interactive)
                (dired-collapse)))

    (add-hook 'dired-mode-hook
              (lambda ()
                (interactive)
                (dired-omit-mode 1)
                (hl-line-mode 1)
                (diredfl-mode 1)
                (diff-hl-dired-mode 1)))

    (use-package dired-single
      :defer t)

    (use-package dired-ranger
      :defer t)

    (use-package dired-collapse
      :defer t)

    (use-package diredfl
      :defer t))
#+end_src

* Development
** Projectile
This is great for managing projects. It is good at finding project roots and provides many other functions.
Package: [[https://github.com/bbatsov/projectile][projectile]]

#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :init
    (when (file-directory-p "~/code")
      (setq projectile-project-search-path '("~/code")))
    (setq projectile-switch-project-action #'projectile-dired))

  ;; (use-package counsel-projectile
  ;; :after projectile
  ;; :config (counsel-projectile-mode))

  (general-define-key
   :states 'normal
   :prefix "C-c"
   "p" 'projectile-command-map)
#+end_src

** Flymake

#+begin_src emacs-lisp
  (general-define-key
   :states '(normal insert)
   "s-." 'flymake-goto-next-error
   "s->" 'flymake-goto-prev-error)
#+end_src

** Git Gutter
Highlight addition, changes or deletion of lines on the left margin of each file that's inside a git repository. This helps in quickly identifying the changes in a file.
Package: [[https://github.com/dgutov/diff-hl][diff-hl]]

#+begin_src emacs-lisp
  (use-package diff-hl)
  (global-diff-hl-mode)
  (diff-hl-flydiff-mode 1)
  (diff-hl-dired-mode 1)
  (diff-hl-margin-mode 1)
#+end_src

** Magit
The best git client ever!
Package: [[https://magit.vc/][magit]]

#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

** Blamer
This is a git blame plugin inspired by VSCode's GitLens feature
Package: [[https://github.com/Artawower/blamer.el][blamer]]

Note: This is disabled for now. It slows down scrolling. But it can be enabled anytime.

#+begin_src emacs-lisp
  (use-package blamer
    ;;    :hook ((js2-mode . blamer-mode)
    ;;           (typescript-mode . blamer-mode))
    :custom
    (blamer-idle-time 0.1)
    (blamer-min-offset 70)
    :custom-face
    (blamer-face ((t :foreground "#7a88cf"
                     :background nil
                     :height 140
                     :italic t))))
#+end_src

** Terminal
*** Vterm setup
Terminal emulation in emacs. This is the closest terminal emulation that Emacs can give that resembles what you see in, say, iTerm. Vterm Toggle is great for bringing up the terminal in any buffer as a popup from the bottom and dismissing it when it's not needed.
Packages:
- [[https://github.com/akermu/emacs-libvterm][vterm]]
- [[https://github.com/jixiuf/vterm-toggle][vterm-toggle]]

#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm)
  (use-package vterm-toggle
    :commands vterm-toggle)
#+end_src

*** Invoke terminal in project's root (as popup)
Projectile's function to invoke terminal in project root only opens it in full screen mode. This is a modification to that function that opens vterm as a popup.

#+begin_src emacs-lisp
  (defun rr/projectile-run-vterm ()
    "Invoke `vterm' in the project's root."

    (interactive)
    (cond ((and
            (equal nil (projectile-project-root))
            (equal t (projectile-mode)))
           (vterm-toggle))
          (t (projectile-with-default-dir (projectile-acquire-root)
               (vterm-toggle)))))
#+end_src

** Languages
*** Language Servers (unused)
This sets up language server configuration with some pretty cool defaults.
Make sure to run =lsp-install-server es-lint= to enable eslint configuration.
Packages:
- [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]]
- [[https://github.com/emacs-lsp/lsp-ui][lsp-ui]]
- [[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]]
- [[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]]
- [[https://github.com/jscheid/prettier.el][prettier]]

#+begin_src emacs-lisp :tangle no
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook
    ((typescript-mode js2-mode web-mode) . lsp)
    ((lsp-completion-mode . rr/lsp-mode-setup-completion))
    :init
    (defun rr/lsp-mode-setup-completion ()
      (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
            '(orderless))) ;; Configure flex
    (setq lsp-keymap-prefix "C-c l")
    :config
    (setq lsp-auto-guess-root t)
    (setq lsp-ui-sideline-show-code-actions t)
    (lsp-enable-which-key-integration t)
    :custom
    (lsp-completion-provider :none) ;; we use corfu
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (setq lsp-restart 'auto-restart)
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (setq lsp-ui-doc-position 'bottom)
    (setq lsp-ui-doc-header t)
    (setq lsp-ui-doc-include-signature t)
    )

  ;; (use-package lsp-treemacs
  ;; :after lsp)

  ;; unused for now, Will enable it if needed
  ;; (use-package lsp-ivy
  ;; :after lsp)

  ;; unused for now, Will enable it if needed
  ;; (use-package flycheck
  ;;   :defer t
  ;;   :hook (lsp-mode . flycheck-mode))

  (general-define-key
   :keymaps 'lsp-mode-map
   :prefix "C-c l"
   "a f" 'lsp-eslint-apply-all-fixes)
#+end_src

*** TypeScript (unused)
This sets up typescript mode with defaults for eslint.
Package: [[https://github.com/emacs-typescript/typescript.el][typescript]]

#+begin_src emacs-lisp :tangle no
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :config
    (setq typescript-indent-level 2
          lsp-eslint-auto-fix-on-save t))

  (defun rr/set-js-indentation ()
    "Set javascript indentation to 2"
    (setq js-indent-level 2)
    (setq evil-shift-width js-indent-level)
    (setq-default tab-width 2))

  (use-package js2-mode
    :mode "\\.jsx?\\'"
    :config
    ;; Use js2-mode for Node scripts
    (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode)))

  (add-hook 'js2-mode-hook #'rr/set-js-indentation)
  (add-hook 'json-mode-hook #'rr/set-js-indentation)

  (use-package prettier-js
    :hook ((js2-mode . prettier-js-mode)
           (typescript-mode . prettier-js-mode))
    :config
    (setq prettier-js-show-errors 'echo))
#+end_src

*** Completions with Company-mode (unused)
This is necessary for relevant code completions
Package: [[http://company-mode.github.io/][company-mode]]

#+begin_src emacs-lisp :tangle no
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . consult-company))
    (:map lsp-mode-map
          ("<tab>" . consult-company))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

  (use-package consult-company)

  (define-key company-mode-map [remap completion-at-point] #'consult-company)
#+end_src
*** Tide (unused)
#+begin_src emacs-lisp :tangle no
  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    ;; company is an optional dependency. You have to
    ;; install it separately via package-install
    ;; `M-x package-install [ret] company`
    ;; (company-mode +1))
    ;; (corfu-mode)
    )

  (use-package flycheck)

  ;; aligns annotation to the right hand side
  (setq company-tooltip-align-annotations t)

  ;; formats the buffer before saving
  (add-hook 'before-save-hook 'tide-format-before-save)

  (add-hook 'typescript-mode-hook #'setup-tide-mode)
#+end_src
**** TSX
#+begin_src emacs-lisp :tangle no
  (use-package web-mode)
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
  (add-hook 'web-mode-hook
            (lambda ()
              (when (string-equal "tsx" (file-name-extension buffer-file-name))
                (setup-tide-mode))))
  ;; enable typescript-tslint checker
  (flycheck-add-mode 'typescript-tslint 'web-mode)

  (add-hook 'js2-mode-hook #'setup-tide-mode)
  ;; configure javascript-tide checker to run after your default javascript checker
  ;; (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append)
#+end_src
**** JSX
#+begin_src emacs-lisp :tangle no
  (use-package web-mode)
  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
  (add-hook 'web-mode-hook
            (lambda ()
              (when (string-equal "jsx" (file-name-extension buffer-file-name))
                (setup-tide-mode))))
  ;; configure jsx-tide checker to run after your default jsx checker
  (flycheck-add-mode 'javascript-eslint 'web-mode)
  ;; (flycheck-add-next-checker 'javascript-eslint 'jsx-tide 'append)
  (add-hook 'js2-mode-hook #'setup-tide-mode)
#+end_src
**** Tide
#+begin_src emacs-lisp :tangle no
  (use-package tide
    :ensure t
    :after (typescript-mode corfu flycheck)
    :hook ((typescript-mode . tide-setup)
           (typescript-mode . tide-hl-identifier-mode)
           (before-save . tide-format-before-save)))
#+end_src
*** Flycheck (unused)
#+begin_src emacs-lisp :tangle no
  (use-package flycheck
    :diminish flycheck-mode
    :ensure t
    :defer t
    :custom
    (flycheck-check-syntax-automatically '(mode-enabled save)) ; Check on save instead of running constantly
    :hook ((prog-mode-hook text-mode-hook typescript-mode-hook typescript-ts-mode-hook) . flycheck-mode))
#+end_src
*** Tide (unused)
Found it here: https://gitlab.com/nathanfurnal/dotemacs/-/blob/master/init.el#L1023
#+begin_src emacs-lisp :tangle no
  (use-package tide
    :ensure t
    :defer t
    :commands flycheck-add-next-checker
    :after (typescript-mode flycheck)
    :defines (tide-mode-map flycheck-check-syntax-automatically)
    :config
    (defun setup-tide-mode ()
      (interactive)
      (tide-setup)
      (flycheck-mode +1)
      (setq flycheck-check-syntax-automatically '(save mode-enabled))
      (eldoc-mode +1)
      (tide-hl-identifier-mode +1))

    ;; configure javascript-tide checker to run after your default javascript checker
    (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append)
    :hook
    ((rjsx-mode-hook . setup-tide-mode)
     (typescript-mode-hook . tide-setup)
     (typescript-mode-hook . tide-hl-identifier-mode)
     (before-save-hook . tide-format-before-save))

    :bind (:map tide-mode-map
                ("M-j" . tide-jsdoc-template)))
#+end_src
*** Aphelia for auto-format
Package: [[https://github.com/radian-software/apheleia][aphelia]]

#+begin_src emacs-lisp
(use-package apheleia
  :ensure t
  :config
  (apheleia-global-mode +1))
#+end_src
*** Treesitter (unused)
Found this code snippet here: https://olddeuteronomy.github.io/post/a-tree-sitter-config-that-works

#+begin_src emacs-lisp :tangle no
  (use-package tree-sitter)
  (use-package tree-sitter-langs)

  (setq treesit-extra-load-path '("~/dotfiles/.emacs.d/tree-sitter" "~/dotfiles/.emacs.d/tree-sitter-langs"))
  (add-hook 'typescript-mode-hook #'tree-sitter-hl-mode)
  (add-hook 'typescript-ts-mode-hook #'tree-sitter-hl-mode)
#+end_src

*** Treesitter
Found a working setup here: https://vxlabs.com/2022/06/12/typescript-development-with-emacs-tree-sitter-and-lsp-in-2022

#+begin_src emacs-lisp
  (use-package tree-sitter
    :ensure t
    :config
    ;; activate tree-sitter on any buffer containing code for which it has a parser available
    (global-tree-sitter-mode)
    ;; you can easily see the difference tree-sitter-hl-mode makes for python, ts or tsx
    ;; by switching on and off
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

  (use-package tree-sitter-langs
    :ensure t
    :after tree-sitter)

  (use-package typescript-mode
    :after tree-sitter
    :config
    ;; we choose this instead of tsx-mode so that eglot can automatically figure out language for server
    ;; see https://github.com/joaotavora/eglot/issues/624 and https://github.com/joaotavora/eglot#handling-quirky-servers
    (define-derived-mode typescriptreact-mode typescript-mode
      "TypeScript TSX")

    ;; use our derived mode for tsx files
    (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . typescriptreact-mode))
    ;; by default, typescript-mode is mapped to the treesitter typescript parser
    ;; use our derived mode to map both .tsx AND .ts - typescriptreact-mode - treesitter tsx
    (add-to-list 'tree-sitter-major-mode-language-alist '(typescriptreact-mode . tsx)))

  (use-package tsi
    :after tree-sitter
    :straight (tsi :host github :repo "orzechowskid/tsi.el")
    ;; define autoload definitions which when actually invoked will cause package to be loaded
    :commands (tsi-typescript-mode tsi-json-mode tsi-css-mode)
    :init
    (add-hook 'typescript-mode-hook (lambda () (tsi-typescript-mode 1)))
    (add-hook 'json-mode-hook (lambda () (tsi-json-mode 1)))
    (add-hook 'css-mode-hook (lambda () (tsi-css-mode 1)))
    (add-hook 'scss-mode-hook (lambda () (tsi-scss-mode 1))))
#+end_src
*** Eglot
#+begin_src emacs-lisp
  (use-package eglot
    :hook ((typescriptreact-mode . eglot-ensure))
    :config
    (setq eglot-confirm-server-initiated-edits nil))
#+end_src
* Buffers
** Perspectives
*** Basic Setup
This provides multiple "workspaces" for better management of buffers.
Package: [[https://github.com/nex3/perspective-el][perspective.el]]

#+begin_src emacs-lisp
  (use-package perspective
    :bind (("C-x k" . persp-kill-buffer*))
    :custom
    (persp-mode-prefix-key (kbd "C-c M-p"))
    (persp-initial-frame-name "main")
    (persp-sort 'created)
    :init
    (persp-mode))
#+end_src

*** IBuffer hook
This is to display buffers under their respective perspectives

#+begin_src emacs-lisp
  (add-hook 'ibuffer-hook
            (lambda ()
              (persp-ibuffer-set-filter-groups)
              (unless (eq ibuffer-sorting-mode 'alphabetic)
                (ibuffer-do-sort-by-alphabetic))))
#+end_src

*** Saving Sessions
Set the directory for auto saving persp sessions

#+begin_src emacs-lisp
  (setq persp-state-default-file (concat user-emacs-directory "var/persp-auto-save"))
  (add-hook 'kill-emacs-hook #'persp-state-save)
#+end_src

* OrgMode
** Capture Templates

#+begin_src emacs-lisp
  (defun rr/set-org-capture-templates ()
    `(("o" "Organize")
      ("ot" "Task" entry (file+olp, (rr/org-path "organize.org") "Tasks")
       "* TODO %?\n%U\n %i" :kill-buffer t)
      ("oe" "Event" entry (file+olp, (rr/org-path "organize.org") "Events")
       "* TODO %?\n%U\n %i")
      ("og" "Guitar" entry (file+olp, (rr/org-path "organize.org") "Goals" "Guitar" "Practice Log")
       "* %u\n%?")
      ("w" "Work")
      ("wt" "Work Task" entry (file+olp, (rr/org-path "work-tasks.org") "Tasks")
       "* TODO %?\n%U\n %i" :kill-buffer t)
      ("wd" "Deep Task" entry (file+olp, (rr/org-path "work-tasks.org") "All Tasks" "Deep")
       "* TODO %?\n%U\n %i" :kill-buffer t)
      ("ws" "Shallow Task" entry (file+olp, (rr/org-path "work-tasks.org") "All Tasks" "Shallow")
       "* TODO %?\n%U\n %i" :kill-buffer t)
      ("wi" "Work Inbox" entry (file+olp, (rr/org-path "work-tasks.org") "Inbox")
       "* %?\n%U\n %i")
      ("wm" "Work Meeting" entry (file+headline, (rr/org-path "work-tasks.org") "Meeting Notes")
       "* %?\n%U\n %i")
      ("wa" "Activity Log" entry (file+olp+datetree, (rr/org-path "work-tasks.org") "Activity Log")
       "* %?\n%U\n %i")
      ("j" "Journal" entry (file+datetree, (rr/org-path "journal.org"))
       "* %?\n")
      ("n" "Notes")
      ("nr" "Resource" entry (file+olp, (rr/org-path "refile.org") "Resources")
       "* %?\n%U\n %i")
      ("nc" "Curiosity" entry (file+olp, (rr/org-path "refile.org") "Curiosities")
       "* %?\n%U\n %i")
      ("no" "Other" entry (file+olp, (rr/org-path "refile.org") "Notes")
       "* %?\n%U\n %i")
      ("l" "Life")
      ("lj" "Journal" entry (file+olp+datetree, (rr/org-path "life.org") "Journal") "* %?\n%U\n %i")
      )
    )
#+end_src

** Basic setup

#+begin_src emacs-lisp
  (defun rr/org-path (path)
    (expand-file-name path org-directory))

  (defun rr/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode)
    (setq org-directory "/ssh:rrajath@192.168.0.218#522:/var/services/homes/rrajath/Dropbox/org-mode")
    (setq org-agenda-files (list org-directory))
    (setq org-capture-templates (rr/set-org-capture-templates))
    (setq org-todo-keywords
          '((sequence "TODO(t)" "STRT(s)" "WAIT(w)" "HOLD(h)" "IDEA(i)" "CODE(c)" "FDBK(f)" "|" "DONE(d!)" "KILL(k!)")
            ))
    (setq org-id-link-to-org-use-id 'use-existing))

  (use-package org
    :hook (org-mode . rr/org-mode-setup)
    :config
;;    (rr/org-mode-setup)
    (setq org-ellipsis " ▾"
          org-hide-emphasis-markers t
          org-log-done 'time
          org-log-into-drawer t
          ;; org-adapt-indentation t
          ;; org-element-use-cache nil
          org-special-ctrl-a/e t
          org-insert-heading-respect-content t
          org-tags-column -70
          org-agenda-start-with-log-mode t
          org-agenda-skip-scheduled-if-done t
          org-agenda-skip-deadline-if-done t
          org-agenda-include-deadlines t
          org-agenda-block-separator nil
          org-agenda-tags-column 100
          org-agenda-compact-blocks t
          org-agenda-include-diary t
          org-catch-invisible-edits 'smart
          org-fontify-whole-heading-line t
          org-ctrl-k-protect-subtree t
          org-cycle-separator-lines 0
          org-refile-use-outline-path 'file
          org-outline-path-complete-in-steps nil
          org-refile-allow-creating-parent-nodes 'confirm
          org-refile-targets
          '((nil :maxlevel . 6)
            (org-agenda-files :maxlevel . 6)))

    (advice-add 'org-refile :after 'org-save-all-org-buffers))

  (require 'org-indent)
#+end_src

** Org Export Git Flavored Markdown
Export buffers/subtrees to git flavored markdown
Package: [[https://github.com/larstvei/ox-gfm][ox-gfm]]

#+begin_src emacs-lisp
  (use-package ox-gfm
    :after org)
#+end_src

** Org Appear
This is to make emphasis markers like bold or italics show up when cursor is on the words that contain said markers.
Package: [[https://github.com/awth13/org-appear][org-appear]]

#+begin_src emacs-lisp
  (use-package org-appear)
  (add-hook 'org-mode-hook 'org-appear-mode)
#+end_src

** Prettier bullets
Package: [[https://github.com/sabof/org-bullets][org-bullets]]

#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Visual Fill Column
Make the fill column 100 characters long and enable visual-line-mode in it.
Package: [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]]

#+begin_src emacs-lisp
  (defun rr/org-mode-visual-fill ()
    (setq visual-fill-column-width 120
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . rr/org-mode-visual-fill))
#+end_src

** Evil-Org-Mode (unused)
Package: [[https://github.com/Somelauw/evil-org-mode][evil-org-mode]]

There's currently [[https://github.com/Somelauw/evil-org-mode/issues/93][an issue]] with =evil-org= where Emacs gives this error on startup: =(void-function evil-redirect-digit-argument)=
The following snippet is a work around:

#+begin_src emacs-lisp :tangle no
  (fset 'evil-redirect-digit-argument 'ignore) ; before evil-org loaded

  (add-to-list 'evil-digit-bound-motions 'evil-org-beginning-of-line)
  (evil-define-key 'motion 'evil-org-mode
                   (kbd "0") 'evil-org-beginning-of-line)
#+end_src

#+begin_src emacs-lisp :tangle no
  (use-package evil-org
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

** TODO Agenda Configs
This needs a lot more work, but this is a good start

#+begin_src emacs-lisp
  (setq org-agenda-span 'day)

  (setq org-agenda-custom-commands
        `(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (tags-todo "+PRIORITY=\"A\""
                       ((org-agenda-overriding-header "High Priority")))
            (todo "STRT"
                  ((org-agenda-overriding-header "In Progress")
                   (org-agenda-max-todos nil)))
            (todo "TODO"
                  ((org-agenda-overriding-header "Unprocessed Inbox Tasks")))))
          ("w" "Work Tasks"
           ((agenda "" ((org-deadline-warning-days 7)))
            (tags-todo "+work-meeting"
                       ((org-agenda-overriding-header "Work Tasks")))
            ))
          ("%" "Appointments" agenda* "Today's appointments"
           ((org-agenda-span 1)
            (org-agenda-max-entries 3)))
          ))
#+end_src

** TODO Org Super Agenda

#+begin_src emacs-lisp :tangle no
  (use-package org-super-agenda)

  (let ((org-super-agenda-groups
         '((:log t)  ; Automatically named "Log"
           (:name "Schedule"
                  :time-grid t)
           (:name "Today"
                  :scheduled today)
           (:habit t)
           (:name "Due today"
                  :deadline today)
           (:name "Overdue"
                  :deadline past)
           (:name "Due soon"
                  :deadline future)
           (:name "Unimportant"
                  :todo ("SOMEDAY" "MAYBE" "CHECK" "TO-READ" "TO-WATCH")
                  :order 100)
           (:name "Waiting..."
                  :todo "WAITING"
                  :order 98)
           (:name "Scheduled earlier"
                  :scheduled past))))
    (org-agenda-list))
#+end_src

** Babel Configuration
*** Configure Babel Languages

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (shell . t))))

  (setq org-confirm-babel-evaluate nil)

  (with-eval-after-load 'org
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")))
#+end_src

*** Source Language Modes
This is for emacs to recognize and provide syntax highlighting for config files that have a similar format in unix based systems (key-value pairs)

#+begin_src emacs-lisp
  ;; This may not be needed
  (push '("conf-unix" . conf-unix) org-src-lang-modes)
#+end_src

*** Auto-tangle Configuration Files

#+begin_src emacs-lisp
  ;; Automatically tangle PrivateConfig.org config file when we save it
  (defun rr/org-babel-tangle-config ()
    (when (string-match "dotfiles\/" (buffer-file-name))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'rr/org-babel-tangle-config)))
#+end_src

*** TODO Use =:noweb yes= to pull work related configs
The way this should work is, if this config is installed on a personal machine, it should tangle all the blocks. However, if it's installed on a work machine, it should look for specific org files (that can tangle themselves) and bring it in here. Or it could be the reverse - look for a specific location to see if it contains org files. If so,

Use [[https://youtu.be/kkqVTDbfYp4?t=2400][System Crafters Emacs From Scratch]] as an example for this.
** Generate Table of Contents
It's nice to generate table of contents at the top of the org file for easy navigation.
Package: [[https://github.com/alphapapa/org-make-toc][org-make-toc]]

#+begin_src emacs-lisp
  (use-package org-make-toc
    :after org)

  (defun rr/enable-org-make-toc-mode ()
    (if (equal (buffer-name) "PrivateConfig.org")
        (org-make-toc-mode)))

  (add-hook 'find-file-hook 'rr/enable-org-make-toc-mode)
#+end_src

** Org todo keyword faces

#+begin_src emacs-lisp
  (setq org-todo-keyword-faces
        '(("WAIT" . (:foreground "#e6bf85" :weight bold))
          ("TODO" . (:foreground "#a0bc70" :weight bold))
          ("STRT" . (:foreground "#a7a2dc" :weight bold))
          ("HOLD" . (:foreground "#e6bf85" :weight bold))
          ("CODE" . (:foreground "#e6bf85" :weight bold))
          ("FDBK" . (:foreground "#e6bf85" :weight bold))
          ("IDEA" . (:foreground "#fdac37" :weight bold))
          ("DONE" . (:foreground "#5c6267" :weight bold))
          ("KILL" . (:foreground "#ee7570" :weight bold))))
#+end_src

** Org faces
Currently trying out this setting with fixed width /and/ variable width fonts. /May change soon/.

#+begin_src emacs-lisp
  (setq my-fixed-pitch-font "JetBrains Mono")
  (setq my-variable-pitch-font "Raleway")

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil
                      :font my-fixed-pitch-font
                      :height 160
                      :weight 'light)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil
                      :font my-variable-pitch-font
                      :height 150
                      :weight 'regular)

  (set-face-attribute 'org-document-title nil :font my-variable-pitch-font :weight 'regular :height 1.5)

  (dolist (face '((org-level-1 . 1.3)
                  (org-level-2 . 1.2)
                  (org-level-3 . 1.15)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font my-variable-pitch-font :weight 'regular :height (cdr face))

    ;; Original background color of org-block: #3B3D4A
    (set-face-attribute 'org-block nil :foreground "unspecified" :background "#2D313B" :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-todo nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-list-dt nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-tag nil :foreground "#5A5D67")
    (set-face-attribute 'hl-line nil :background "#0d3b66")
    (set-face-attribute 'org-column nil :background "unspecified")
    (set-face-attribute 'org-column-title nil :background "unspecified"))
#+end_src

** Org Behaviors
*** Org RET key behavior
RET can be used in variety of places - toggling TODO items, toggling checkboxes, opening links, etc. The following fuctions are copied over from Doom and help make RET more intuitive in org-mode.
**** Org get todo keywords for
This function is called by +org/dwim-at-point

#+begin_src emacs-lisp
  (defun +org-get-todo-keywords-for (&optional keyword)
    "Returns the list of todo keywords that KEYWORD belongs to."
    (when keyword
      (cl-loop for (type . keyword-spec)
               in (cl-remove-if-not #'listp org-todo-keywords)
               for keywords =
               (mapcar (lambda (x) (if (string-match "^\\([^(]+\\)(" x)
                                       (match-string 1 x)
                                     x))
                       keyword-spec)
               if (eq type 'sequence)
               if (member keyword keywords)
               return keywords)))
#+end_src

**** Org dwim-at-point
This is copied over from Doom Emacs. This function basically interprets RET as one of several things based on the context. On a checkbox, it toggles the checkbox, on a TODO heading it toggles that, on a link it opens the link in a browser, etc. Makes everything very intuitive.

#+begin_src emacs-lisp
  (defun +org/dwim-at-point (&optional arg)
    "Do-what-I-mean at point.

  If on a:
  - checkbox list item or todo heading: toggle it.
  - clock: update its time.
  - headline: cycle ARCHIVE subtrees, toggle latex fragments and inline images in
    subtree; update statistics cookies/checkboxes and ToCs.
  - footnote reference: jump to the footnote's definition
  - footnote definition: jump to the first reference of this footnote
  - table-row or a TBLFM: recalculate the table's formulas
  - table-cell: clear it and go into insert mode. If this is a formula cell,
    recaluclate it instead.
  - babel-call: execute the source block
  - statistics-cookie: update it.
  - latex fragment: toggle it.
  - link: follow it
  - otherwise, refresh all inline images in current tree."
    (interactive "P")
    (if (button-at (point))
        (call-interactively #'push-button)
      (let* ((context (org-element-context))
             (type (org-element-type context)))
        ;; skip over unimportant contexts
        (while (and context (memq type '(verbatim code bold italic underline strike-through subscript superscript)))
          (setq context (org-element-property :parent context)
                type (org-element-type context)))
        (pcase type
          (`headline
           (cond ((memq (bound-and-true-p org-goto-map)
                        (current-active-maps))
                  (org-goto-ret))
                 ((and (fboundp 'toc-org-insert-toc)
                       (member "TOC" (org-get-tags)))
                  (toc-org-insert-toc)
                  (message "Updating table of contents"))
                 ((string= "ARCHIVE" (car-safe (org-get-tags)))
                  (org-force-cycle-archived))
                 ((or (org-element-property :todo-type context)
                      (org-element-property :scheduled context))
                  (org-todo
                   (if (eq (org-element-property :todo-type context) 'done)
                       (or (car (+org-get-todo-keywords-for (org-element-property :todo-keyword context)))
                           'todo)
                     'done))))
           ;; Update any metadata or inline previews in this subtree
           (org-update-checkbox-count)
           (org-update-parent-todo-statistics)
           (when (and (fboundp 'toc-org-insert-toc)
                      (member "TOC" (org-get-tags)))
             (toc-org-insert-toc)
             (message "Updating table of contents"))
           (let* ((beg (if (org-before-first-heading-p)
                           (line-beginning-position)
                         (save-excursion (org-back-to-heading) (point))))
                  (end (if (org-before-first-heading-p)
                           (line-end-position)
                         (save-excursion (org-end-of-subtree) (point))))
                  (overlays (ignore-errors (overlays-in beg end)))
                  (latex-overlays
                   (cl-find-if (lambda (o) (eq (overlay-get o 'org-overlay-type) 'org-latex-overlay))
                               overlays))
                  (image-overlays
                   (cl-find-if (lambda (o) (overlay-get o 'org-image-overlay))
                               overlays)))
             (+org--toggle-inline-images-in-subtree beg end)
             (if (or image-overlays latex-overlays)
                 (org-clear-latex-preview beg end)
               (org--latex-preview-region beg end))
             ))

          (`clock (org-clock-update-time-maybe))

          (`footnote-reference
           (org-footnote-goto-definition (org-element-property :label context)))

          (`footnote-definition
           (org-footnote-goto-previous-reference (org-element-property :label context)))

          ((or `planning `timestamp)
           (org-follow-timestamp-link))

          ((or `table `table-row)
           (if (org-at-TBLFM-p)
               (org-table-calc-current-TBLFM)
             (ignore-errors
               (save-excursion
                 (goto-char (org-element-property :contents-begin context))
                 (org-call-with-arg 'org-table-recalculate (or arg t))))))

          (`table-cell
           (org-table-blank-field)
           (org-table-recalculate arg)
           (when (and (string-empty-p (string-trim (org-table-get-field)))
                      (bound-and-true-p evil-local-mode))
             (evil-change-state 'insert)))

          (`babel-call
           (org-babel-lob-execute-maybe))

          (`statistics-cookie
           (save-excursion (org-update-statistics-cookies arg)))

          ((or `src-block `inline-src-block)
           (org-babel-execute-src-block arg))

          ((or `latex-fragment `latex-environment)
           (org-latex-preview arg))

          (`link
           (let* ((lineage (org-element-lineage context '(link) t))
                  (path (org-element-property :path lineage)))
             (if (or (equal (org-element-property :type lineage) "img")
                     (and path (image-type-from-file-name path)))
                 (+org--toggle-inline-images-in-subtree
                  (org-element-property :begin lineage)
                  (org-element-property :end lineage))
               (org-open-at-point arg))))

          ((guard (org-element-property :checkbox (org-element-lineage context '(item) t)))
           (let ((match (and (org-at-item-checkbox-p) (match-string 1))))
             (org-toggle-checkbox (if (equal match "[ ]") '(16)))))

          (_
           (if (or (org-in-regexp org-ts-regexp-both nil t)
                   (org-in-regexp org-tsr-regexp-both nil  t)
                   (org-in-regexp org-link-any-re nil t))
               (call-interactively #'org-open-at-point)
             (+org--toggle-inline-images-in-subtree
              (org-element-property :begin context)
              (org-element-property :end context))))))))
#+end_src

**** Bind RET to +org/dwim-at-point
This function binds RET to =+org/dwim-at-point= to make RET contextual.

#+begin_src emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'org-mode-map
   "RET" '+org/dwim-at-point)
#+end_src
*** Org links behavior
Got it from: [[https://xenodium.com/emacs-dwim-do-what-i-mean/][Emacs DWIM: do what ✨I✨ mean]]

#+begin_src emacs-lisp
  (defun rr/org-insert-link-dwim ()
    "Like `org-insert-link' but with personal dwim preferences."
    (interactive)
    (let* ((point-in-link (org-in-regexp org-link-any-re 1))
           (clipboard-url (when (string-match-p "^http" (current-kill 0))
                            (current-kill 0)))
           (region-content (when (region-active-p)
                             (buffer-substring-no-properties (region-beginning)
                                                             (region-end)))))
      (cond ((and region-content clipboard-url (not point-in-link))
             (delete-region (region-beginning) (region-end))
             (insert (org-make-link-string clipboard-url region-content)))
            ((and clipboard-url (not point-in-link))
             (insert (org-make-link-string
                      clipboard-url
                      (read-string "title: "
                                   (with-current-buffer (url-retrieve-synchronously clipboard-url)
                                     (dom-text (car
                                                (dom-by-tag (libxml-parse-html-region
                                                             (point-min)
                                                             (point-max))
                                                            'title))))))))
            (t
             (call-interactively 'org-insert-link)))))
#+end_src

*** Org cycle behavior
I really liked Doom style org cycling. It just goes through folded and children modes and doesn't enter subtree. As my note structure grows, there will invariably be lot of nested headings and looking at all the notes at once adds no value. So, just cycling between FOLDED and CHILDREN works perfectly for me. The below code is copied over from Doom's config.
**** Set up function for custom cycling (unused)
Realized the existing =evil-toggle-fold= function does the job for me and also solves the problem of expanding drawers. I'll be disabling this function for now and instead use =evil-toggle-fold= for a while. If it works as expected for all my use cases, I'll delete this section entirely.

#+begin_src emacs-lisp :tangle no
  (defun +org-cycle-only-current-subtree-h (&optional arg)
    "Toggle the local fold at the point, and no deeper.
         `org-cycle's standard behavior is to cycle between three levels: collapsed,
         subtree and whole document. This is slow, especially in larger org buffer. Most
         of the time I just want to peek into the current subtree -- at most, expand
         ,*only* the current subtree.

         All my (performant) foldings needs are met between this and `org-show-subtree'
         (on zO for evil users), and `org-cycle' on shift-TAB if I need it."
    (interactive "P")
    (unless (eq this-command 'org-shifttab)
      (save-excursion
        (org-beginning-of-line)
        (let (invisible-p)
          (when (and (org-at-heading-p)
                     (or org-cycle-open-archived-trees
                         (not (member org-archive-tag (org-get-tags))))
                     (or (not arg)
                         (setq invisible-p (outline-invisible-p (line-end-position)))))
            (unless invisible-p
              (setq org-cycle-subtree-status 'subtree))
            (org-cycle-internal-local)
            t)))))
#+end_src

**** Bind TAB to +org-cycle-only-current-subtree-h

#+begin_src emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'org-mode-map
   "<tab>" 'evil-toggle-fold)
#+end_src

*** Org insert behavior
**** Insert item

#+begin_src emacs-lisp
  (defun +org--insert-item (direction)
    (let ((context (org-element-lineage
                    (org-element-context)
                    '(table table-row headline inlinetask item plain-list)
                    t)))
      (pcase (org-element-type context)
        ;; Add a new list item (carrying over checkboxes if necessary)
        ((or `item `plain-list)
         ;; Position determines where org-insert-todo-heading and org-insert-item
         ;; insert the new list item.
         (if (eq direction 'above)
             (org-beginning-of-item)
           (org-end-of-item)
           (backward-char))
         (org-insert-item (org-element-property :checkbox context))
         ;; Handle edge case where current item is empty and bottom of list is
         ;; flush against a new heading.
         (when (and (eq direction 'below)
                    (eq (org-element-property :contents-begin context)
                        (org-element-property :contents-end context)))
           (org-end-of-item)
           (org-end-of-line)))

        ;; Add a new table row
        ((or `table `table-row)
         (pcase direction
           ('below (save-excursion (org-table-insert-row t))
                   (org-table-next-row))
           ('above (save-excursion (org-shiftmetadown))
                   (+org/table-previous-row))))

        ;; Otherwise, add a new heading, carrying over any todo state, if
        ;; necessary.
        (_
         (let ((level (or (org-current-level) 1)))
           ;; I intentionally avoid `org-insert-heading' and the like because they
           ;; impose unpredictable whitespace rules depending on the cursor
           ;; position. It's simpler to express this command's responsibility at a
           ;; lower level than work around all the quirks in org's API.
           (pcase direction
             (`below
              (let (org-insert-heading-respect-content)
                (goto-char (line-end-position))
                (org-end-of-subtree)
                (insert "\n" (make-string level ?*) " ")))
             (`above
              (org-back-to-heading)
              (insert (make-string level ?*) " ")
              (save-excursion (insert "\n"))))
           (when-let* ((todo-keyword (org-element-property :todo-keyword context))
                       (todo-type    (org-element-property :todo-type context)))
             (org-todo
              (cond ((eq todo-type 'done)
                     ;; Doesn't make sense to create more "DONE" headings
                     (car (+org-get-todo-keywords-for todo-keyword)))
                    (todo-keyword)
                    ('todo)))))))

      (when (org-invisible-p)
        (org-show-hidden-entry))
      (when (and (bound-and-true-p evil-local-mode)
                 (not (evil-emacs-state-p)))
        (evil-insert 1))))
#+end_src

**** Insert item below

#+begin_src emacs-lisp
  (defun +org/insert-item-below (count)
    "Inserts a new heading, table cell or item below the current one."
    (interactive "p")
    (dotimes (_ count) (+org--insert-item 'below)))

  (general-define-key
   :states '(normal insert)
   :keymaps 'org-mode-map
   "<C-return>" '+org/insert-item-below)
#+end_src

**** Insert item above

#+begin_src emacs-lisp
  (defun +org/insert-item-above (count)
    "Inserts a new heading, table cell or item above the current one."
    (interactive "p")
    (dotimes (_ count) (+org--insert-item 'above)))

  (general-define-key
   :states '(normal insert)
   :keymaps 'org-mode-map
   "<C-S-return>" '+org/insert-item-above)
#+end_src

*** Org refile to current file
Copied over from doom emacs. Helps make refiling easier when it must be done within the current file.

#+begin_src emacs-lisp
  (defun +org/refile-to-current-file (arg &optional file)
    "Refile current heading to elsewhere in the current buffer.
  If prefix ARG, copy instead of move."
    (interactive "P")
    (let ((org-refile-targets `((,file :maxlevel . 10)))
          (org-refile-use-outline-path nil)
          (org-refile-keep arg)
          current-prefix-arg)
      (call-interactively #'org-refile)))
#+end_src

*** Org show/hide drawers
This is a custom keybinding to show/hide drawers in org mode

#+begin_src emacs-lisp
  (general-define-key
   :states '(normal)
   :keymaps 'org-mode-map
   :prefix "z"
   "x" 'org-hide-drawer-toggle)
#+end_src

*** Org show next/prev headings tidily
Taken from: https://orgmode.org/worg/org-hacks.html#orge99b7a9

#+begin_src emacs-lisp
  (defun rr/org-show-next-heading-tidily ()
    "Show next entry, keeping other entries closed."
    (interactive)
    (if (save-excursion (end-of-line) (outline-invisible-p))
        (progn (org-show-entry) (show-children))
      (outline-next-heading)
      (unless (and (bolp) (org-on-heading-p))
        (org-up-heading-safe)
        (hide-subtree)
        (error "Boundary reached"))
      (org-overview)
      (org-reveal t)
      (org-show-entry)
      (show-children)))

  (defun rr/org-show-previous-heading-tidily ()
    "Show previous entry, keeping other entries closed."
    (interactive)
    (let ((pos (point)))
      (outline-previous-heading)
      (unless (and (< (point) pos) (bolp) (org-on-heading-p))
        (goto-char pos)
        (hide-subtree)
        (error "Boundary reached"))
      (org-overview)
      (org-reveal t)
      (org-show-entry)
      (show-children)))

  (general-define-key
   :states 'normal
   :keymaps 'org-mode-map
   "C-n" 'rr/org-show-next-heading-tidily
   "C-p" 'rr/org-show-previous-heading-tidily)

#+end_src

*** Org sort list by checkbox type
Taken from: https://orgmode.org/worg/org-hacks.html#org5a09194

#+begin_src emacs-lisp
  (defun rr/org-sort-list-by-checkbox-type ()
    "Sort list items according to Checkbox state."
    (interactive)
    (org-sort-list
     nil ?f
     (lambda ()
       (if (looking-at org-list-full-item-re)
           (cdr (assoc (match-string 3)
                       '(("[X]" . 4) ("[-]" . 3) ("[ ]" . 2) (nil . 1))))
         4))))
#+end_src

*** Use idle timer for automatic agenda views
Taken from: https://orgmode.org/worg/org-hacks.html#orga781053

#+begin_src emacs-lisp :tangle no
    (defun rr/jump-to-org-agenda ()
      (interactive)
      (let ((buf (get-buffer "*Org Agenda*"))
            wind)
        (if buf
            (if (setq wind (get-buffer-window buf))
                (select-window wind)
              (if (called-interactively-p)
                  (progn
                    (select-window (display-buffer buf t t))
                    (org-fit-window-to-buffer)
                    ;; (org-agenda-redo)
                    )
                (with-selected-window (display-buffer buf)
                  (org-fit-window-to-buffer)
                  ;; (org-agenda-redo)
                  )))
          (call-interactively 'org-agenda-list)))
      ;;(let ((buf (get-buffer "*Calendar*")))
      ;;  (unless (get-buffer-window buf)
      ;;    (org-agenda-goto-calendar)))
      )

(run-with-idle-timer 600 t 'rr/jump-to-org-agenda)
#+end_src

*** Mark heading DONE when all checkboxes are checked
Taken from: https://orgmode.org/worg/org-hacks.html#mark-done-when-all-checkboxes-checked

#+begin_src emacs-lisp
(eval-after-load 'org-list
  '(add-hook 'org-checkbox-statistics-hook (function rr/checkbox-list-complete)))

(defun rr/checkbox-list-complete ()
  (save-excursion
    (org-back-to-heading t)
    (let ((beg (point)) end)
      (end-of-line)
      (setq end (point))
      (goto-char beg)
      (if (re-search-forward "\\[\\([0-9]*%\\)\\]\\|\\[\\([0-9]*\\)/\\([0-9]*\\)\\]" end t)
            (if (match-end 1)
                (if (equal (match-string 1) "100%")
                    ;; all done - do the state change
                    (org-todo 'done)
                  (org-todo 'todo))
              (if (and (> (match-end 2) (match-beginning 2))
                       (equal (match-string 2) (match-string 3)))
                  (org-todo 'done)
                (org-todo 'todo)))))))
#+end_src

* Org Roam
Zettelkasten-style note taking
** Basic Setup
Sets up org-roam, roam directory, few useful keybindings.

#+begin_src emacs-lisp
    (use-package org-roam
      :straight t
      :custom
      (org-roam-directory "~/Personal/roam-notes")
      (org-roam-completion-everywhere t)
      :bind (("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ("C-c n i" . org-roam-node-insert)
             ("C-c n I" . org-roam-node-insert-immediate)
             ("C-c n t" . org-roam-tag-add)
             )
      :config
      (org-roam-setup))
#+end_src

** Insert new note immediately
Without opening a new buffer while writing a note.

#+begin_src emacs-lisp
  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (cons arg args))
          (org-roam-capture-templates (list (append (car org-roam-capture-templates) '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))
#+end_src

** Org Roam UI
This gives a really nice UI for your org-roam database. The UI not only shows all the nodes in a graph view, but also the contents of all the notes, the backlinks, filtering and several other customizations. It's great to capture all the notes via org-roam and view them using org-roam-ui.
Package: [[https://github.com/org-roam/org-roam-ui][org-roam-ui]]

#+begin_src emacs-lisp
(use-package org-roam-ui
  :straight
    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

* Blogging
** ox-hugo
This is the emacs package I use to publish to my Hugo website using org files
Package: [[https://github.com/kaushalmodi/ox-hugo][ox-hugo]]

#+begin_src emacs-lisp
  (use-package ox-hugo
    :after ox)
#+end_src

** Turn on org-hugo-auto-export-mode when you visit blog.org
The minor mode =org-hugo-auto-export-mode= enables auto export hugo posts on saving. However, this minor mode is disabled by default. It doesn't make sense to have this turned on globally. So, the following piece of code enables the minor mode only when the buffer is =blog.org=.
Found the code in a [[https://stackoverflow.com/a/39652226][stack overflow post]].

#+begin_src emacs-lisp
  (defun rr/enable-hugo-auto-export-mode ()
    (if (equal (buffer-name) "blog.org")
        (org-hugo-auto-export-mode)))

  (add-hook 'find-file-hook 'rr/enable-hugo-auto-export-mode)
#+end_src
** Generate a filename given a blog post title
This is a nice little helper function I wrote for myself to generate a filename from a blog post's title. ox-hugo needs a property called =EXPORT_FILE_NAME= which must be set under the heading that contains the blog post. This function generates the file name and sets the property based on the org heading the point is on.

#+begin_src emacs-lisp
  (defun rr/extract-hugo-post-file-name ()
    "Create a filename out of blog post's title.

This method is expected to be executed on a TODO heading on a an
org file containing blog posts that would be exported using
ox-hugo. Running this interactive command would set an org
property called EXPORT_FILE_NAME that is required by ox-hugo to
generate a Hugo-friendly markdown file in the location specified
in HUGO_BASE_DIR property."
    (interactive)
    (setq-local blog-post-title (nth 4 (org-heading-components)))
      (let* ((file-name (replace-regexp-in-string "_+" "-" (replace-regexp-in-string "\\W" "_" (string-trim (downcase blog-post-title)))))
             (blog-post-file-name (concat file-name ".md")))
        (org-set-property "EXPORT_FILE_NAME" blog-post-file-name)))
#+end_src

* Work
** Excorporate
*** Setup (unused)
This needs initial setup of work account so that it can access the calendar. This can be done using =M-x excorporate=. More configuration can be found in [[https://emacs.stackexchange.com/a/46022][this stack overflow post]].
Package: [[https://github.com/emacsmirror/excorporate][excorporate]]

#+begin_src emacs-lisp :tangle no
  (use-package excorporate
    :defer t
    :config
    (setq excorporate-diary-today-file
          (concat user-emacs-directory "var/excorporate/diary-excorporate-today")
          excorporate-diary-transient-file
          (concat user-emacs-directory "var/excorporate/diary-excorporate-transient")))
  (excorporate-diary-enable)
#+end_src

*** Show today's meetings
A call to =exco-org-show-day= will display the meetings for what is passed in the arguments (MONTH, DAY, YEAR). This needs some tweaking since there is no function to display meetings for current day. Upon invoking the function, a new read-only org buffer is opened and switched to that contains all the meetings for the current day.

#+begin_src emacs-lisp :tangle no
  (defun rr/show-work-cal-for-current-day ()
    "Show meetings for current day."
    (interactive)
    (exco-org-show-day
     (nth 0 (calendar-current-date))
     (nth 1 (calendar-current-date))
     (nth 2 (calendar-current-date)))
    (other-window 1)
    (sleep-for 1)
    (org-shifttab)
    (evil-toggle-fold))
#+end_src

* Ideas
Some ideas for customizing emacs. I keep thinking about different ways to customize emacs and I'd like to have them all in one place so that whenever I have some time, I can pick one up and work on it.
* Packages I want to try
- [[https://awesomeopensource.com/project/dandavison/magit-delta?mode=desktop&ref_=m_ft_dsk][Magit Delta]]
- Deft
- devdocs
- org-special-block-extras
- fancy-narrow
- package-lint - for linting when you write packages
* Runtime Performance
Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 2 1000 1000))
#+end_src

* Launch Config
I want a certain workspaces and buffers open when emacs launches. The below script helps me with that.

#+begin_src emacs-lisp :tangle no
  (setq org-dir "~/Library/CloudStorage/Dropbox/org-mode/")
  (setq dotfiles-dir "~/dotfiles/")
  (find-file (concat org-dir "organize.org"))
  (persp-switch "work")
  (find-file (concat org-dir "work-tasks.org"))
  ;; (persp-switch "config")
  ;; (find-file (concat dotfiles-dir "kitty/README.org"))
  ;; (persp-switch "blog")
  ;; (find-file (concat org-dir "blog.org"))
  (persp-switch "main")
#+end_src

#+begin_src emacs-lisp :tangle no
(persp-state-load (concat persp-save-dir "persp-auto-save"))
#+end_src
* Pending Customizations
** TODO Custom killring

#+begin_src emacs-lisp :tangle no
  (defun my-delete-word (arg)
    "Delete characters forward until encountering the end of a word.
  With argument, do this that many times.
  This command does not push text to `kill-ring'."
    (interactive "p")
    (delete-region
     (point)
     (progn
       (forward-word arg)
       (point))))

  (defun my-backward-delete-word (arg)
    "Delete characters backward until encountering the beginning of a word.
  With argument, do this that many times.
  This command does not push text to `kill-ring'."
    (interactive "p")
    (my-delete-word (- arg)))

  (defun my-delete-line ()
    "Delete text from current position to end of line char.
  This command does not push text to `kill-ring'."
    (interactive)
    (delete-region
     (point)
     (progn (end-of-line 1) (point)))
    (delete-char 1))

  (defun my-delete-line-backward ()
    "Delete text between the beginning of the line to the cursor position.
  This command does not push text to `kill-ring'."
    (interactive)
    (let (p1 p2)
      (setq p1 (point))
      (beginning-of-line 1)
      (setq p2 (point))
      (delete-region p1 p2)))
#+end_src

** Install packages
*** DONE vterm
CLOSED: [2021-08-30 Mon 20:43]
*** DONE vertico
CLOSED: [2021-08-30 Mon 20:43]
*** DONE lsp
CLOSED: [2021-08-29 Sun 14:28]
*** DONE auto update packages
CLOSED: [2021-08-30 Mon 20:43]
:LOGBOOK:
- State "KILL"       from "TODO"       [2021-08-29 Sun 22:05]
:END:
*** DONE git gutter (or diff-hl-mode)
CLOSED: [2021-09-01 Wed 16:01]
:LOGBOOK:
- State "DONE"       from "TODO"       [2021-09-01 Wed 16:01]
:END:
*** TODO yasnippets
*** TODO Edwina?
* Tips & Tricks
What's described in this section is general (and lesser known) tips on existing features. These require no customization.
** Insert timestamp with current time
=org-time-stamp-inactive= (bound to =SPC o d T=) inserts only the current date by default. But sometimes we need the current time as well, so having a =universal-=argument= (bound to =C-S-u=) as a prefix before running =org-time-stamp-inactive= helps add the current time as well.

So, hitting =C-S-u SPC o d T= inserts a timestamp like [2021-09-03 Fri 09:37]
** Use M-m to go to the first non-whitespace in a line
I'm used to hitting =C-a= to go to the beginning of the line. Some lines are indented and have spaces at the beginning. =M-m= is a nice keybinding to use to get to the first non-whitespace character on any line.
