#+TITLE:      Custom Emacs Configuration
#+AUTHOR:     Rajath Ramakrishna
#+PROPERTY:   header-args:emacs-lisp :tangle ./private-config.el
#+STARTUP:    overview indent hidestars

* Table of Contents
:PROPERTIES:
:TOC:      :include all :ignore this
:END:
:CONTENTS:
- [[#introduction][Introduction]]
  - [[#personal-information][Personal Information]]
  - [[#why-literate-config][Why literate config?]]
- [[#current-issues][Current Issues]]
  - [[#prettierjs-runs-in-the-middle-of-typing-something-in-typescript-mode][PrettierJs runs in the middle of typing something in typescript mode]]
- [[#first-things-first][First things first]]
  - [[#startup-performance][Startup Performance]]
  - [[#frame-management][Frame Management]]
    - [[#detect-display-size][Detect display size]]
    - [[#set-frame-size-and-position][Set frame size and position]]
  - [[#package-management][Package Management]]
  - [[#keep-emacsd-clean][Keep .emacs.d clean]]
  - [[#auto-update-packages][Auto update packages]]
  - [[#basic-setup][Basic Setup]]
    - [[#some-defaults][Some defaults]]
    - [[#tab-widths][Tab widths]]
    - [[#enable-global-subword-mode][Enable Global Subword Mode]]
- [[#ui-configuration][UI Configuration]]
  - [[#get-rid-of-the-startup-message][Get rid of the startup message]]
  - [[#remove-menubar-toolbar-scrollbars-etc][Remove menubar, toolbar, scrollbars, etc.]]
  - [[#make-titlebar-the-same-color-as-background][Make titlebar the same color as background]]
  - [[#set-up-fonts][Set up fonts]]
  - [[#set-up-theme][Set up theme]]
  - [[#show-line-and-column-numbers][Show line and column numbers]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
  - [[#smart-modeline-unused][Smart Modeline (unused)]]
  - [[#highlight-matching-braces][Highlight Matching Braces]]
  - [[#highlight-current-line][Highlight current line]]
  - [[#beacon][Beacon]]
- [[#usability][Usability]]
  - [[#server-mode][Server Mode]]
  - [[#auto-saving-changed-files][Auto-saving changed files]]
  - [[#auto-reverting-changed-files][Auto-reverting changed files]]
  - [[#commenting-lines][Commenting Lines]]
    - [[#basic-setup][Basic setup]]
  - [[#automatically-clean-whitespaces][Automatically clean whitespaces]]
  - [[#smart-parenthesis][Smart Parenthesis]]
  - [[#jumping-around-with-avy][Jumping around with Avy]]
  - [[#eros-mode][Eros Mode]]
  - [[#hungry-delete][Hungry Delete]]
  - [[#go-to-last-change][Go to last change]]
  - [[#revert-buffer-noconfirm][Revert buffer NOCONFIRM]]
  - [[#popper][Popper]]
    - [[#keybindings][Keybindings]]
- [[#keybindings][Keybindings]]
  - [[#make-esc-work-better][Make ESC work better]]
  - [[#switch-buffers-easily][Switch buffers easily]]
  - [[#which-key][Which key]]
  - [[#evil][Evil]]
    - [[#basic-setup][Basic Setup]]
    - [[#custom-keybindings-unused][Custom keybindings (unused)]]
    - [[#speedkeys][Speedkeys]]
  - [[#general][General]]
  - [[#remap-universal-argument][Remap universal argument]]
  - [[#hydra][Hydra]]
    - [[#package-setup][Package Setup]]
    - [[#handle-window-resize][Handle Window Resize]]
- [[#completion-frameworks][Completion Frameworks]]
  - [[#ivy][Ivy]]
  - [[#counsel][Counsel]]
  - [[#vertico-unused][Vertico (unused)]]
  - [[#orderless][Orderless]]
  - [[#prescient][Prescient]]
- [[#utilities][Utilities]]
  - [[#helpful-package-for-better-documentation-formatting][Helpful package for better documentation formatting]]
  - [[#expand-region][Expand Region]]
  - [[#focus-mode][Focus mode]]
  - [[#crux][Crux]]
- [[#dired][Dired]]
- [[#development][Development]]
  - [[#projectile][Projectile]]
  - [[#git-gutter][Git Gutter]]
  - [[#magit][Magit]]
  - [[#terminal][Terminal]]
    - [[#vterm-setup][Vterm setup]]
    - [[#invoke-terminal-in-projects-root-as-popup][Invoke terminal in project's root (as popup)]]
  - [[#languages][Languages]]
    - [[#language-servers][Language Servers]]
    - [[#typescript][TypeScript]]
    - [[#completions-with-company-mode][Completions with Company-mode]]
    - [[#graphql][GraphQL]]
- [[#buffers][Buffers]]
  - [[#perspectives][Perspectives]]
    - [[#basic-setup][Basic Setup]]
    - [[#ibuffer-hook][IBuffer hook]]
    - [[#saving-sessions][Saving Sessions]]
- [[#orgmode][OrgMode]]
  - [[#capture-templates][Capture Templates]]
  - [[#basic-setup][Basic setup]]
  - [[#org-export-git-flavored-markdown][Org Export Git Flavored Markdown]]
  - [[#org-appear][Org Appear]]
  - [[#prettier-bullets][Prettier bullets]]
  - [[#visual-fill-column][Visual Fill Column]]
  - [[#evil-org-mode][Evil-Org-Mode]]
  - [[#agenda-configs][Agenda Configs]]
  - [[#babel-configuration][Babel Configuration]]
    - [[#configure-babel-languages][Configure Babel Languages]]
    - [[#source-language-modes][Source Language Modes]]
    - [[#auto-tangle-configuration-files][Auto-tangle Configuration Files]]
    - [[#use-noweb-yes-to-pull-work-related-configs][Use :noweb yes to pull work related configs]]
  - [[#generate-table-of-contents][Generate Table of Contents]]
  - [[#org-todo-keyword-faces][Org todo keyword faces]]
  - [[#org-behaviors][Org Behaviors]]
    - [[#org-ret-key-behavior][Org RET key behavior]]
      - [[#org-get-todo-keywords-for][Org get todo keywords for]]
      - [[#org-dwim-at-point][Org dwim-at-point]]
      - [[#bind-ret-to-orgdwim-at-point][Bind RET to +org/dwim-at-point]]
    - [[#org-cycle-behavior][Org cycle behavior]]
      - [[#set-up-function-for-custom-cycling-unused][Set up function for custom cycling (unused)]]
      - [[#bind-tab-to-org-cycle-only-current-subtree-h][Bind TAB to +org-cycle-only-current-subtree-h]]
    - [[#org-insert-behavior][Org insert behavior]]
      - [[#insert-item][Insert item]]
      - [[#insert-item-below][Insert item below]]
      - [[#insert-item-above][Insert item above]]
    - [[#org-refile-to-current-file][Org refile to current file]]
- [[#blogging][Blogging]]
  - [[#ox-hugo][ox-hugo]]
  - [[#turn-on-org-hugo-auto-export-mode-when-you-visit-blogorg][Turn on org-hugo-auto-export-mode when you visit blog.org]]
  - [[#generate-a-filename-given-a-blog-post-title][Generate a filename given a blog post title]]
- [[#work][Work]]
  - [[#excorporate][Excorporate]]
    - [[#setup][Setup]]
    - [[#show-todays-meetings][Show today's meetings]]
- [[#ideas][Ideas]]
- [[#packages-i-want-to-try][Packages I want to try]]
- [[#runtime-performance][Runtime Performance]]
- [[#pending-customizations][Pending Customizations]]
  - [[#custom-killring][Custom killring]]
  - [[#install-packages][Install packages]]
    - [[#vterm][vterm]]
    - [[#vertico][vertico]]
    - [[#lsp][lsp]]
    - [[#auto-update-packages][auto update packages]]
    - [[#git-gutter-or-diff-hl-mode][git gutter (or diff-hl-mode)]]
    - [[#yasnippets][yasnippets]]
    - [[#edwina][Edwina?]]
- [[#tips--tricks][Tips & Tricks]]
  - [[#insert-timestamp-with-current-time][Insert timestamp with current time]]
  - [[#use-m-m-to-go-to-the-first-non-whitespace-in-a-line][Use M-m to go to the first non-whitespace in a line]]
:END:

* Introduction
This config is built by copying parts from [[https://github.com/daviwil/dotfiles/blob/master/Emacs.org][System Crafters dotfiles repo]], what I found on the internet (Reddit, Discord, Stack Overflow, etc.) and some of my own config. This configuration is based on the [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] paradigm which makes the config be self-documenting. This means, the file is basically a fully explained documentation of my config and also contains code blocks in between that can be evaluated and tangled into a config file.
** Personal Information
It's useful to set up personal information. Some packages tend to use it.
#+begin_src emacs-lisp
  (setq user-full-name "Rajath Ramakrishna"
        user-mail-address "r.rajath@pm.me")
#+end_src

I've been using Emacs since Aug 2020. I used Spacemacs briefly for about a month and it was slow, clunky and I didn't have a good workflow for editing org files on my phone. I decided to give Emacs another go and used Doom Emacs since it looked prettier and I instantly fell in love with it. I used Doom Emacs for about a year and some time late August 2021 is when I started building my own config.

If this is the first time you are looking at my configuration, feel free to jump around and look at any code blocks. Headings that are marked with =TODO= need some work. They either have configs that are not completely set up or have tangling disabled, or just need some text.
** Why literate config?
Literate config has a few benefits:
- Easy to understand. Thanks to the documentation surrounding the code snippets
- Easy to share. People you share this with need no explanation as to what's in your config, your documentation takes care of that
- Easy to maintain. You never touch the actual config, you only update this .org file and make it generate the actual source file
- Easy to publish. If you want to publish your config online, it's super easy. GitHub, for example, natively supports org the same way it supports Markdown. So, these org files are rendered nicely, just as regular documentation.
* Current Issues
** TODO PrettierJs runs in the middle of typing something in typescript mode
Prettier (and ESLint) should run on save to fix formatting in the code. However, due to some setting (or lack of) it runs while typing code and messes up the cursor position, indentation, formatting, etc. This happens when I type parenthesis. For example, while typing =console.log("prettier runs before I get to type this")=, before I hit ="= prettier runs and messes everything up.
* First things first
** Startup Performance

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun rr/display-startup-time ()
    "Displays startup time in the echo buffer and Messages buffer as
  soon as Emacs loads."
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time (time-subtract after-init-time before-init-time)))
             gcs-done))
  (add-hook 'emacs-startup-hook #'rr/display-startup-time)
#+end_src

** Frame Management
*** Detect display size
I want Emacs to take up full screen if I'm on my laptop and take up half of the right screen if I'm on a bigger monitor. This is not the best way of implementing it, but since I'm still learning and it gets the job done, I'm happy with it for now. I'll come back and optimize this once I learn elisp better.
=1792= in the code block below is the pixel width of my laptop.
=5232= is the pixel width of my monitor.
If =display-pixel-width= is neither of these, then the frame will not be moved or resized.
[[https://emacs.stackexchange.com/questions/16961/how-to-set-emacs-frame-size-by-pixels/17354#17354][A stack overflow post]] has another way to set this; something I want to try in the future.

#+begin_src emacs-lisp
  (setq pixel-width (display-pixel-width))
  (setq pixel-height (display-pixel-height))
  (setq display-mode "")

  (cond
   ((= pixel-width 1792)
    (setq display-mode "laptop"))
   ((= pixel-width 5232)
    (setq display-mode "desktop")))
  (message "Display Mode: %s" display-mode)
#+end_src

*** Set frame size and position
This block of code uses the =display-mode= variable set in the previous section to set the frame size and position accordingly.

#+begin_src emacs-lisp
  (message "Setting frame size and position based on display size")

  (cond
   ((equal display-mode "laptop")
    (add-to-list 'default-frame-alist '(fullscreen . maximized)))
   ((equal display-mode "desktop")
    (progn
      (add-to-list 'default-frame-alist
                   (cons 'left 1720))
      (add-to-list 'default-frame-alist
                   (cons 'width 214))
      (add-to-list 'default-frame-alist
                   (cons 'height 81))
      )))
#+end_src

** Package Management
Adding package sources and setting =use-package-always-ensure= to =t=. This setting will eliminate the need to specify =:ensure t= while running writing =use-package= commands.

#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  ;; Fix an issue accessing the ELPA archive in Termux

  ;; (package-initialize)
  ;; (unless package-archive-contents
  ;;   (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (package-install 'use-package)
  (require 'use-package)

  ;; Uncomment this to get a reading on packages that get loaded at startup
  ;;(setq use-package-verbose t)

  ;; On non-Guix systems, "ensure" packages by default
  (setq use-package-always-ensure t)
  (setq use-package-verbose t)
#+end_src

** Keep .emacs.d clean
This is to avoid emacs from creating temporary files:
Package: [[https://github.com/emacscollective/no-littering][no-littering]]

#+begin_src emacs-lisp
  (use-package no-littering)

  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+end_src

** Auto update packages
Automatically update packages. Nothing more to it.
Package: [[https://github.com/rranelli/auto-package-update.el][auto-package-update]]

#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))
#+end_src

** Basic Setup
*** Some defaults
I want files to move to trash when I delete them in Emacs. I want better undo unlike vim where entire block is considered giant undo step. This settting changes the undo structure into finer steps. I also want to auto save files by default.

#+begin_src emacs-lisp
  (setq-default
   delete-by-moving-to-trash t
   evil-want-fine-undo t
   auto-save-default t)
#+end_src

*** Tab widths
I mostly use typescript and I want to have tab width to 2

#+begin_src emacs-lisp
  (setq-default tab-width 2)
  (setq-default evil-shift-width tab-width)
#+end_src

*** Enable Global Subword Mode
Subword mode is great when you have to deal with camel case (or pascal case) strings. For example, if you have a word like EmacsIsAwesome, you can move between Emacs, Is and Awesome.

#+begin_src emacs-lisp
  (global-subword-mode 1)
#+end_src

* UI Configuration
** Get rid of the startup message
This is to remove the ugly annoying startup message on a white screen that you get when you load emacs (without any custom configs)

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

** Remove menubar, toolbar, scrollbars, etc.
Maximize the goodness

#+begin_src emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 0)
  (menu-bar-mode -1)
#+end_src

** Make titlebar the same color as background
I don't like Mac's default titlebar and I'd rather have the titlebar blend with the background

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
#+end_src

** Set up fonts
This font face will be used everywhere in Emacs, not just in source code

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "JetBrains Mono" :height 125)
#+end_src

** Set up theme
I use the Doom-One theme with a Doom modeline and also use all-the-icons for pretty icons. The following code block sets them up
Packages:
- [[https://github.com/seagle0128/doom-modeline][doom-modeline]]
- [[https://github.com/hlissner/emacs-doom-themes][doom-themes]]
- [[https://github.com/domtronn/all-the-icons.el][all-the-icons]]

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))

  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme
    ;; (doom-themes-neotree-config)
    (doom-themes-org-config))

  (use-package all-the-icons)
#+end_src

** Show line and column numbers
I want to see line numbers and column numbers in most modes execpt a few.

#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  vterm-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Rainbow Delimiters
Lisp stands for Lots of Irritating Superfluous Parentheses. Let's make them colorful at least.
Package: [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Smart Modeline (unused)
Make the mode line pretty
Package: [[https://github.com/Malabarba/smart-mode-line][smart-mode-line]]

#+begin_src emacs-lisp :tangle no
  (use-package smart-mode-line
    :config
    (setq
     sml/theme 'atom-one-dark
     sml/no-confirm-load-theme t
     sml/mode-width 'right
     sml/name-width 60)
    (sml/setup))
#+end_src

** Highlight Matching Braces
This is super helpful, especially in lisp

#+begin_src emacs-lisp
  (use-package paren
    :config
    (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
    (show-paren-mode 1))
#+end_src

** Highlight current line
I want to be able to easily see the line my cursor is currently on

#+begin_src emacs-lisp
  (global-hl-line-mode)
#+end_src

** Beacon
Highlight line temporarily to show where your cursor is.
Disable =beacon= in term-mode.
Package: [[https://github.com/Malabarba/beacon][beacon]]

#+begin_src emacs-lisp
  (use-package beacon
    :config
    (push 'vterm-mode beacon-dont-blink-major-modes)
    :init
    (beacon-mode))
#+end_src

* Usability
** Server Mode
Make this instance of emacs start server so that other client instances can connect to this.

#+begin_src emacs-lisp
  (server-start)
#+end_src

** Auto-saving changed files
This removes the need to hit Save all the time.

#+begin_src emacs-lisp
  (use-package super-save
    :defer 1
    :diminish super-save-mode
    :config
    (super-save-mode +1)
    (setq super-save-auto-save-when-idle t))
#+end_src

** Auto-reverting changed files
This is to make sure regular files are reloaded when they're changed outside Emacs. For example, a file may have changed from another device (via Dropbox). Having the file open already and just going to that buffer will auto revert the file so that there are no overwrites.

#+begin_src emacs-lisp
  ;; Revert Dired and other buffers
  (setq global-auto-revert-non-file-buffers t)

  ;; Revert buffers when the underlying file has changed
  (global-auto-revert-mode 1)
#+end_src

** Commenting Lines
*** Basic setup
Commenting lines is now easy and works across languages.
Package: [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]]

#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :after evil)
#+end_src

*** Comment and Nextline
When I comment a line, I'd like that line to be commented and the cursor to be moved to the next line. This way, I can keep hitting the comment line keybinding repeatedly without having to manually move to the next line. This custom function will help me do that. It is also bound to =s-/=

#+begin_src emacs-lisp
  (defun rr/comment-and-nextline ()
    "Comment the current line and move the point to the next line"
    (interactive)
    (evilnc-comment-or-uncomment-lines 1)
    (evil-next-line))

  (general-define-key
   :states '(normal insert)
   "s-/" 'rr/comment-and-nextline)
#+end_src

** Automatically clean whitespaces
Trim whitespace at the end of the line. This happens when the buffer is saved and is unobtrusive. This means the user is not aware of the trimming that has happened. So, the point is not moved, but when the buffer is reverted this can be seen.
Package: [[https://github.com/lewang/ws-butler][ws-butler]]

#+begin_src emacs-lisp
  (use-package ws-butler
    :hook ((text-mode . ws-butler-mode)
           (prog-mode . ws-butler-mode)))
#+end_src

** Smart Parenthesis
Add closing parenthesis whenever you open parenthesis.
Package: [[https://github.com/Fuco1/smartparens][smartparens]]

#+begin_src emacs-lisp
  (use-package smartparens)
  (smartparens-global-mode)
#+end_src

** Jumping around with Avy
Jump to any character, word or line in the visible region. Keybindings for this are described under Keybindings/General configuration.
Package: [[https://github.com/abo-abo/avy][avy]]

#+begin_src emacs-lisp
  (use-package avy
    :commands (avy-goto-char avy-goto-word-0 avy-goto-line))
#+end_src

** Eros Mode
While evaluating elisp expressions in a buffer, the eval results will be displayed as an overlay next to the expression instead of the echo area
Package: [[https://github.com/xiongtx/eros][eros]]

#+begin_src emacs-lisp
  (use-package eros)
  (eros-mode 1)
#+end_src

** Hungry Delete
If there are multiple consecutive whitespaces, I don't want to repeatedly hit delete to remove all the whitespaces. Instead, I just want to hit it once.
Package: [[https://github.com/nflath/hungry-delete][hungry-delete]]

#+begin_src emacs-lisp
  (use-package hungry-delete
    :defer 2)
  (global-hungry-delete-mode)
#+end_src

** Go to last change
As I make edits in different parts of the file, I want to go to last change and by default emacs gives the ability to do this only by explicitly setting a mark and then jumping to that mark. This is too tedious. This package takes care of going to last change with the keybinding =g ;=
Package: [[https://github.com/camdez/goto-last-change.el][goto-last-change]]

#+begin_src emacs-lisp
  (use-package goto-last-change)
#+end_src

** Revert buffer NOCONFIRM
I keep having to revert buffer for different reasons and when I hit the command, it asks me for confirmation. I don't want to say =yes= every single time.

#+begin_src emacs-lisp
  (defun rr/revert-buffer-no-confirm ()
    "Revert the buffer, but don't ask for confirmation"
    (interactive)
    (revert-buffer nil t nil))
#+end_src
** Popper
Manage pop up windows with ease. Make specific major modes open as popups.
Package: [[https://github.com/karthink/popper][popper]]

#+begin_src emacs-lisp
  (use-package popper
    :after projectile
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "^\\*Warnings\\*"
            "^\\*IBuffer\\*"
            "^\\*Compile-Log\\*"
            "^\\*Backtrace\\*"
            "[Oo]utput\\*$"
            "\\*Help\\*"
            "\\*helpful\\*"
            "\\*vterm\\*"
            "\\*Excorporate\\*"
            "\\*xref\\*"
            help-mode
            helpful-mode
            compilation-mode
            term-mode
            vterm-mode)
          popper-group-function #'popper-group-by-projectile)
    (popper-mode +1))
#+end_src

*** Keybindings

#+begin_src emacs-lisp
  (general-define-key
   :keymaps 'normal
   "C-;" 'popper-toggle-latest
   "C-:" 'popper-cycle)
#+end_src

* Keybindings
** Make ESC work better
Making =ESC= work like how it works in other programs - cancelling the operation

#+begin_src emacs-lisp
  ;; Making ESC key work like an ESC key by exiting/canceling stuff
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Switch buffers easily
=counsel-switch-buffer= lets you preview buffers as you scroll through them. It is not set to the keybinding =C-M-j= for easy access. Also, these buffers are aggregated across workspaces (or perspectives).

#+begin_src emacs-lisp
  (global-set-key (kbd "C-M-j") 'counsel-switch-buffer)
#+end_src

** Which key
This package shows up a mini help section kinda thing at the bottom that tells what commands are available for a given prefix. Great way to learn new commands and keybindings.
Package: [[https://github.com/justbur/emacs-which-key][emacs-which-key]]

#+begin_src emacs-lisp
  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.3))
#+end_src

** Evil
*** Basic Setup
This turns on evil mode with some specific customizations (that are self explanatory).
Package: [[https://github.com/emacs-evil/evil][Evil]]

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-model 'normal))

  (evil-mode 1)

  ;; Evil Collection for predictable Vim keybindings in a lot of modes
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

*** Custom keybindings (unused)
Deleting words or lines make the deleted text end up in kill ring. This prevents me from pasting what I initially had in the clipboard. The following functions rewrite delete-word and delete-line functionalities without adding them to the kill-ring.
Currently, this is disabled. Will enable it once it's thoroughly tested.

#+begin_src emacs-lisp :tangle no
  (defun rr/delete-word (arg)
    (interactive "p")
    (delete-region
     (point)
     (progn
       (forward-word arg)
       (point))))

  (general-define-key
   :states 'normal
   "C-;" 'my-delete-word)
#+end_src
*** Speedkeys
Spacemacs has a cool feature where if you're on an org-mode heading and you press =t=, it invokes =org-todo= and you can quickly set the state of the heading to one of the many todo states. The following code is implementing that feature.

#+begin_src emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'org-mode-map
   "t" 'org-todo)
#+end_src

** General
General is a great package for adding custom keybindings not just globally, but for very specific modes (like org-mode-map, evil-mode-map, etc.). The following configuration is for global keybinding with =SPC= as the leader key.
Package: [[https://github.com/noctuid/general.el][General]]

#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup t))

  (general-define-key
   :states 'normal
   :keymaps 'override
   :prefix "SPC"
   "SPC" '(counsel-M-x :which-key "M-x")
   "X"   '(org-capture :which-key "org-capture")
   "`"   '(evil-switch-to-windows-last-buffer :which-key "last window")
   "RET" '(counsel-bookmark :which-key "bookmarks")
   "t"   '(vterm-toggle :which-key "vterm-popup")
   ;; commands
   "e"   '(:ignore t :which-key "eval")
   "e e" '(eros-eval-last-sexp :which-key "eros-eval-last-sexp")
   "e r" '(eval-region :which-key "eval-region")
   "e b" '(eval-buffer :which-key "eval-buffer")
   ;; buffer management
   "b"   '(:ignore t :which-key "buffers")
   "b i" '(ibuffer :which-key "ibuffer")
   "b r" '(rr/revert-buffer-no-confirm :which-key "rr/revert-buffer-no-confirm")
   "b R" '(revert-buffer :which-key "revert-buffer")
   "b k" '(kill-buffer :which-key "kill-buffer")
   ;; perspectives
   "s"   '(:ignore t :which-key "perspectives")
   "s b" '(persp-switch-to-buffer* :which-key "switch-to-buffer")
   "s k" '(persp-kill-buffer :which-key "kill-buffer")
   "s a" '(persp-add-buffer :which-key "add-buffer")
   "s A" '(persp-set-buffer :which-key "set-buffer")
   "s s" '(persp-switch :which-key "persp-switch")
   "s r" '(persp-rename :which-key "persp-rename")
   "s k" '(persp-kill :which-key "persp-kill")
   ;; dired
   "d"   '(:ignore t :which-key "dired")
   "d j" '(dired-jump :which-key "dired-jump")
   "d J" '(dired-jump-other-window :which-key "dired-jump-other-window")
   "d d" '(dired :which-key "dired")
   "d n" '(dired-create-empty-file :which-key "dired-create-empty-file")
   ;; window management
   "w"   '(:ignore t :which-key "window")
   "w v" '(split-window-right :which-key "split window right")
   "w h" '(split-window-below :which-key "split window below")
   "w c" '(delete-window :which-key "delete-window")
   "w w" '(next-window-any-frame :which-key "next window")
   ;; help for variables, functions, keybindings, etc.
   "h"   '(:ignore t :which-key "help")
   "h a" '(counsel-apropos :which-key "apropos")
   "h v" '(counsel-describe-variable :which-key "variable")
   "h f" '(counsel-describe-function :which-key "function")
   "h k" '(helpful-key :which-key "key")
   "h i" '(info :which-key "info")
   "h c" '(describe-key-briefly :which-key "describy-key-briefly")
   ;; jump with avy
   "j"   '(:ignore t :which-key "jump")
   "j j" '(avy-goto-char :which-key "avy-goto-char")
   "j w" '(avy-goto-word-1 :which-key "avy-goto-word-1")
   "j l" '(avy-goto-line :which-key "avy-goto-line")
   ;; magit status
   "g"   '(:ignore t :which-key "magit")
   "g g" '(magit-status :which-key "magit status")
   ;; org-mode
   "o"   '(:ignore t :which-key "org-mode")
   ;; org-mode
   "o a" '(org-agenda :which-key "org-agenda")
   "o e" '(org-export-dispatch :which-key "org-export-dispatch")
   "o t" '(org-todo :which-key "org-todo")
   "o x" '(org-toggle-checkbox :which-key "org-toggle-checkbox")
   "o h" '(org-toggle-heading :which-key "heading")
   "o i" '(org-toggle-item :which-key "item")
   "o o" '(counsel-outline :which-key "counsel-outline")
   "o S" '(org-show-todo-tree :which-key "org-show-todo-tree")
   "o q" '(org-set-tags-command :which-key "org-set-tags-command")
   ;; org-mode / narrow
   "o n" '(:ignore t :which-key "narrow")
   "o n s" '(org-narrow-to-subtree :which-key "org-narrow-to-subtree")
   "o n b" '(org-narrow-to-block :which-key "org-narrow-to-block")
   "o n e" '(org-narrow-to-element :which-key "org-narrow-to-element")
   "o n r" '(org-narrow-to-region :which-key "org-narrow-to-region")
   "o n w" '(widen :which-key "widen")
   ;; org-mode / refile
   "o r" '(:ignore t :which-key "refile")
   "o r r" '(org-refile :which-key "org-refile")
   "o r ." '(+org/refile-to-current-file :which-key "+org/refile-to-current-file")
   "o r A" '(org-archive-subtree :which-key "org-archive-subtree")
   ;; org-mode / date
   "o d" '(:ignore t :which-key "date/deadline")
   "o d s" '(org-schedule :which-key "org-schedule")
   "o d d" '(org-deadline :which-key "org-deadline")
   "o d t" '(org-time-stamp :which-key "org-time-stamp")
   "o d T" '(org-time-stamp-inactive :which-key "org-time-stamp-inactive")
   ;; org-mode / links
   "o l" '(:ignore t :which-key "links")
   "o l l" '(org-insert-link :which-key "org-insert-link")
   ;; projectile
   "p"   '(:ignore t :which-key "projectile")
   "p f" '(projectile-find-file :which-key "projectile-find-file")
   "p /" '(counsel-projectile-rg :which-key "counsel-projectile-rg")
   "p r" '(projectile-recentf :which-key "projectile-recentf")
   "p s" '(counsel-projectile-switch-project :which-key "projectile-switch-project")
   "p t" '(rr/projectile-run-vterm :which-key "rr/projectile-run-vterm")
   "p k" '(projectile-kill-buffers :which-key "projectile-kill-buffers")
   ;; files
   "f"   '(:ignore t :which-key "files")
   "f f" '(counsel-find-file :which-key "find file")
   "f r" '(counsel-recentf :which-key "recent files"))

  (general-define-key
   :states '(normal insert)
   "C-e" 'evil-org-end-of-line
   "C-a" 'evil-org-beginning-of-line
   "C-n" 'evil-next-line
   "C-p" 'evil-previous-line
   "C-S-o" 'evil-jump-forward
   "C-o" 'evil-jump-backward)

  (general-define-key
   :keymaps '(normal insert)
   "s-]" 'persp-next
   "s-[" 'persp-prev)
#+end_src

** Remap universal argument
Default keybinding for =prefix-argument= is =C-u=, but since this is now mapped to scrolling up half a page, it needs a new keybinding. The following code block remaps it to =C-S-u=.

#+begin_src emacs-lisp
  (general-define-key
   :states 'normal
   "C-S-u" 'universal-argument)
#+end_src

** Hydra
*** Package Setup
With a prefix set, Hydra helps you run similar commands in succession without having to run them with the prefix each time. For example, resizing windows or text scaling become much easier with this.
Package: [[https://github.com/abo-abo/hydra][Hydra]]

#+begin_src emacs-lisp
  (use-package hydra
    :defer t)
#+end_src

*** Handle Window Resize
This keybinding is to easily resize windows - horizontal or vertical

#+begin_src emacs-lisp
  (defhydra hydra-window-resize (global-map "C->")
    "resize"
    ("l" enlarge-window-horizontally "enlarge-horizontal")
    ("h" shrink-window-horizontally "shrink-horizontal")
    ("j" enlarge-window "enlarge-vertical")
    ("k" shrink-window "shrink-vertical"))
#+end_src

* Completion Frameworks
** Ivy
Great completion framework. Ivy-rich mode gives more information on each line
Packages:
- [[https://github.com/abo-abo/swiper#ivy][ivy]]
- [[https://github.com/Yevgnen/ivy-rich][ivy-rich]]

#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-f" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :init
    (ivy-mode 1)
    :config
    (setq ivy-wrap t))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))
#+end_src

** Counsel
Package: [[https://github.com/abo-abo/swiper#counsel][Counsel]]

#+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil)
    (counsel-mode 1))

  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
#+end_src

** Vertico (unused)

#+begin_src emacs-lisp :tangle no
  (use-package vertico
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

  (use-package savehist
    :init
    (savehist-mode))

  (use-package marginalia
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+end_src

** Orderless
Package: [[https://github.com/oantolin/orderless][orderless]]

#+begin_src emacs-lisp
  (use-package orderless
    :after counsel
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src

** Prescient
Package: [[https://github.com/raxod502/prescient.el][prescient]]

#+begin_src emacs-lisp
  (use-package prescient
    :after counsel
    :config
    (prescient-persist-mode 1))

  (use-package ivy-prescient
    :after prescient
    :config
    (ivy-prescient-mode 1)
    (prescient-persist-mode 1))

  (setq ivy-prescient-retain-classic-highlighting t)

  (use-package company-prescient
    :after company
    :config
    (company-prescient-mode 1))
#+end_src

* Utilities
** Helpful package for better documentation formatting
This gives better links and formatting inside emacs documentation. This is particularly helpful while looking up documentation for functions, variables, etc.
I have remapped existing describe function to the =helpful= versions so that I don't have to specifically invoke =helpful= commands.
Package: [[https://github.com/Wilfred/helpful][helpful]]

#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key helpful-function)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

** Expand Region
This is to mark/select regions that are nested. With repeated invocations of these commands, the selections expand outward level by level.
Package: [[https://github.com/magnars/expand-region.el][expand-region.el]]

#+begin_src emacs-lisp
  (use-package expand-region
    :bind (("M-[" . er/expand-region)
           ("C-(" . er/mark-outside-pairs)))
#+end_src

** Focus mode
This will highlight the current region and fade the region surrounding the point. It depends on =thing-at-point=, so what's highlight could be a word, a sentence, a code block, a paragraph, etc.
Package: [[https://github.com/larstvei/Focus][focus]]

#+begin_src emacs-lisp
  (use-package focus
    :defer 2)
#+end_src

** Crux
Collection of Really Useful eXtensions
Package: [[https://github.com/bbatsov/crux][crux]]

#+begin_src emacs-lisp
  (use-package crux
    :defer 2)
#+end_src

* Dired
File management with dired

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :config
    (setq ;;dired-listing-switches "-agho --group-directories-first"
     dired-omit-files "^\\.[^.].*"
     dired-omit-verbose nil
     dired-hide-details-hide-symlink-targets nil
     delete-by-moving-to-trash t)

    (autoload 'dired-omit-mode "dired-x")

    (add-hook 'dired-load-hook
              (lambda ()
                (interactive)
                (dired-collapse)))

    (add-hook 'dired-mode-hook
              (lambda ()
                (interactive)
                (dired-omit-mode 1)
                (hl-line-mode 1)
                (diredfl-mode 1)
                (diff-hl-dired-mode 1)))

    (use-package dired-single
      :defer t)

    (use-package dired-ranger
      :defer t)

    (use-package dired-collapse
      :defer t)

    (use-package diredfl
      :defer t)

    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer
      "H" 'dired-omit-mode))
#+end_src

* Development
** Projectile
This is great for managing projects. It is good at finding project roots and provides many other functions.
Package: [[https://github.com/bbatsov/projectile][projectile]]

#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :init
    (when (file-directory-p "~/code")
      (setq projectile-project-search-path '("~/code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

  (general-define-key
   :states 'normal
   :prefix "C-c"
   "p" 'projectile-command-map)
#+end_src

** Git Gutter
Highlight addition, changes or deletion of lines on the left margin of each file that's inside a git repository. This helps in quickly identifying the changes in a file.
Package: [[https://github.com/dgutov/diff-hl][diff-hl]]

#+begin_src emacs-lisp
  (use-package diff-hl)
  (global-diff-hl-mode)
  (diff-hl-flydiff-mode 1)
  (diff-hl-dired-mode 1)
  (diff-hl-margin-mode 1)
#+end_src

** Magit
The best git client ever!
Package: [[https://magit.vc/][magit]]

#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

** Terminal
*** Vterm setup
Terminal emulation in emacs. This is the closest terminal emulation that Emacs can give that resembles what you see in, say, iTerm. Vterm Toggle is great for bringing up the terminal in any buffer as a popup from the bottom and dismissing it when it's not needed.
Packages:
- [[https://github.com/akermu/emacs-libvterm][vterm]]
- [[https://github.com/jixiuf/vterm-toggle][vterm-toggle]]

#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm)
  (use-package vterm-toggle
    :commands vterm-toggle)
#+end_src

*** Invoke terminal in project's root (as popup)
Projectile's function to invoke terminal in project root only opens it in full screen mode. This is a modification to that function that opens vterm as a popup.

#+begin_src emacs-lisp
  (defun rr/projectile-run-vterm ()
    "Invoke `vterm' in the project's root."

    (interactive)
    (cond ((and
            (equal nil (projectile-project-root))
            (equal t (projectile-mode)))
           (vterm-toggle))
          (t (projectile-with-default-dir (projectile-acquire-root)
               (vterm-toggle)))))
#+end_src

** Languages
*** Language Servers
This sets up language server configuration with some pretty cool defaults.
Make sure to run =lsp-install-server es-lint= to enable eslint configuration.
Packages:
- [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]]
- [[https://github.com/emacs-lsp/lsp-ui][lsp-ui]]
- [[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]]
- [[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]]
- [[https://github.com/jscheid/prettier.el][prettier]]

#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook ((typescript-mode js2-mode web-mode) . lsp)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (setq lsp-ui-sideline-show-code-actions t)
    (lsp-enable-which-key-integration t)
    :custom
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (setq lsp-restart 'auto-restart)
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (setq lsp-ui-doc-position 'bottom))

  (use-package lsp-treemacs
    :after lsp)

  (use-package lsp-ivy
    :after lsp)

  ;; (use-package flycheck
  ;;   :defer t
  ;;   :hook (lsp-mode . flycheck-mode))

  (general-define-key
   :keymaps 'lsp-mode-map
   :prefix "C-c l"
   "a f" 'lsp-eslint-apply-all-fixes)
#+end_src

*** TypeScript
This sets up typescript mode with defaults for eslint.
Package: [[https://github.com/emacs-typescript/typescript.el][typescript]]

#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :config
    (setq typescript-indent-level 2
          lsp-eslint-auto-fix-on-save t))

  (defun rr/set-js-indentation ()
    "Set javascript indentation to 2"
    (setq js-indent-level 2)
    (setq evil-shift-width js-indent-level)
    (setq-default tab-width 2))

  (use-package js2-mode
    :mode "\\.jsx?\\'"
    :config
    ;; Use js2-mode for Node scripts
    (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode)))

  (add-hook 'js2-mode-hook #'rr/set-js-indentation)
  (add-hook 'json-mode-hook #'rr/set-js-indentation)

  (use-package prettier-js
    :hook ((js2-mode . prettier-js-mode)
           (typescript-mode . prettier-js-mode))
    :config
    (setq prettier-js-show-errors 'echo))
#+end_src

*** Completions with Company-mode
This is necessary for relevant code completions
Package: [[http://company-mode.github.io/][company-mode]]

#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src
*** GraphQL
This is to get syntax highlighting and indentation support for graphql files.
Package: [[https://github.com/davazp/graphql-mode][graphql-mode]]

#+begin_src emacs-lisp
  (use-package graphql-mode
    :defer t)
#+end_src

* Buffers
** Perspectives
*** Basic Setup
This provides multiple "workspaces" for better management of buffers.
Package: [[https://github.com/nex3/perspective-el][perspective.el]]

#+begin_src emacs-lisp
  (use-package perspective
    :bind (("C-x k" . persp-kill-buffer*))
    :custom
    (persp-initial-frame-name "main")
    (persp-sort 'created)
    :init
    (persp-mode))
#+end_src

*** IBuffer hook
This is to display buffers under their respective perspectives

#+begin_src emacs-lisp
  (add-hook 'ibuffer-hook
            (lambda ()
              (persp-ibuffer-set-filter-groups)
              (unless (eq ibuffer-sorting-mode 'alphabetic)
                (ibuffer-do-sort-by-alphabetic))))
#+end_src

*** Saving Sessions
Set the directory for auto saving persp sessions

#+begin_src emacs-lisp
  (setq persp-state-default-file (concat user-emacs-directory "var/persp-auto-save"))
  (add-hook 'kill-emacs-hook #'persp-state-save)
#+end_src

* OrgMode
** Capture Templates

#+begin_src emacs-lisp
  (defun rr/set-org-capture-templates ()
    `(("o" "Organize")
      ("ot" "Task" entry (file+olp, (rr/org-path "organize.org") "Tasks")
       "* TODO %?\n%U\n %i" :kill-buffer t)
      ("oe" "Event" entry (file+olp, (rr/org-path "organize.org") "Events")
       "* TODO %?\n%U\n %i")
      ("w" "Work")
      ("wt" "Work Task" entry (file+olp, (rr/org-path "work-tasks.org") "All Tasks")
       "* TODO %?\n%U\n %i" :kill-buffer t)
      ("wi" "Work Inbox" entry (file+olp, (rr/org-path "work-tasks.org") "Inbox")
       "* %?\n%U\n %i")
      ("wm" "Work Meeting" entry (file+headline, (rr/org-path "work-tasks.org") "Meeting Notes")
       "* %?\n%U\n %i")
      ("j" "Journal" entry (file+datetree, (rr/org-path "journal.org"))
       "* %?\n")
      ("n" "Notes")
      ("nr" "Resource" entry (file+olp, (rr/org-path "refile.org") "Resources")
       "* %?\n%U\n %i")
      ("nc" "Curiosity" entry (file+olp, (rr/org-path "refile.org") "Curiosities")
       "* %?\n%U\n %i")
      ("no" "Other" entry (file+olp, (rr/org-path "refile.org") "Notes")
       "* %?\n%U\n %i")
      )
    )
#+end_src

** Basic setup

#+begin_src emacs-lisp
  (defun rr/org-path (path)
    (expand-file-name path org-directory))

  (defun rr/org-mode-setup ()
    (org-indent-mode)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (setq org-directory "~/Dropbox/org-mode/")
    (setq org-agenda-files (list org-directory))
    (setq org-capture-templates (rr/set-org-capture-templates))
    (setq org-todo-keywords
          '((sequence "TODO(t)" "STRT(s)" "WAIT(w)" "HOLD(h)" "IDEA(i)" "|" "DONE(d!)" "KILL(k!)")
            ))
    (setq evil-auto-indent nil))

  (use-package org
    :hook (org-mode . rr/org-mode-setup)
    :commands (org-capture org-agenda)
    :config
    (setq org-ellipsis " ▾"
          org-hide-emphasis-markers t
          org-log-done 'time
          org-log-into-drawer t
          org-agenda-start-with-log-mode t
          org-agenda-skip-scheduled-if-done t
          org-agenda-skip-deadline-if-done t
          org-agenda-include-deadlines t
          org-agenda-block-separator nil
          org-agenda-tags-column 100
          org-agenda-compact-blocks t
          org-agenda-include-diary t
          org-catch-invisible-edits t
          org-fontify-whole-heading-line t
          org-refile-targets
          '((nil :maxlevel . 3)
            (org-agenda-files :maxlevel . 3)))

    (advice-add 'org-refile :after 'org-save-all-org-buffers))

  (require 'org-indent)
#+end_src

** Org Export Git Flavored Markdown
Export buffers/subtrees to git flavored markdown
Package: [[https://github.com/larstvei/ox-gfm][ox-gfm]]

#+begin_src emacs-lisp
  (use-package ox-gfm
    :after org)
#+end_src

** Org Appear
This is to make emphasis markers like bold or italics show up when cursor is on the words that contain said markers.
Package: [[https://github.com/awth13/org-appear][org-appear]]

#+begin_src emacs-lisp
  (use-package org-appear)
  (add-hook 'org-mode-hook 'org-appear-mode)
#+end_src

** Prettier bullets
Package: [[https://github.com/sabof/org-bullets][org-bullets]]

#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Visual Fill Column
Make the fill column 100 characters long and enable visual-line-mode in it.
Package: [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]]

#+begin_src emacs-lisp
  (defun rr/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . rr/org-mode-visual-fill))
#+end_src

** Evil-Org-Mode
Package: [[https://github.com/Somelauw/evil-org-mode][evil-org-mode]]

#+begin_src emacs-lisp
  (use-package evil-org
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

** TODO Agenda Configs
This needs a lot more work, but this is a good start

#+begin_src emacs-lisp
  (setq org-agenda-span 'day)

  (setq org-agenda-custom-commands
        `(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (tags-todo "+PRIORITY=\"A\""
                       ((org-agenda-overriding-header "High Priority")))
            (todo "STRT"
                  ((org-agenda-overriding-header "In Progress")
                   (org-agenda-max-todos nil)))
            (todo "TODO"
                  ((org-agenda-overriding-header "Unprocessed Inbox Tasks")))))
          ("w" "Work Tasks"
           ((agenda "" ((org-deadline-warning-days 7)))
            (tags-todo "+work-meeting"
                       ((org-agenda-overriding-header "Work Tasks")))
            ))
          ))
#+end_src

** Babel Configuration
*** Configure Babel Languages

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t))))

  (setq org-confirm-babel-evaluate nil)

  (with-eval-after-load 'org
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")))
#+end_src

*** Source Language Modes
This is for emacs to recognize and provide syntax highlighting for config files that have a similar format in unix based systems (key-value pairs)

#+begin_src emacs-lisp
  ;; This may not be needed
  (push '("conf-unix" . conf-unix) org-src-lang-modes)
#+end_src

*** Auto-tangle Configuration Files

#+begin_src emacs-lisp
  ;; Automatically tangle PrivateConfig.org config file when we save it
  (defun rr/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/dotfiles/.emacs.d/PrivateConfig.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'rr/org-babel-tangle-config)))
#+end_src

*** TODO Use =:noweb yes= to pull work related configs
The way this should work is, if this config is installed on a personal machine, it should tangle all the blocks. However, if it's installed on a work machine, it should look for specific org files (that can tangle themselves) and bring it in here. Or it could be the reverse - look for a specific location to see if it contains org files. If so,

Use [[https://youtu.be/kkqVTDbfYp4?t=2400][System Crafters Emacs From Scratch]] as an example for this.
** Generate Table of Contents
It's nice to generate table of contents at the top of the org file for easy navigation.
Package: [[https://github.com/alphapapa/org-make-toc][org-make-toc]]

#+begin_src emacs-lisp
  (use-package org-make-toc
    :after org)

  (defun rr/enable-org-make-toc-mode ()
    (if (equal (buffer-name) "PrivateConfig.org")
        (org-make-toc-mode)))

  (add-hook 'find-file-hook 'rr/enable-org-make-toc-mode)
#+end_src

** Org todo keyword faces

#+begin_src emacs-lisp
  (setq org-todo-keyword-faces
        '(("WAIT" . (:foreground "#e6bf85" :weight bold))
          ("TODO" . (:foreground "#a0bc70" :weight bold))
          ("STRT" . (:foreground "#a7a2dc" :weight bold))
          ("HOLD" . (:foreground "#e6bf85" :weight bold))
          ("IDEA" . (:foreground "#fdac37" :weight bold))
          ("DONE" . (:foreground "#5c6267" :weight bold))
          ("KILL" . (:foreground "#ee7570" :weight bold))))
#+end_src

** Org Behaviors
*** Org RET key behavior
RET can be used in variety of places - toggling TODO items, toggling checkboxes, opening links, etc. The following fuctions are copied over from Doom and help make RET more intuitive in org-mode.
**** Org get todo keywords for
This function is called by +org/dwim-at-point

#+begin_src emacs-lisp
  (defun +org-get-todo-keywords-for (&optional keyword)
    "Returns the list of todo keywords that KEYWORD belongs to."
    (when keyword
      (cl-loop for (type . keyword-spec)
               in (cl-remove-if-not #'listp org-todo-keywords)
               for keywords =
               (mapcar (lambda (x) (if (string-match "^\\([^(]+\\)(" x)
                                       (match-string 1 x)
                                     x))
                       keyword-spec)
               if (eq type 'sequence)
               if (member keyword keywords)
               return keywords)))
#+end_src

**** Org dwim-at-point
This is copied over from Doom Emacs. This function basically interprets RET as one of several things based on the context. On a checkbox, it toggles the checkbox, on a TODO heading it toggles that, on a link it opens the link in a browser, etc. Makes everything very intuitive.

#+begin_src emacs-lisp
  (defun +org/dwim-at-point (&optional arg)
    "Do-what-I-mean at point.

  If on a:
  - checkbox list item or todo heading: toggle it.
  - clock: update its time.
  - headline: cycle ARCHIVE subtrees, toggle latex fragments and inline images in
    subtree; update statistics cookies/checkboxes and ToCs.
  - footnote reference: jump to the footnote's definition
  - footnote definition: jump to the first reference of this footnote
  - table-row or a TBLFM: recalculate the table's formulas
  - table-cell: clear it and go into insert mode. If this is a formula cell,
    recaluclate it instead.
  - babel-call: execute the source block
  - statistics-cookie: update it.
  - latex fragment: toggle it.
  - link: follow it
  - otherwise, refresh all inline images in current tree."
    (interactive "P")
    (if (button-at (point))
        (call-interactively #'push-button)
      (let* ((context (org-element-context))
             (type (org-element-type context)))
        ;; skip over unimportant contexts
        (while (and context (memq type '(verbatim code bold italic underline strike-through subscript superscript)))
          (setq context (org-element-property :parent context)
                type (org-element-type context)))
        (pcase type
          (`headline
           (cond ((memq (bound-and-true-p org-goto-map)
                        (current-active-maps))
                  (org-goto-ret))
                 ((and (fboundp 'toc-org-insert-toc)
                       (member "TOC" (org-get-tags)))
                  (toc-org-insert-toc)
                  (message "Updating table of contents"))
                 ((string= "ARCHIVE" (car-safe (org-get-tags)))
                  (org-force-cycle-archived))
                 ((or (org-element-property :todo-type context)
                      (org-element-property :scheduled context))
                  (org-todo
                   (if (eq (org-element-property :todo-type context) 'done)
                       (or (car (+org-get-todo-keywords-for (org-element-property :todo-keyword context)))
                           'todo)
                     'done))))
           ;; Update any metadata or inline previews in this subtree
           (org-update-checkbox-count)
           (org-update-parent-todo-statistics)
           (when (and (fboundp 'toc-org-insert-toc)
                      (member "TOC" (org-get-tags)))
             (toc-org-insert-toc)
             (message "Updating table of contents"))
           (let* ((beg (if (org-before-first-heading-p)
                           (line-beginning-position)
                         (save-excursion (org-back-to-heading) (point))))
                  (end (if (org-before-first-heading-p)
                           (line-end-position)
                         (save-excursion (org-end-of-subtree) (point))))
                  (overlays (ignore-errors (overlays-in beg end)))
                  (latex-overlays
                   (cl-find-if (lambda (o) (eq (overlay-get o 'org-overlay-type) 'org-latex-overlay))
                               overlays))
                  (image-overlays
                   (cl-find-if (lambda (o) (overlay-get o 'org-image-overlay))
                               overlays)))
             (+org--toggle-inline-images-in-subtree beg end)
             (if (or image-overlays latex-overlays)
               (org-clear-latex-preview beg end)
             (org--latex-preview-region beg end))
             ))

          (`clock (org-clock-update-time-maybe))

          (`footnote-reference
           (org-footnote-goto-definition (org-element-property :label context)))

          (`footnote-definition
           (org-footnote-goto-previous-reference (org-element-property :label context)))

          ((or `planning `timestamp)
           (org-follow-timestamp-link))

          ((or `table `table-row)
           (if (org-at-TBLFM-p)
               (org-table-calc-current-TBLFM)
             (ignore-errors
               (save-excursion
                 (goto-char (org-element-property :contents-begin context))
                 (org-call-with-arg 'org-table-recalculate (or arg t))))))

          (`table-cell
           (org-table-blank-field)
           (org-table-recalculate arg)
           (when (and (string-empty-p (string-trim (org-table-get-field)))
                      (bound-and-true-p evil-local-mode))
             (evil-change-state 'insert)))

          (`babel-call
           (org-babel-lob-execute-maybe))

          (`statistics-cookie
           (save-excursion (org-update-statistics-cookies arg)))

          ((or `src-block `inline-src-block)
           (org-babel-execute-src-block arg))

          ((or `latex-fragment `latex-environment)
           (org-latex-preview arg))

          (`link
           (let* ((lineage (org-element-lineage context '(link) t))
                  (path (org-element-property :path lineage)))
             (if (or (equal (org-element-property :type lineage) "img")
                     (and path (image-type-from-file-name path)))
                 (+org--toggle-inline-images-in-subtree
                  (org-element-property :begin lineage)
                  (org-element-property :end lineage))
               (org-open-at-point arg))))

          ((guard (org-element-property :checkbox (org-element-lineage context '(item) t)))
           (let ((match (and (org-at-item-checkbox-p) (match-string 1))))
             (org-toggle-checkbox (if (equal match "[ ]") '(16)))))

          (_
           (if (or (org-in-regexp org-ts-regexp-both nil t)
                   (org-in-regexp org-tsr-regexp-both nil  t)
                   (org-in-regexp org-link-any-re nil t))
               (call-interactively #'org-open-at-point)
             (+org--toggle-inline-images-in-subtree
              (org-element-property :begin context)
              (org-element-property :end context))))))))
#+end_src

**** Bind RET to +org/dwim-at-point
This function binds RET to =+org/dwim-at-point= to make RET contextual.

#+begin_src emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'org-mode-map
   "RET" '+org/dwim-at-point)
#+end_src

*** Org cycle behavior
I really liked Doom style org cycling. It just goes through folded and children modes and doesn't enter subtree. As my note structure grows, there will invariably be lot of nested headings and looking at all the notes at once adds no value. So, just cycling between FOLDED and CHILDREN works perfectly for me. The below code is copied over from Doom's config.
**** Set up function for custom cycling (unused)
Realized the existing =evil-toggle-fold= function does the job for me and also solves the problem of expanding drawers. I'll be disabling this function for now and instead use =evil-toggle-fold= for a while. If it works as expected for all my use cases, I'll delete this section entirely.

#+begin_src emacs-lisp :tangle no
  (defun +org-cycle-only-current-subtree-h (&optional arg)
    "Toggle the local fold at the point, and no deeper.
         `org-cycle's standard behavior is to cycle between three levels: collapsed,
         subtree and whole document. This is slow, especially in larger org buffer. Most
         of the time I just want to peek into the current subtree -- at most, expand
         ,*only* the current subtree.

         All my (performant) foldings needs are met between this and `org-show-subtree'
         (on zO for evil users), and `org-cycle' on shift-TAB if I need it."
    (interactive "P")
    (unless (eq this-command 'org-shifttab)
      (save-excursion
        (org-beginning-of-line)
        (let (invisible-p)
          (when (and (org-at-heading-p)
                     (or org-cycle-open-archived-trees
                         (not (member org-archive-tag (org-get-tags))))
                     (or (not arg)
                         (setq invisible-p (outline-invisible-p (line-end-position)))))
            (unless invisible-p
              (setq org-cycle-subtree-status 'subtree))
            (org-cycle-internal-local)
            t)))))
#+end_src

**** Bind TAB to +org-cycle-only-current-subtree-h

#+begin_src emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'org-mode-map
   "<tab>" 'evil-toggle-fold)
#+end_src

*** Org insert behavior
**** Insert item

#+begin_src emacs-lisp
  (defun +org--insert-item (direction)
    (let ((context (org-element-lineage
                    (org-element-context)
                    '(table table-row headline inlinetask item plain-list)
                    t)))
      (pcase (org-element-type context)
        ;; Add a new list item (carrying over checkboxes if necessary)
        ((or `item `plain-list)
         ;; Position determines where org-insert-todo-heading and org-insert-item
         ;; insert the new list item.
         (if (eq direction 'above)
             (org-beginning-of-item)
           (org-end-of-item)
           (backward-char))
         (org-insert-item (org-element-property :checkbox context))
         ;; Handle edge case where current item is empty and bottom of list is
         ;; flush against a new heading.
         (when (and (eq direction 'below)
                    (eq (org-element-property :contents-begin context)
                        (org-element-property :contents-end context)))
           (org-end-of-item)
           (org-end-of-line)))

        ;; Add a new table row
        ((or `table `table-row)
         (pcase direction
           ('below (save-excursion (org-table-insert-row t))
                   (org-table-next-row))
           ('above (save-excursion (org-shiftmetadown))
                   (+org/table-previous-row))))

        ;; Otherwise, add a new heading, carrying over any todo state, if
        ;; necessary.
        (_
         (let ((level (or (org-current-level) 1)))
           ;; I intentionally avoid `org-insert-heading' and the like because they
           ;; impose unpredictable whitespace rules depending on the cursor
           ;; position. It's simpler to express this command's responsibility at a
           ;; lower level than work around all the quirks in org's API.
           (pcase direction
             (`below
              (let (org-insert-heading-respect-content)
                (goto-char (line-end-position))
                (org-end-of-subtree)
                (insert "\n" (make-string level ?*) " ")))
             (`above
              (org-back-to-heading)
              (insert (make-string level ?*) " ")
              (save-excursion (insert "\n"))))
           (when-let* ((todo-keyword (org-element-property :todo-keyword context))
                       (todo-type    (org-element-property :todo-type context)))
             (org-todo
              (cond ((eq todo-type 'done)
                     ;; Doesn't make sense to create more "DONE" headings
                     (car (+org-get-todo-keywords-for todo-keyword)))
                    (todo-keyword)
                    ('todo)))))))

      (when (org-invisible-p)
        (org-show-hidden-entry))
      (when (and (bound-and-true-p evil-local-mode)
                 (not (evil-emacs-state-p)))
        (evil-insert 1))))
#+end_src

**** Insert item below

#+begin_src emacs-lisp
  (defun +org/insert-item-below (count)
    "Inserts a new heading, table cell or item below the current one."
    (interactive "p")
    (dotimes (_ count) (+org--insert-item 'below)))

  (general-define-key
   :states '(normal insert)
   :keymaps 'org-mode-map
   "<C-return>" '+org/insert-item-below)
#+end_src

**** Insert item above

#+begin_src emacs-lisp
  (defun +org/insert-item-above (count)
    "Inserts a new heading, table cell or item above the current one."
    (interactive "p")
    (dotimes (_ count) (+org--insert-item 'above)))

  (general-define-key
   :states '(normal insert)
   :keymaps 'org-mode-map
   "<C-S-return>" '+org/insert-item-above)
#+end_src

*** Org refile to current file
Copied over from doom emacs. Helps make refiling easier when it must be done within the current file.

#+begin_src emacs-lisp
  (defun +org/refile-to-current-file (arg &optional file)
    "Refile current heading to elsewhere in the current buffer.
  If prefix ARG, copy instead of move."
    (interactive "P")
    (let ((org-refile-targets `((,file :maxlevel . 10)))
          (org-refile-use-outline-path nil)
          (org-refile-keep arg)
          current-prefix-arg)
      (call-interactively #'org-refile)))
#+end_src

* Blogging
** ox-hugo
This is the emacs package I use to publish to my Hugo website using org files
Package: [[https://github.com/kaushalmodi/ox-hugo][ox-hugo]]

#+begin_src emacs-lisp
  (use-package ox-hugo
    :after ox)
#+end_src

** Turn on org-hugo-auto-export-mode when you visit blog.org
The minor mode =org-hugo-auto-export-mode= enables auto export hugo posts on saving. However, this minor mode is disabled by default. It doesn't make sense to have this turned on globally. So, the following piece of code enables the minor mode only when the buffer is =blog.org=.
Found the code in a [[https://stackoverflow.com/a/39652226][stack overflow post]].

#+begin_src emacs-lisp
  (defun rr/enable-hugo-auto-export-mode ()
    (if (equal (buffer-name) "blog.org")
        (org-hugo-auto-export-mode)))

  (add-hook 'find-file-hook 'rr/enable-hugo-auto-export-mode)
#+end_src
** Generate a filename given a blog post title
This is a nice little helper function I wrote for myself to generate a filename from a blog post's title. ox-hugo needs a property called =EXPORT_FILE_NAME= which must be set under the heading that contains the blog post. This function generates the file name and sets the property based on the org heading the point is on.

#+begin_src emacs-lisp
  (defun rr/extract-hugo-post-file-name ()
    "Create a filename out of blog post's title.

This method is expected to be executed on a TODO heading on a an
org file containing blog posts that would be exported using
ox-hugo. Running this interactive command would set an org
property called EXPORT_FILE_NAME that is required by ox-hugo to
generate a Hugo-friendly markdown file in the location specified
in HUGO_BASE_DIR property."
    (interactive)
    (setq-local title-line (thing-at-point 'line t))
    (unless (not (string-match "TODO " title-line))
      (let* ((lines (split-string title-line "TODO "))
             (blog-post-title (nth 1 lines))
             (file-name (replace-regexp-in-string "_+" "-" (replace-regexp-in-string "\\W" "_" (string-trim (downcase blog-post-title)))))
             (blog-post-file-name (concat file-name ".md")))
        (org-set-property "EXPORT_FILE_NAME" blog-post-file-name))))
#+end_src

* Work
** Excorporate
*** Setup
This needs initial setup of work account so that it can access the calendar. This can be done using =M-x excorporate=. More configuration can be found in [[https://emacs.stackexchange.com/a/46022][this stack overflow post]].
Package: [[https://github.com/emacsmirror/excorporate][excorporate]]

#+begin_src emacs-lisp
  (use-package excorporate
    :defer t
    :config
    (setq excorporate-diary-today-file
          (concat user-emacs-directory "var/excorporate/diary-excorporate-today")
          excorporate-diary-transient-file
          (concat user-emacs-directory "var/excorporate/diary-excorporate-transient")))
  (excorporate-diary-enable)
#+end_src

*** Show today's meetings
A call to =exco-org-show-day= will display the meetings for what is passed in the arguments (MONTH, DAY, YEAR). This needs some tweaking since there is no function to display meetings for current day. Upon invoking the function, a new read-only org buffer is opened and switched to that contains all the meetings for the current day.

#+begin_src emacs-lisp
  (defun rr/show-work-cal-for-current-day ()
    "Show meetings for current day."
    (interactive)
    (exco-org-show-day
     (nth 0 (calendar-current-date))
     (nth 1 (calendar-current-date))
     (nth 2 (calendar-current-date)))
    (other-window 1)
    (sleep-for 1)
    (org-shifttab)
    (evil-toggle-fold))
#+end_src

* Ideas
Some ideas for customizing emacs. I keep thinking about different ways to customize emacs and I'd like to have them all in one place so that whenever I have some time, I can pick one up and work on it.
* Packages I want to try
- [[https://awesomeopensource.com/project/dandavison/magit-delta?mode=desktop&ref_=m_ft_dsk][Magit Delta]]
- Deft
- devdocs
- org-special-block-extras
- fancy-narrow
- package-lint - for linting when you write packages
* Runtime Performance
Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 2 1000 1000))
#+end_src

* Pending Customizations
** TODO Custom killring

#+begin_src emacs-lisp :tangle no
  (defun my-delete-word (arg)
    "Delete characters forward until encountering the end of a word.
  With argument, do this that many times.
  This command does not push text to `kill-ring'."
    (interactive "p")
    (delete-region
     (point)
     (progn
       (forward-word arg)
       (point))))

  (defun my-backward-delete-word (arg)
    "Delete characters backward until encountering the beginning of a word.
  With argument, do this that many times.
  This command does not push text to `kill-ring'."
    (interactive "p")
    (my-delete-word (- arg)))

  (defun my-delete-line ()
    "Delete text from current position to end of line char.
  This command does not push text to `kill-ring'."
    (interactive)
    (delete-region
     (point)
     (progn (end-of-line 1) (point)))
    (delete-char 1))

  (defun my-delete-line-backward ()
    "Delete text between the beginning of the line to the cursor position.
  This command does not push text to `kill-ring'."
    (interactive)
    (let (p1 p2)
      (setq p1 (point))
      (beginning-of-line 1)
      (setq p2 (point))
      (delete-region p1 p2)))
#+end_src

** Install packages
*** DONE vterm
CLOSED: [2021-08-30 Mon 20:43]
*** DONE vertico
CLOSED: [2021-08-30 Mon 20:43]
*** DONE lsp
CLOSED: [2021-08-29 Sun 14:28]
*** DONE auto update packages
CLOSED: [2021-08-30 Mon 20:43]
:LOGBOOK:
- State "KILL"       from "TODO"       [2021-08-29 Sun 22:05]
:END:
*** DONE git gutter (or diff-hl-mode)
CLOSED: [2021-09-01 Wed 16:01]
:LOGBOOK:
- State "DONE"       from "TODO"       [2021-09-01 Wed 16:01]
:END:
*** TODO yasnippets
*** TODO Edwina?
* Tips & Tricks
What's described in this section is general (and lesser known) tips on existing features. These require no customization.
** Insert timestamp with current time
=org-time-stamp-inactive= (bound to =SPC o d T=) inserts only the current date by default. But sometimes we need the current time as well, so having a =universal-=argument= (bound to =C-S-u=) as a prefix before running =org-time-stamp-inactive= helps add the current time as well.

So, hitting =C-S-u SPC o d T= inserts a timestamp like [2021-09-03 Fri 09:37]
** Use M-m to go to the first non-whitespace in a line
I'm used to hitting =C-a= to go to the beginning of the line. Some lines are indented and have spaces at the beginning. =M-m= is a nice keybinding to use to get to the first non-whitespace character on any line.
