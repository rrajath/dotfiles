#+TITLE: Doom Emacs Private Config
#+PROPERTY: header-args :tangle ~/.doom.d/private_config.el

* Introduction
This is a private config file that gets loaded in =<DOOM_EMACS_DIR>/config.el= via the function call: =(load-file "private_config.el")=.

The configs are set using source blocks that org-mode evaluates and generates private_config.el in =<DOOM_EMACS_DIR>= so that it can be loaded on startup.
* org-mode related configs
** Require org
For some reason, the capture templates set in this file don't get applied when Emacs starts. Realized that I was trying to add capture templates to a list that doesn't exist (when the config loads). Setting the below attribute makes sure that org is initialized before setting rest of the configs.
#+begin_src emacs-lisp
(require 'org)
#+end_src
** Org File Paths
#+begin_src emacs-lisp
(defun rr/org-path (path)
  (expand-file-name path org-directory))
#+end_src
** Org Super Agenda
#+begin_src emacs-lisp
(after! org-agenda
  (org-super-agenda-mode))

(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-block-separator nil
      org-agenda-tags-column 80 ;; from testing this seems to be a good value
      org-agenda-compact-blocks t
      org-agenda-start-with-log-mode t)

;; Org agenda custom commands
(setq org-agenda-custom-commands
      '(("d" "Dashboard"
         ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                       '((:name "Today"
                          :time-grid t
                          :date today
                          :todo "TODO"
                          :scheduled today
                          :order 1)))))
          (alltodo "" ((org-agenda-overriding-header "All TODOs")
                       (org-super-agenda-groups
                        '((:name "Ongoing"
                           :todo "STRT"
                           :order 2)
                          (:name "Important"
                           :tag "Important"
                           :priority "A"
                           :order 6)
                          (:name "Due Today"
                           :deadline today
                           :order 3)
                          (:name "Due Soon"
                           :deadline future
                           :order 8)
                          (:name "Overdue"
                           :deadline past
                           :face error
                           :order 4)
                          (:name "Scheduled Today"
                           :scheduled today
                           :order 5)
                          (:name "Personal Tasks"
                           :tag "task"
                           :order 12)
                          (:name "Events"
                           :tag "event"
                           :order 13)
                          (:name "Projects"
                           :tag "Project"
                           :order 14)
                          (:name "Work Tasks"
                           :tag "work"
                           :order 10)
                          (:name "Work Meetings"
                           :tag "meeting"
                           :order 11)
                          (:name "Waiting"
                           :todo "WAIT"
                           :order 20)
                          (:name "Blog"
                           :file-path "blog"
                           :order 25)
                          (:name "Trivial"
                           :priority<= "E"
                           :tag ("Trivial" "Unimportant")
                           :todo ("SOMEDAY" )
                           :order 90)
                          (:discard (:tag ("Chore" "Routine" "Daily")))
                          )
                        )
                       )
                   )
          )
         )

        ("w" "Work Tasks" tags-todo "+work +meeting")
        )
      )
#+end_src
** Capture Templates
#+begin_src emacs-lisp
(setq org-capture-templates
      `(("o" "Organize")
        ("ot" "Task" entry (file+olp, (rr/org-path "organize.org") "Tasks")
         "* TODO %?\n %U\n %a\n %i" :kill-buffer t)
        ("oe" "Event" entry (file+olp, (rr/org-path "organize.org") "Events")
         "* TODO %?\n %U\n %a\n %i")
        ("ow" "Work Task" entry (file+olp, (rr/org-path "work-tasks.org") "All Tasks")
         "* TODO %?\n %U\n %a\n %i" :kill-buffer t)
        ("j" "Journal" entry (file+datetree, (rr/org-path "journal.org"))
         "* %?\n")
        ("n" "Notes")
        ("nr" "Resource" entry (file+olp, (rr/org-path "refile.org") "Resources")
         "* %?\n %U\n %a\n %i")
        ("nc" "Curiosity" entry (file+olp, (rr/org-path "refile.org") "Curiosities")
         "* %?\n %U\n %a\n %i")
        ("no" "Other" entry (file+olp, (rr/org-path "refile.org") "Notes")
         "* %?\n %U\n %a\n %i")
        ("nw" "Work" entry (file+olp, (rr/org-path "work-tasks.org") "Inbox")
         "* %?\n %U\n %a\n %i")
        )
      )
#+end_src
* Enable matching parens
#+begin_src emacs-lisp
(setq show-paren-mode t)
#+end_src
* File Management
** Dired
This is to have a file manager inside emacs to make file operations easy. The following piece of code will configure dired to jump to the directory where the current buffer is open.
#+begin_src emacs-lisp
(use-package dired
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  ;; :custom ((dired-listing-switches "-agho --group-directories-first"))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer))

(use-package dired-single)

(use-package dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "H" 'dired-hide-dotfiles-mode))
#+end_src
* Projectile
Set =projectile-project-search-path= to a path where you have all your code so that the files are easily searched.

#+begin_src emacs-lisp
(setq projectile-project-search-path '("~/code"))
#+end_src
* Enable live refresh of buffers
When the files on the disk change, I want the buffer to auto reload so that I'm always working with the latest version of the file. This also avoids file conflicts.
#+begin_src emacs-lisp
(setq global-auto-revert-mode t)
#+end_src
* Associate typescript file extension with javascript-mode
By default, emacs doesn't support .ts files to be open with javascript-mode. Instead they are opened with Fundamental mode. This doesn't give us features like syntax highlighting. The following command enables javascript-mode for .ts files.

#+begin_src emacs-lisp
;; (add-to-list 'auto-mode-alist '("\\.ts\\'" . javascript-mode))
#+end_src
* Add json mode for json file extensions
This is for Emacs to recognize json files and open them in json mode so that things like beautifying become easier.

#+begin_src emacs-lisp
;; (add-to-list 'auto-mode-alist '("\\.json\\" . json-mode))
#+end_src
* Enable git gutter
For some reason, my Emacs config doesn't show git gutter for changed lines. There's another mode for enabling the gutter and that's [[https://github.com/dgutov/diff-hl][diff-hl-mode]]
#+begin_src emacs-lisp
(global-diff-hl-mode)
#+end_src
* Languages
Installed and configured language servers and typescript mode: https://www.youtube.com/watch?v=E-NAM9U5JYE
I've installed tide package using ~M-x package-install tide~
**Note**: I installed ~tide~ by following instructions from elsewhere. I have to remove this.

** Language Servers
Make sure to run the following command in terminal to install the language server for typescript:
#+begin_src shell :tangle no
npm i -g typescript-language-server; npm i -g typescript
#+end_src

This sets up lsp-mode, lsp-ui and lsp-treemacs

#+begin_src emacs-lisp
(defun lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (setq lsp-restart 'auto-restart)
  (lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook (lsp-mode . lsp-mode-setup)
  :init
  (setq lsp-keymap-prefix "C-c l")
  :config
  (lsp-enable-which-key-integration t))

(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))

(use-package lsp-treemacs
  :after lsp)

(use-package lsp-ivy
  :after lsp)

(use-package prettier
  :after lsp)
(setq global-prettier-mode t)
#+end_src

** Debugging with dap-mode (temporarily disabled)
This is for debugging using dap-mode. Currently this is throwing some errors and is disabled for now.
#+begin_src emacs-lisp :tangle no
(use-package dap-mode)
#+end_src

** Typescript
#+begin_src emacs-lisp
(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 2))
  ;; (require 'dap-node)
  ;; (dap-node-setup))
#+end_src

** Better completions with company-mode
As of [2021-08-07 Sat], company mode is not giving relevant completions. This needs deeper investigation.
#+begin_src emacs-lisp
(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
         ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
         ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

;; (use-package company-box
  ;; :hook (company-mode . company-box-mode)
  ;; :after lsp-mode)
#+end_src
** Disable global company mode
This will disable global company mode since it gets in the way while writing anything other than code. And then enables company mode while lsp-mode is on to get better completions.
#+begin_src emacs-lisp
(setq company-global-modes '(not org-mode))
;; (add-hook 'org-mode-hook (company-mode -1))
;; (global-company-mode nil)
#+end_src

* Save files any time focus leaves the window
This is needed so that I don't have to bother saving anything manually. Just changing focus away from the Emacs window will save the buffer.

#+begin_src emacs-lisp
(use-package super-save
  :config
  (super-save-mode +1))
#+end_src
* Automatic Package Updates
This piece of code updates emacs packages regularly (every 7 days)

#+begin_src emacs-lisp
(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))
#+end_src
