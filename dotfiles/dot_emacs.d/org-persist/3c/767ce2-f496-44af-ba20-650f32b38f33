;;   -*- mode: lisp-data; -*-
(((elisp org-element--headline-cache) . #s(avl-tree- [[[[[[[[[nil nil #36=(headline (:standard-properties [179 179 199 255 255 0 #2=(:title) nil element t nil 201 255 1 nil #4=[org-element-deferred org-element--headline-deferred nil t] nil #3=(org-data (:standard-properties [1 1 1 77401 77401 0 nil org-data nil t nil 3 77401 nil nil nil nil nil] :path "/Users/rrajath/dotfiles/.emacs.d/PostInitConfig.org" :CATEGORY "PostInitConfig"))] :pre-blank 0 :raw-value #1=[org-element-deferred org-element--headline-parse-title (t) t] :title #1# :level #1# :priority #1# :tags #1# :todo-keyword #1# :todo-type #1# :footnote-section-p #1# :archivedp #1# :commentedp #1#)) 0] [nil nil #5=(headline (:standard-properties [287 287 308 1474 1474 0 #2# nil element t nil 310 1472 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 20) t] :title #6=[org-element-deferred org-element-property-2 (:raw-value) nil] :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7=[org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp #8=[org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil)) 0] #38=(headline (:standard-properties [255 255 270 287 287 0 #2# nil element t nil 272 287 1 nil #4# nil #3#] :pre-blank 0 :raw-value #1# :title #1# :level #1# :priority #1# :tags #1# :todo-keyword #1# :todo-type #1# :footnote-section-p #1# :archivedp #1# :commentedp #1#)) 0] [[nil nil #43=(headline (:standard-properties [481 481 505 980 980 0 #2# nil element t nil 507 978 2 nil nil nil #5#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 22) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [nil nil #47=(headline (:standard-properties [1381 1381 1413 1474 1474 0 #2# nil element t nil 1415 1472 2 nil nil nil #5#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 31) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #44=(headline (:standard-properties [980 980 1003 1381 1381 0 #2# nil element t nil 1005 1379 2 nil nil nil #5#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 22) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #40=(headline (:standard-properties [308 308 331 481 481 0 #2# section element t nil 333 479 2 nil nil nil #5#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 22) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [[nil nil #49=(headline (:standard-properties [1493 1493 1509 2491 2491 0 #2# section element t nil 1511 2489 2 nil nil nil #9=(headline (:standard-properties [1474 1474 1493 4159 4159 0 #2# nil element t nil 1495 4157 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 18) t] :title #6# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil))] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 15) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [nil [nil nil #60=(headline (:standard-properties [3834 3834 3856 4159 4159 0 #2# nil element t nil 3858 4157 2 nil nil nil #9#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 21) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #54=(headline (:standard-properties [2790 2790 2806 3834 3834 0 #2# nil element t nil 2808 3832 2 nil nil nil #9#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 15) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 1] #52=(headline (:standard-properties [2491 2491 2507 2790 2790 0 #2# nil element t nil 2509 2788 2 nil nil nil #9#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 15) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 1] #9# 0] [[nil [nil nil #64=(headline (:standard-properties [4599 4599 4626 4924 4924 0 #2# nil element t nil 4628 4922 2 nil nil nil #10=(headline (:standard-properties [4159 4159 4171 9776 9776 0 #2# nil element t nil 4173 9774 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 11) t] :title #6# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil))] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 26) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #62=(headline (:standard-properties [4171 4171 4200 4599 4599 0 #2# section element t nil 4202 4597 2 nil nil nil #10#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 28) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 1] [[nil nil #68=(headline (:standard-properties [5326 5326 5353 5688 5688 0 #2# nil element t nil 5355 5686 2 nil nil nil #10#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 26) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] nil #70=(headline (:standard-properties [5688 5688 5742 6600 6600 0 #2# nil element t nil 5744 6598 2 nil nil nil #10#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 53) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) -1] #66=(headline (:standard-properties [4924 4924 4941 5326 5326 0 #2# nil element t nil 4943 5324 2 nil nil nil #10#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 16) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #10# -1] [[[nil nil #73=(headline (:standard-properties [7087 7087 7097 8154 8154 0 #2# nil element t nil 7099 8152 2 nil nil nil #10#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 9) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] nil #75=(headline (:standard-properties [8154 8154 8165 8338 8338 0 #2# nil element t nil 8167 8336 2 nil nil nil #10#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 10) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) -1] [[[nil nil #11=(headline (:standard-properties [8505 8505 8521 8942 8942 0 #2# nil element t nil 8523 8940 2 nil nil nil #10#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 15) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] nil #80=(headline (:standard-properties [8521 8521 8540 8745 8745 0 #2# section element t nil 8542 8743 3 nil nil nil #11#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 18) t] :title #6# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) -1] [[nil nil #82=(headline (:standard-properties [8942 8942 8952 9776 9776 0 #2# nil element t nil 8954 9774 2 nil nil nil #10#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 9) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [nil nil #85=(headline (:standard-properties [9790 9790 9815 10098 10098 0 #2# section element t nil 9817 10096 2 nil nil nil #12=(headline (:standard-properties [9776 9776 9790 27564 27564 0 #2# nil element t nil 9792 27562 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 13) t] :title #6# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil))] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 24) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #12# 0] #81=(headline (:standard-properties [8745 8745 8762 8942 8942 0 #2# nil element t nil 8764 8940 3 nil nil nil #11#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 16) t] :title #6# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #78=(headline (:standard-properties [8338 8338 8348 8505 8505 0 #2# nil element t nil 8350 8503 2 nil nil nil #10#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 9) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 1] #72=(headline (:standard-properties [6600 6600 6620 7087 7087 0 #2# nil element t nil 6622 7085 2 nil nil nil #10#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 19) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) -1] [[[[[[nil nil #13=(headline (:standard-properties [10654 10654 10662 27564 27564 0 #2# nil element t nil 10664 27562 2 nil nil nil #12#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 7) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [nil nil #91=(headline (:standard-properties [10799 10799 10825 11064 11064 0 #2# nil element t nil 10827 11062 4 nil nil nil #14=(headline (:standard-properties [10662 10662 10683 12614 12614 0 #2# section element t nil 10685 12612 3 nil nil nil #13#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 20) t] :title #6# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil))] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (5 25) t] :title #6# :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #14# 0] [nil nil #95=(headline (:standard-properties [11313 11313 11336 11591 11591 0 #2# nil element t nil 11338 11589 4 nil nil nil #14#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (5 22) t] :title #6# :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #93=(headline (:standard-properties [11064 11064 11088 11313 11313 0 #2# nil element t nil 11090 11311 4 nil nil nil #14#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (5 23) t] :title #6# :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) -1] [[[nil nil #99=(headline (:standard-properties [12038 12038 12053 12614 12614 0 #2# nil element t nil 12055 12612 4 nil nil nil #14#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (5 14) t] :title #6# :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [nil nil #101=(headline (:standard-properties [12633 12633 12649 13506 13506 0 #2# section element t nil 12651 13504 4 nil nil nil #15=(headline (:standard-properties [12614 12614 12633 23254 23254 0 #2# nil element t nil 12635 23252 3 nil nil nil #13#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 18) t] :title #6# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil))] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (5 15) t] :title #6# :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #15# 0] [[nil nil #105=(headline (:standard-properties [13934 13934 13953 14455 14455 0 #2# nil element t nil 13955 14453 4 nil nil nil #15#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (5 18) t] :title #6# :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [nil nil #108=(headline (:standard-properties [14948 14948 14966 15381 15381 0 #2# nil element t nil 14968 15379 4 nil nil nil #15#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (5 17) t] :title #6# :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #106=(headline (:standard-properties [14455 14455 14472 14948 14948 0 #2# nil element t nil 14474 14946 4 nil nil nil #15#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (5 16) t] :title #6# :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #103=(headline (:standard-properties [13506 13506 13524 13934 13934 0 #2# nil element t nil 13526 13932 4 nil nil nil #15#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (5 17) t] :title #6# :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #97=(headline (:standard-properties [11591 11591 11623 12038 12038 0 #2# nil element t nil 11625 12036 4 nil nil nil #14#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (5 31) t] :title #6# :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [[[nil nil #112=(headline (:standard-properties [15829 15829 15846 16206 16206 0 #2# nil element t nil 15848 16204 4 nil nil nil #15#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (5 16) t] :title #6# :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [nil nil #114=(headline (:standard-properties [16223 16223 16250 16649 16649 0 #2# section element t nil 16252 16647 5 nil nil nil #16=(headline (:standard-properties [16206 16206 16223 20425 20425 0 #2# nil element t nil 16225 20423 4 nil nil nil #15#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (5 16) t] :title #6# :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil))] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (6 26) t] :title #6# :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #16# 0] [[nil nil #118=(headline (:standard-properties [17149 17149 17173 17667 17667 0 #2# nil element t nil 17175 17665 5 nil nil nil #16#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (6 23) t] :title #6# :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [nil nil #122=(headline (:standard-properties [18129 18129 18151 18641 18641 0 #2# nil element t nil 18153 18639 5 nil nil nil #16#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (6 21) t] :title #6# :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #119=(headline (:standard-properties [17667 17667 17693 18129 18129 0 #2# nil element t nil 17695 18127 5 nil nil nil #16#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (6 25) t] :title #6# :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #115=(headline (:standard-properties [16649 16649 16672 17149 17149 0 #2# nil element t nil 16674 17147 5 nil nil nil #16#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (6 22) t] :title #6# :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #109=(headline (:standard-properties [15381 15381 15400 15829 15829 0 #2# nil element t nil 15402 15827 4 nil nil nil #15#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (5 18) t] :title #6# :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) -1] [[[nil nil #125=(headline (:standard-properties [19047 19047 19071 19511 19511 0 #2# nil element t nil 19073 19509 5 nil nil nil #16#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (6 23) t] :title #6# :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [nil nil #129=(headline (:standard-properties [20425 20425 20441 20791 20791 0 #2# nil element t nil 20443 20789 4 nil nil nil #15#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (5 15) t] :title #6# :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #127=(headline (:standard-properties [19511 19511 19533 20425 20425 0 #2# nil element t nil 19535 20423 5 nil nil nil #16#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (6 21) t] :title #6# :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [[[nil nil #132=(headline (:standard-properties [21472 21472 21498 22163 22163 0 #2# nil element t nil 21500 22161 4 nil nil nil #15#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (5 25) t] :title #6# :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [nil nil #133=(headline (:standard-properties [22178 22178 22208 22725 22725 0 #2# section element t nil 22210 22723 5 nil nil nil #17=(headline (:standard-properties [22163 22163 22178 23254 23254 0 #2# nil element t nil 22180 23252 4 nil nil nil #15#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (5 14) t] :title #6# :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil))] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (6 29) t] :title #6# :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #17# 0] [nil [nil nil #140=(headline (:standard-properties [27081 27081 27104 27564 27564 0 #2# nil element t nil 27106 27562 3 nil nil nil #13#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 22) t] :title #6# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #138=(headline (:standard-properties [23254 23254 23269 27081 27081 0 #2# nil element t nil 23271 27079 3 nil nil nil #13#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 14) t] :title #6# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 1] #136=(headline (:standard-properties [22725 22725 22743 23254 23254 0 #2# nil element t nil 22745 23252 5 nil nil nil #17#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (6 17) t] :title #6# :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #130=(headline (:standard-properties [20791 20791 20811 21472 21472 0 #2# nil element t nil 20813 21470 4 nil nil nil #15#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (5 19) t] :title #6# :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 1] #123=(headline (:standard-properties [18641 18641 18665 19047 19047 0 #2# nil element t nil 18667 19045 5 nil nil nil #16#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (6 23) t] :title #6# :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) -1] #88=(headline (:standard-properties [10098 10098 10113 10654 10654 0 #2# nil element t nil 10115 10652 2 nil nil nil #12#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 14) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [[[[[[nil nil #145=(headline (:standard-properties [27588 27588 27599 28870 28870 0 #2# section element t nil 27601 28868 2 nil nil nil #18=(headline (:standard-properties [27564 27564 27588 32518 32518 0 #2# nil element t nil 27590 32516 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 23) t] :title #6# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil))] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 10) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [nil nil #149=(headline (:standard-properties [29561 29561 29574 29893 29893 0 #2# nil element t nil 29576 29891 2 nil nil nil #18#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 12) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #147=(headline (:standard-properties [28870 28870 28884 29561 29561 0 #2# nil element t nil 28886 29559 2 nil nil nil #18#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 13) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [[nil nil #151=(headline (:standard-properties [29959 29959 29985 30650 30650 0 #2# nil element t nil 29987 30648 3 nil nil nil #19=(headline (:standard-properties [29893 29893 29904 30650 30650 0 #2# nil element t nil 29906 30648 2 nil nil nil #18#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 10) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil))] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 25) t] :title #6# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [[nil nil #156=(headline (:standard-properties [32052 32052 32065 32518 32518 0 #2# nil element t nil 32067 32516 2 nil nil nil #18#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 12) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] nil #20=(headline (:standard-properties [32518 32518 32530 33668 33668 0 #2# nil element t nil 32532 33666 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 11) t] :title #6# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) -1] #153=(headline (:standard-properties [30650 30650 30659 32052 32052 0 #2# nil element t nil 30661 32050 2 nil nil nil #18#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 8) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 1] #19# 1] [[[nil nil #159=(headline (:standard-properties [33301 33301 33309 33467 33467 0 #2# nil element t nil 33311 33465 2 nil nil nil #20#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 7) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [nil nil #163=(headline (:standard-properties [33668 33668 33676 35137 35137 0 #2# nil element t nil 33678 35135 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 7) t] :title #6# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #161=(headline (:standard-properties [33467 33467 33480 33668 33668 0 #2# nil element t nil 33482 33666 2 nil nil nil #20#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 12) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [[nil nil #166=(headline (:standard-properties [35151 35151 35165 35552 35552 0 #2# section element t nil 35167 35550 2 nil nil nil #21=(headline (:standard-properties [35137 35137 35151 37969 37969 0 #2# nil element t nil 35153 37967 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 13) t] :title #6# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil))] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 13) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [nil nil #27=(headline (:standard-properties [35806 35806 35818 35892 35892 0 #2# nil element t nil 35820 35890 2 nil nil nil #21#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 11) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #168=(headline (:standard-properties [35552 35552 35561 35806 35806 0 #2# nil element t nil 35563 35804 2 nil nil nil #21#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 8) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #21# 0] #158=(headline (:standard-properties [32530 32530 32585 33301 33301 0 #2# section element t nil 32587 33299 2 nil nil nil #20#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 54) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) -1] [[[[[nil nil #22=(headline (:standard-properties [35892 35892 35905 37969 37969 0 #2# nil element t nil 35907 37967 2 nil nil nil #21#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 12) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [nil nil #174=(headline (:standard-properties [36283 36283 36317 36858 36858 0 #2# nil element t nil 36319 36856 3 nil nil nil #22#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 33) t] :title #6# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #172=(headline (:standard-properties [35905 35905 35922 36283 36283 0 #2# section element t nil 35924 36281 3 nil nil nil #22#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 16) t] :title #6# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [[nil nil #23=(headline (:standard-properties [37709 37709 37724 37969 37969 0 #2# nil element t nil 37726 37967 3 nil nil nil #22#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 14) t] :title #6# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [nil nil #24=(headline (:standard-properties [37969 37969 37979 38977 38977 0 #2# nil element t nil 37981 38975 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 9) t] :title #6# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #178=(headline (:standard-properties [37724 37724 37738 37969 37969 0 #2# section element t nil 37740 37967 4 nil nil nil #23#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (5 13) t] :title #6# :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #176=(headline (:standard-properties [36858 36858 36868 37709 37709 0 #2# nil element t nil 36870 37707 3 nil nil nil #22#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 9) t] :title #6# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [[nil nil #180=(headline (:standard-properties [37995 37995 38011 38415 38415 0 #2# section element t nil 38013 38413 3 nil nil nil #25=(headline (:standard-properties [37979 37979 37995 38977 38977 0 #2# section element t nil 37997 38975 2 nil nil nil #24#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 15) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil))] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 15) t] :title #6# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [nil nil #183=(headline (:standard-properties [38738 38738 38758 38977 38977 0 #2# nil element t nil 38760 38975 3 nil nil nil #25#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 19) t] :title #6# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #181=(headline (:standard-properties [38415 38415 38432 38738 38738 0 #2# nil element t nil 38434 38736 3 nil nil nil #25#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 16) t] :title #6# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #25# -1] [[[[nil nil #186=(headline (:standard-properties [38987 38987 39009 41230 41230 0 #2# section element t nil 39011 41228 2 nil nil nil #26=(headline (:standard-properties [38977 38977 38987 68439 68439 0 #2# nil element t nil 38989 68437 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 9) t] :title #6# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 20) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] nil #187=(headline (:standard-properties [41230 41230 41246 43384 43384 0 #2# nil element t nil 41248 43382 2 nil nil nil #26#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 14) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) -1] [[nil nil #192=(headline (:standard-properties [43598 43598 43612 43913 43913 0 #2# nil element t nil 43614 43911 2 nil nil nil #26#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 13) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] nil #194=(headline (:standard-properties [43913 43913 43933 44187 44187 0 #2# nil element t nil 43935 44185 2 nil nil nil #26#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 19) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) -1] #190=(headline (:standard-properties [43384 43384 43420 43598 43598 0 #2# nil element t nil 43422 43596 2 nil nil nil #26#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 35) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [[nil nil #198=(headline (:standard-properties [44654 44654 44672 47058 47058 0 #2# nil element t nil 44674 47056 2 nil nil nil #26#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 17) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] nil #28=(headline (:standard-properties [47058 47058 47081 48218 48218 0 #2# nil element t nil 47083 48216 2 nil nil nil #26#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 22) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) -1] #196=(headline (:standard-properties [44187 44187 44209 44654 44654 0 #2# nil element t nil 44211 44652 2 nil nil nil #26#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 21) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) -1] #26# 0] #170=(headline (:standard-properties [35818 35818 35826 35892 35892 0 #2# section element t nil 35828 35890 3 nil nil nil #27#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 7) t] :title #6# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [[[[[[nil nil #201=(headline (:standard-properties [47477 47477 47503 47768 47768 0 #2# nil element t nil 47505 47766 3 nil nil nil #28#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 25) t] :title #6# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] nil #204=(headline (:standard-properties [47768 47768 47804 48218 48218 0 #2# nil element t nil 47806 48216 3 nil nil nil #28#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 35) t] :title #6# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) -1] [[nil nil #208=(headline (:standard-properties [48665 48665 48692 49281 49281 0 #2# nil element t nil 48694 49279 2 nil nil nil #26#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 25) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] nil #209=(headline (:standard-properties [49281 49281 49294 51100 51100 0 #2# nil element t nil 49296 51098 2 nil nil nil #26#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 12) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) -1] #206=(headline (:standard-properties [48218 48218 48248 48665 48665 0 #2# nil element t nil 48250 48663 2 nil nil nil #26#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 29) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [[nil nil #29=(headline (:standard-properties [51117 51117 51142 58305 58305 0 #2# section element t nil 51144 58303 3 nil nil nil #30=(headline (:standard-properties [51100 51100 51117 68439 68439 0 #2# nil element t nil 51119 68437 2 nil nil nil #26#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 16) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil))] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 24) t] :title #6# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] nil #212=(headline (:standard-properties [51338 51338 51369 52047 52047 0 #2# nil element t nil 51371 52045 4 nil nil nil #29#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (5 30) t] :title #6# :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) -1] #30# -1] [[[[nil nil #216=(headline (:standard-properties [58305 58305 58328 59878 59878 0 #2# nil element t nil 58330 59876 3 nil nil nil #30#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 22) t] :title #6# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] nil #32=(headline (:standard-properties [59878 59878 59901 61656 61656 0 #2# nil element t nil 59903 61654 3 nil nil nil #30#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 22) t] :title #6# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) -1] [[nil nil #31=(headline (:standard-properties [61656 61656 61680 65258 65258 0 #2# nil element t nil 61682 65256 3 nil nil nil #30#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 23) t] :title #6# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] nil #222=(headline (:standard-properties [61680 61680 61698 64579 64579 0 #2# section element t nil 61700 64577 4 nil nil nil #31#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (5 16) t] :title #6# :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) -1] #220=(headline (:standard-properties [60261 60261 60301 61656 61656 0 #2# nil element t nil 60303 61654 4 nil nil nil #32#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (5 39) t] :title #6# :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [[nil nil #226=(headline (:standard-properties [64968 64968 64991 65258 65258 0 #2# nil element t nil 64993 65256 4 nil nil nil #31#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (5 22) t] :title #6# :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] nil #228=(headline (:standard-properties [65258 65258 65289 65815 65815 0 #2# nil element t nil 65291 65813 3 nil nil nil #30#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 30) t] :title #6# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) -1] #224=(headline (:standard-properties [64579 64579 64602 64968 64968 0 #2# nil element t nil 64604 64966 4 nil nil nil #31#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (5 22) t] :title #6# :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) -1] #214=(headline (:standard-properties [52047 52047 52070 58305 58305 0 #2# nil element t nil 52072 58303 4 nil nil nil #29#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (5 22) t] :title #6# :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [[[nil [nil nil #234=(headline (:standard-properties [67450 67450 67504 68439 68439 0 #2# nil element t nil 67506 68437 3 nil nil nil #30#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 53) t] :title #6# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #232=(headline (:standard-properties [66980 66980 67015 67450 67450 0 #2# nil element t nil 67017 67448 3 nil nil nil #30#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 34) t] :title #6# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 1] [[[nil nil #236=(headline (:standard-properties [68481 68481 68496 70074 70074 0 #2# nil element t nil 68498 70072 2 nil nil nil #33=(headline (:standard-properties [68439 68439 68450 75205 75205 0 #2# nil element t nil 68452 75203 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 10) t] :title #6# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil))] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 14) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [nil nil #241=(headline (:standard-properties [70633 70633 70661 71879 71879 0 #2# nil element t nil 70663 71877 2 nil nil nil #33#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 27) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #239=(headline (:standard-properties [70074 70074 70092 70633 70633 0 #2# nil element t nil 70094 70631 2 nil nil nil #33#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 17) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [[nil nil #244=(headline (:standard-properties [72811 72811 72870 73846 73846 0 #2# nil element t nil 72872 73844 2 nil nil nil #33#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 58) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [nil nil #248=(headline (:standard-properties [74231 74231 74246 75205 75205 0 #2# nil element t nil 74248 75203 2 nil nil nil #33#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 14) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #246=(headline (:standard-properties [73846 73846 73877 74231 74231 0 #2# nil element t nil 73879 74229 2 nil nil nil #33#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 30) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #242=(headline (:standard-properties [71879 71879 71930 72811 72811 0 #2# nil element t nil 71932 72809 2 nil nil nil #33#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 50) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #33# 1] [[nil nil #251=(headline (:standard-properties [75216 75216 75227 75439 75439 0 #2# section element t nil 75229 75437 2 nil nil nil #34=(headline (:standard-properties [75205 75205 75216 77274 77274 0 #2# nil element t nil 75218 77272 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 10) t] :title #6# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil))] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 10) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] [nil [nil nil #257=(headline (:standard-properties [77274 77274 77287 77401 77401 0 #2# nil element t nil 77289 77399 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 12) t] :title #6# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #255=(headline (:standard-properties [76083 76083 76130 77274 77274 0 #2# nil element t nil 76132 77272 2 nil nil nil #34#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 46) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 1] #253=(headline (:standard-properties [75439 75439 75500 76083 76083 0 #2# nil element t nil 75502 76081 2 nil nil nil #34#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 60) t] :title #6# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 1] #34# -1] #230=(headline (:standard-properties [65815 65815 65854 66980 66980 0 #2# nil element t nil 65856 66978 3 nil nil nil #30#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 38) t] :title #6# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #200=(headline (:standard-properties [47081 47081 47112 47477 47477 0 #2# section element t nil 47114 47475 3 nil nil nil #28#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (4 29) t] :title #6# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #7# :archivedp #8# :commentedp nil)) 0] #18# 0] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[[[[[[nil nil #3# 0] [nil nil (keyword (:standard-properties [1 1 nil nil 45 0 nil top-comment element t nil nil nil nil nil nil nil #35=(section (:standard-properties [1 1 1 179 179 0 nil first-section element t nil 1 179 nil nil nil nil #3#]))] :key "TITLE" :value "Post Init Emacs Configuration")) 0] #35# 0] [[nil nil (keyword (:standard-properties [78 78 nil nil 138 0 nil nil element t nil nil nil nil nil nil nil #35#] :key "PROPERTY" :value "header-args:emacs-lisp :tangle ./post-init.el")) 0] [nil nil #36# 0] (keyword (:standard-properties [138 138 nil nil 179 1 nil nil element t nil nil nil nil nil nil nil #35#] :key "STARTUP" :value "overview indent hidestars")) 0] (keyword (:standard-properties [45 45 nil nil 78 0 nil nil element t nil nil nil nil nil nil nil #35#] :key "AUTHOR" :value "Rajath Ramakrishna")) 0] [[[nil [nil nil (node-property (:standard-properties [212 212 nil nil 249 0 nil node-property element t nil nil nil nil nil nil nil #37=(property-drawer (:standard-properties [199 199 212 249 255 0 nil planning element t nil nil nil nil nil nil nil #42=(section (:standard-properties [199 199 199 255 255 0 nil section element t nil 199 255 nil nil nil nil #36#]))]))] :key "TOC" :value ":include all :ignore this")) 0] #37# 1] [[nil nil #39=(section (:standard-properties [270 270 270 287 287 0 nil section element t nil 270 287 nil nil nil nil #38#])) 0] [nil nil #5# 0] (paragraph (:standard-properties [270 270 270 287 287 0 nil planning element t nil nil nil nil nil nil nil #39#])) 0] #38# 0] [[nil nil #41=(section (:standard-properties [331 331 331 481 481 0 nil section element t nil 331 481 nil nil nil nil #40#])) 0] [nil nil (src-block (:standard-properties [366 366 nil nil 481 1 nil nil element t nil nil nil nil nil nil nil #41#] :language #46="emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";;; post-init.el --- DESCRIPTION -*- no-byte-compile: t; lexical-binding: t; -*-\12")) 0] (paragraph (:standard-properties [331 331 331 365 366 1 nil planning element t nil nil nil nil nil nil nil #41#])) 0] #40# -1] #42# 1] [[[[nil nil #45=(section (:standard-properties [505 505 505 980 980 0 nil section element t nil 505 980 nil nil nil nil #43#])) 0] [nil nil #44# 0] (src-block (:standard-properties [505 505 nil nil 980 1 nil planning element t nil nil nil nil nil nil nil #45#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";  (setq gc-cons-threshold (* 50 1000 1000))\12\12  (defun rr/display-startup-time ()\12    \"Displays startup time in the echo buffer and Messages buffer as\12  soon as Emacs loads.\"\12    (message \"Emacs loaded in %s with %d garbage collections.\"\12             (format \"%.2f seconds\"\12                     (float-time (time-subtract after-init-time before-init-time)))\12             gcs-done))\12  (add-hook 'emacs-startup-hook #'rr/display-startup-time)\12")) 0] [[nil nil (paragraph (:standard-properties [1003 1003 1003 1132 1133 1 nil planning element t nil nil nil nil nil nil nil #48=(section (:standard-properties [1003 1003 1003 1381 1381 0 nil section element t nil 1003 1381 nil nil nil nil #44#]))])) 0] [nil nil #47# 0] (src-block (:standard-properties [1133 1133 nil nil 1381 1 nil nil element t nil nil nil nil nil nil nil #48#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package no-littering)\12\12  (setq auto-save-file-name-transforms\12        `((\".*\" ,(no-littering-expand-var-file-name \"auto-save/\") t)))\12\12  (setq custom-file (expand-file-name \"custom.el\" user-emacs-directory))\12")) 0] #48# 0] [[[nil nil (src-block (:standard-properties [1413 1413 nil nil 1474 0 nil planning element t nil nil nil nil nil nil nil #51=(section (:standard-properties [1413 1413 1413 1474 1474 0 nil section element t nil 1413 1474 nil nil nil nil #47#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(straight-use-package 'org)\12")) 0] [nil nil #49# 0] #9# 0] [nil nil (paragraph (:standard-properties [1509 1509 1509 1582 1583 1 nil planning element t nil nil nil nil nil nil nil #50=(section (:standard-properties [1509 1509 1509 2491 2491 0 nil section element t nil 1509 2491 nil nil nil nil #49#]))])) 0] #50# -1] #51# 0] #43# -1] [[[[[[nil nil #52# 0] [nil nil (paragraph (:standard-properties [2507 2507 2507 2593 2594 1 nil planning element t nil nil nil nil nil nil nil #53=(section (:standard-properties [2507 2507 2507 2790 2790 0 nil section element t nil 2507 2790 nil nil nil nil #52#]))])) 0] #53# 0] [nil nil (src-block (:standard-properties [2653 2653 nil nil 2790 0 nil nil element t nil nil nil nil nil nil nil #53#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package nerd-icons\12  \11:straight (nerd-icons :host github :repo \"rainstormstudio/nerd-icons.el\"))\12")) 0] (paragraph (:standard-properties [2594 2594 2594 2653 2653 0 nil nil element t nil nil nil nil nil nil nil #53#])) -1] [[[nil nil #55=(section (:standard-properties [2806 2806 2806 3834 3834 0 nil section element t nil 2806 3834 nil nil nil nil #54#])) 0] [nil nil #57=(plain-list (:standard-properties [2945 2945 2945 3141 3142 1 nil nil element t nil nil nil nil nil nil #56=((2945 0 "- " nil nil nil 3010) (3010 0 "- " nil nil nil 3075) (3075 0 "- " nil nil nil 3141)) #55#] :type unordered)) 0] (paragraph (:standard-properties [2806 2806 2806 2945 2945 0 nil planning element t nil nil nil nil nil nil nil #55#])) 0] [nil nil (item (:standard-properties [3010 3010 3012 3075 3075 0 #58=(:tag) item element t nil nil nil nil nil nil #56# #57#] :bullet #59="- " :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [2945 2945 2947 3010 3010 0 #58# item element t nil nil nil nil nil nil #56# #57#] :bullet #59# :checkbox nil :counter nil :pre-blank 0 :tag nil)) -1] #54# 0] [[[[nil nil (src-block (:standard-properties [3142 3142 nil nil 3834 0 nil nil element t nil nil nil nil nil nil nil #55#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package doom-modeline\12    :straight t\12    :init (doom-modeline-mode 1))\12\12  (use-package doom-themes\12    :config\12    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled\12          doom-themes-enable-italic t) ; if nil, italics is universally disabled\12    (load-theme 'doom-molokai t)\12\12    ;; Enable flashing mode-line on errors\12    (doom-themes-visual-bell-config)\12    ;; Enable custom neotree theme\12    ;; (doom-themes-neotree-config)\12    (doom-themes-org-config))\12\12  (use-package all-the-icons)\12\12  ;; Set modeline's background to something lighter\12  (set-face-attribute 'mode-line nil\12                      :background \"#2c323b\")\12")) 0] [nil nil #61=(section (:standard-properties [3856 3856 3856 4159 4159 0 nil section element t nil 3856 4159 nil nil nil nil #60#])) 0] #60# 0] [[nil nil (src-block (:standard-properties [4030 4030 nil nil 4159 0 nil nil element t nil nil nil nil nil nil nil #61#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package rainbow-delimiters\12    :defer t\12    :hook (prog-mode . rainbow-delimiters-mode))\12")) 0] nil #10# -1] (paragraph (:standard-properties [3856 3856 3856 4029 4030 1 nil planning element t nil nil nil nil nil nil nil #61#])) 0] [[nil nil #63=(section (:standard-properties [4200 4200 4200 4599 4599 0 nil section element t nil 4200 4599 nil nil nil nil #62#])) 0] [nil nil (src-block (:standard-properties [4249 4249 nil nil 4599 1 nil nil element t nil nil nil nil nil nil nil #63#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package super-save\12    :defer t\12    :diminish super-save-mode\12    :config\12    (super-save-mode +1)\12    (setq super-save-auto-save-when-idle t))\12\12  (setq backup-directory-alist\12        `((\".*\" . ,temporary-file-directory)))\12  (setq auto-save-file-name-transforms\12        `((\".*\" ,temporary-file-directory t)))\12")) 0] (paragraph (:standard-properties [4200 4200 4200 4248 4249 1 nil planning element t nil nil nil nil nil nil nil #63#])) 0] #62# -1] (item (:standard-properties [3075 3075 3077 3141 3141 0 #58# item element t nil nil nil nil nil nil #56# #57#] :bullet #59# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[[[[nil nil #65=(section (:standard-properties [4626 4626 4626 4924 4924 0 nil section element t nil 4626 4924 nil nil nil nil #64#])) 0] [nil nil (src-block (:standard-properties [4811 4811 nil nil 4924 0 nil nil element t nil nil nil nil nil nil nil #65#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package avy\12    :commands (avy-goto-char avy-goto-word-0 avy-goto-line))\12")) 0] (paragraph (:standard-properties [4626 4626 4626 4810 4811 1 nil planning element t nil nil nil nil nil nil nil #65#])) 0] [[nil nil #67=(section (:standard-properties [4941 4941 4941 5326 5326 0 nil section element t nil 4941 5326 nil nil nil nil #66#])) 0] [nil nil (src-block (:standard-properties [5163 5163 nil nil 5326 1 nil nil element t nil nil nil nil nil nil nil #67#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package hungry-delete\12    :defer 2\12    :config\12    (setq hungry-delete-join-reluctantly t))\12  (global-hungry-delete-mode)\12")) 0] (paragraph (:standard-properties [4941 4941 4941 5162 5163 1 nil planning element t nil nil nil nil nil nil nil #67#])) 0] #66# 0] [[[nil nil #69=(section (:standard-properties [5353 5353 5353 5688 5688 0 nil section element t nil 5353 5688 nil nil nil nil #68#])) 0] [nil nil (src-block (:standard-properties [5509 5509 nil nil 5688 1 nil nil element t nil nil nil nil nil nil nil #69#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun rr/revert-buffer-no-confirm ()\12    \"Revert the buffer, but don't ask for confirmation\"\12    (interactive)\12    (revert-buffer nil t nil))\12")) 0] (paragraph (:standard-properties [5353 5353 5353 5508 5509 1 nil planning element t nil nil nil nil nil nil nil #69#])) 0] [nil nil #71=(section (:standard-properties [5742 5742 5742 6600 6600 0 nil section element t nil 5742 6600 nil nil nil nil #70#])) 0] #70# -1] #68# 0] [[[nil nil (src-block (:standard-properties [5806 5806 nil nil 6600 1 nil nil element t nil nil nil nil nil nil nil #71#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (require 'mm-url) ; to include mm-url-decode-entities-string\12\12  (defun rr/org-insert-html-link ()\12    \"Insert org link where default description is set to html title.\"\12    (interactive)\12    (let* ((url (read-string \"URL: \"))\12           (title (rr/get-html-title-from-url url)))\12      (org-insert-link nil url title)))\12\12  (defun rr/get-html-title-from-url (url)\12    \"Return content in <title> tag.\"\12    (let (x1 x2 (download-buffer (url-retrieve-synchronously url)))\12      (save-excursion\12        (set-buffer download-buffer)\12        (beginning-of-buffer)\12        (setq x1 (search-forward \"<title>\"))\12        (search-forward \"</title>\")\12        (setq x2 (search-backward \"<\"))\12        (mm-url-decode-entities-string (buffer-substring-no-properties x1 x2)))))\12")) 0] [nil nil #74=(section (:standard-properties [6620 6620 6620 7087 7087 0 nil section element t nil 6620 7087 nil nil nil nil #72#])) 0] #72# 0] [nil nil #73# 0] (src-block (:standard-properties [6620 6620 nil nil 7087 0 nil planning element t nil nil nil nil nil nil nil #74#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package highlight-symbol\12    :config\12    (set-face-attribute 'highlight-symbol-face nil\12                        :background (face-background 'default)\12                        :foreground \"#48E5C2\") ;original: #FA009A, DE7C5A\12    (setq highlight-symbol-idle-delay 0)\12    (setq highlight-symbol-on-navigation-p t)\12    (add-hook 'prog-mode-hook #'highlight-symbol-mode)\12    (add-hook 'prog-mode-hook #'highlight-symbol-nav-mode))\12")) -1] (paragraph (:standard-properties [5742 5742 5742 5805 5806 1 nil planning element t nil nil nil nil nil nil nil #71#])) -1] #64# 0] (src-block (:standard-properties [1583 1583 nil nil 2491 1 nil nil element t nil nil nil nil nil nil nil #50#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun rr/set-font-faces ()\12    (message \"Setting font faces!\")\12    (set-face-attribute 'default nil :font \"JetBrains Mono\" :height 125)\12    (setq my-fixed-pitch-font \"JetBrains Mono\")\12    (setq my-variable-pitch-font \"SN Pro\")\12\12    ;; Set the fixed pitch face\12    (set-face-attribute 'fixed-pitch nil\12                        :font my-fixed-pitch-font\12                        :height 170\12                        :weight 'light)\12\12    ;; Set the variable pitch face\12    (set-face-attribute 'variable-pitch nil\12                        :font my-variable-pitch-font\12                        :height 150\12                        :weight 'regular))\12\12  (if (daemonp)\12      (add-hook 'after-make-frame-functions\12                (lambda (frame)\12                  (setq doom-modeline-icon t)\12                  (with-selected-frame frame (rr/set-font-faces))))\12    (rr/set-font-faces))\12")) 0] [[[[[[nil nil (paragraph (:standard-properties [7097 7097 7097 7153 7154 1 nil planning element t nil nil nil nil nil nil nil #76=(section (:standard-properties [7097 7097 7097 8154 8154 0 nil section element t nil 7097 8154 nil nil nil nil #73#]))])) 0] [nil nil #75# 0] (src-block (:standard-properties [7154 7154 nil nil 8154 1 nil nil element t nil nil nil nil nil nil nil #76#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package embark\12    :ensure t\12\12    :bind\12    ((\"C-,\" . embark-act)         ;; pick some comfortable binding\12     (\"C-M-,\" . embark-dwim)        ;; good alternative: M-.\12     (\"C-h B\" . embark-bindings)) ;; alternative for `describe-bindings'\12\12    :init\12\12    ;; Optionally replace the key help with a completing-read interface\12    (setq prefix-help-command #'embark-prefix-help-command)\12\12    :config\12    (keymap-set minibuffer-local-map \"M-k\" \"C-. k y\")\12    ;; Hide the mode line of the Embark live/completions buffers\12    (add-to-list 'display-buffer-alist\12                 '(\"\\\\`\\\\*Embark Collect \\\\(Live\\\\|Completions\\\\)\\\\*\"\12                   nil\12                   (window-parameters (mode-line-format . none)))))\12\12  ;; Consult users will also want the embark-consult package.\12  (use-package embark-consult\12    :ensure t ; only need to install it, embark loads it after consult if found\12    :hook\12    (embark-collect-mode . consult-preview-at-point-mode))\12")) 0] [nil nil (src-block (:standard-properties [8165 8165 nil nil 8338 0 nil planning element t nil nil nil nil nil nil nil #77=(section (:standard-properties [8165 8165 8165 8338 8338 0 nil section element t nil 8165 8338 nil nil nil nil #75#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package embrace\12    :defer t)\12  (global-set-key (kbd \"C-.\") #'embrace-commander)\12  (add-hook 'org-mode-hook #'embrace-org-mode-hook)\12")) 0] #77# -1] [[[nil nil #79=(section (:standard-properties [8348 8348 8348 8505 8505 0 nil section element t nil 8348 8505 nil nil nil nil #78#])) 0] [nil nil (src-block (:standard-properties [8406 8406 nil nil 8505 0 nil nil element t nil nil nil nil nil nil nil #79#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package beacon\12    :defer t\12    :init\12    (beacon-mode 1))\12")) 0] (paragraph (:standard-properties [8348 8348 8348 8405 8406 1 nil planning element t nil nil nil nil nil nil nil #79#])) 0] [nil nil #80# 0] #11# -1] #78# 0] [[[[nil nil (src-block (:standard-properties [8540 8540 nil nil 8745 0 nil planning element t nil nil nil nil nil nil nil #87=(section (:standard-properties [8540 8540 8540 8745 8745 0 nil section element t nil 8540 8745 nil nil nil nil #80#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun rr/move-line-down ()\12    (interactive)\12    (forward-line 1)\12    (transpose-lines 1)\12    (forward-line -1))\12\12  (global-set-key (kbd \"M-<down>\") 'rr/move-line-down)\12")) 0] [nil nil #83=(section (:standard-properties [8762 8762 8762 8942 8942 0 nil section element t nil 8762 8942 nil nil nil nil #81#])) 0] #81# 0] [nil nil #82# 0] (src-block (:standard-properties [8762 8762 nil nil 8942 0 nil planning element t nil nil nil nil nil nil nil #83#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun rr/move-line-up ()\12    (interactive)\12    (transpose-lines 1)\12    (forward-line -2))\12  \12  (global-set-key (kbd \"M-<up>\") 'rr/move-line-up)\12")) -1] [[nil [nil nil (src-block (:standard-properties [9084 9084 nil nil 9776 1 nil nil element t nil nil nil nil nil nil nil #84=(section (:standard-properties [8952 8952 8952 9776 9776 0 nil section element t nil 8952 9776 nil nil nil nil #82#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package popper\12    :after projectile\12    :init\12    (setq popper-reference-buffers\12          '(\"\\\\*Messages\\\\*\"\12            \"^\\\\*Warnings\\\\*\"\12            \"^\\\\*IBuffer\\\\*\"\12            \"^\\\\*Compile-Log\\\\*\"\12            \"^\\\\*Backtrace\\\\*\"\12            \"[Oo]utput\\\\*$\"\12            \"\\\\*Help\\\\*\"\12            \"\\\\*helpful\\\\*\"\12            \"\\\\*vterm\\\\*\"\12            \"\\\\*Excorporate\\\\*\"\12            \"\\\\*xref\\\\*\"\12            eat-mode\12            help-mode\12            helpful-mode\12            compilation-mode\12            org-roam-mode\12            term-mode\12            vterm-mode)\12          popper-group-function #'popper-group-by-projectile)\12    (popper-mode +1))\12")) 0] (paragraph (:standard-properties [8952 8952 8952 9083 9084 1 nil planning element t nil nil nil nil nil nil nil #84#])) 1] [[nil nil #85# 0] [nil nil (paragraph (:standard-properties [9815 9815 9815 10014 10015 1 nil planning element t nil nil nil nil nil nil nil #86=(section (:standard-properties [9815 9815 9815 10098 10098 0 nil section element t nil 9815 10098 nil nil nil nil #85#]))])) 0] #86# 0] #12# 0] #84# 0] #87# 0] [[[[nil nil #88# 0] [nil nil (paragraph (:standard-properties [10113 10113 10113 10296 10296 0 nil planning element t nil nil nil nil nil nil nil #89=(section (:standard-properties [10113 10113 10113 10654 10654 0 nil section element t nil 10113 10654 nil nil nil nil #88#]))])) 0] #89# 0] [[nil nil #13# 0] [nil [nil nil (paragraph (:standard-properties [10683 10683 10683 10799 10799 0 nil planning element t nil nil nil nil nil nil nil #90=(section (:standard-properties [10683 10683 10683 10799 10799 0 nil section element t nil 10683 10799 nil nil nil nil #14#]))])) 0] #90# 1] #14# 1] (src-block (:standard-properties [10296 10296 nil nil 10654 0 nil nil element t nil nil nil nil nil nil nil #89#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (keymap-global-set \"C-w\" 'backward-kill-word)\12  (keymap-global-set \"C-s\" 'save-buffer)\12  (keymap-global-set \"s-[\" 'persp-prev)\12  (keymap-global-set \"s-]\" 'persp-next)\12  (keymap-global-set \"s-r\" 'rr/revert-buffer-no-confirm)\12  (keymap-global-set \"M-o\" 'completion-at-point)\12  (keymap-global-set \"C-S-u\" 'universal-argument)\12")) 1] [[[[nil nil #92=(section (:standard-properties [10825 10825 10825 11064 11064 0 nil section element t nil 10825 11064 nil nil nil nil #91#])) 0] [nil nil (src-block (:standard-properties [10929 10929 nil nil 11064 0 nil nil element t nil nil nil nil nil nil nil #92#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun rr/meow-insert-at-start ()\12    (interactive)\12    (beginning-of-line)\12    (meow-insert-mode))\12")) 0] (paragraph (:standard-properties [10825 10825 10825 10929 10929 0 nil planning element t nil nil nil nil nil nil nil #92#])) 0] [[nil nil #94=(section (:standard-properties [11088 11088 11088 11313 11313 0 nil section element t nil 11088 11313 nil nil nil nil #93#])) 0] [nil nil (src-block (:standard-properties [11186 11186 nil nil 11313 0 nil nil element t nil nil nil nil nil nil nil #94#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun rr/meow-insert-at-end ()\12    (interactive)\12    (end-of-line)\12    (meow-insert-mode))\12")) 0] (paragraph (:standard-properties [11088 11088 11088 11186 11186 0 nil planning element t nil nil nil nil nil nil nil #94#])) 0] #93# 0] [[[nil nil #96=(section (:standard-properties [11336 11336 11336 11591 11591 0 nil section element t nil 11336 11591 nil nil nil nil #95#])) 0] [nil nil (src-block (:standard-properties [11421 11421 nil nil 11591 0 nil nil element t nil nil nil nil nil nil nil #96#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun rr/meow-paste-before ()\12    (interactive)\12    (meow-open-above)\12    (beginning-of-line)\12    (meow-yank)\12    (meow-normal-mode))\12")) 0] (paragraph (:standard-properties [11336 11336 11336 11421 11421 0 nil planning element t nil nil nil nil nil nil nil #96#])) 0] [[nil nil #98=(section (:standard-properties [11623 11623 11623 12038 12038 0 nil section element t nil 11623 12038 nil nil nil nil #97#])) 0] [nil nil (src-block (:standard-properties [11737 11737 nil nil 12038 0 nil nil element t nil nil nil nil nil nil nil #98#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun rr/meow-delete-char-or-region ()\12    (interactive)\12    (cond\12     ((equal mark-active t)\12      (if (org-at-heading-p)\12          (org-cut-subtree)\12        (delete-region (region-beginning) (region-end))))\12     ((equal mark-active nil)\12      (delete-char 1))))\12")) 0] (paragraph (:standard-properties [11623 11623 11623 11737 11737 0 nil planning element t nil nil nil nil nil nil nil #98#])) 0] #97# 0] #95# 0] #91# 0] (src-block (:standard-properties [10015 10015 nil nil 10098 1 nil nil element t nil nil nil nil nil nil nil #86#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (global-set-key (kbd \"C-M-j\") 'consult-buffer)\12")) 0] #76# -1] [[[[[[[nil nil #100=(section (:standard-properties [12053 12053 12053 12614 12614 0 nil section element t nil 12053 12614 nil nil nil nil #99#])) 0] [nil nil (src-block (:standard-properties [12187 12187 nil nil 12614 0 nil nil element t nil nil nil nil nil nil nil #100#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun rr/copy-line ()\12    (interactive)\12    (save-excursion\12      (back-to-indentation)\12      (kill-ring-save\12       (point)\12       (line-end-position)))\12    (message \"1 line copied\"))\12\12  (defun rr/meow-save ()\12    (interactive)\12    (cond\12     ((org-at-heading-p)\12      (org-copy-subtree))\12     ((equal mark-active t)\12      (meow-save))\12     ((equal mark-active nil)\12      (rr/copy-line))))\12")) 0] (paragraph (:standard-properties [12053 12053 12053 12187 12187 0 nil planning element t nil nil nil nil nil nil nil #100#])) 0] [[nil nil #101# 0] [nil nil (paragraph (:standard-properties [12649 12649 12649 12810 12810 0 nil planning element t nil nil nil nil nil nil nil #102=(section (:standard-properties [12649 12649 12649 13506 13506 0 nil section element t nil 12649 13506 nil nil nil nil #101#]))])) 0] #102# 0] #15# 0] [[[nil nil #103# 0] [nil nil (src-block (:standard-properties [13524 13524 nil nil 13934 0 nil planning element t nil nil nil nil nil nil nil #104=(section (:standard-properties [13524 13524 13524 13934 13934 0 nil section element t nil 13524 13934 nil nil nil nil #103#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defvar meow-persp-keymap\12    (let ((keymap (make-keymap)))\12      (define-key keymap (kbd \"s\") #'persp-switch)\12      (define-key keymap (kbd \"b\") #'persp-switch-to-buffer)\12      (define-key keymap (kbd \"k\") #'persp-kill)\12      (define-key keymap (kbd \"r\") #'persp-rename)\12      keymap))\12\12  ;; define an alias for your keymap\12  (defalias 'meow-persp-keymap meow-persp-keymap)\12")) 0] #104# 0] [[nil nil #107=(section (:standard-properties [13953 13953 13953 14455 14455 0 nil section element t nil 13953 14455 nil nil nil nil #105#])) 0] [nil nil #106# 0] (src-block (:standard-properties [13953 13953 nil nil 14455 0 nil planning element t nil nil nil nil nil nil nil #107#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defvar meow-buffer-keymap\12    (let ((keymap (make-keymap)))\12      (define-key keymap (kbd \"k\") #'kill-buffer)\12      (define-key keymap (kbd \"r\") #'rr/revert-buffer-no-confirm)\12      (define-key keymap (kbd \"R\") #'revert-buffer)\12      (define-key keymap (kbd \"i\") #'ibuffer)\12      (define-key keymap (kbd \"o\") #'centaur-tabs-kill-other-buffers-in-current-group)\12      keymap))\12\12  ;; define an alias for your keymap\12  (defalias 'meow-buffer-keymap meow-buffer-keymap)\12")) 0] #105# 0] (src-block (:standard-properties [12810 12810 nil nil 13506 0 nil nil element t nil nil nil nil nil nil nil #102#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defvar meow-nav-keymap\12    (let ((keymap (make-keymap)))\12      (define-key keymap (kbd \"h\") #'beginning-of-line)\12      (define-key keymap (kbd \"l\") #'end-of-line)\12      (define-key keymap (kbd \"g\") #'beginning-of-buffer)\12      (define-key keymap (kbd \"e\") #'end-of-buffer)\12      (define-key keymap (kbd \"s\") #'back-to-indentation)\12      (define-key keymap (kbd \"y\") #'eglot-find-typeDefinition)\12      (define-key keymap (kbd \"i\") #'eglot-find-implementation)\12      keymap))\12\12  ;; define an alias for your keymap\12  (defalias 'meow-nav-keymap meow-nav-keymap)\12  ;;  (global-set-key (kbd \"C-x C-w\") 'nav-keymap)\12  ;;                              ^ note the quote\12")) 0] [[[[nil nil (src-block (:standard-properties [14472 14472 nil nil 14948 0 nil planning element t nil nil nil nil nil nil nil #117=(section (:standard-properties [14472 14472 14472 14948 14948 0 nil section element t nil 14472 14948 nil nil nil nil #106#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defvar meow-help-keymap\12    (let ((keymap (make-keymap)))\12      (define-key keymap (kbd \"f\") #'describe-function)\12      (define-key keymap (kbd \"v\") #'describe-variable)\12      (define-key keymap (kbd \"c\") #'describe-key-briefly)\12      (define-key keymap (kbd \"a\") #'apropos-command)\12      (define-key keymap (kbd \"b\") #'describe-bindings)\12      keymap))\12\12  ;; define an alias for your keymap\12  (defalias 'meow-help-keymap meow-help-keymap)\12")) 0] [nil nil #111=(section (:standard-properties [14966 14966 14966 15381 15381 0 nil section element t nil 14966 15381 nil nil nil nil #108#])) 0] #108# 0] [[nil nil #109# 0] [nil nil (src-block (:standard-properties [15400 15400 nil nil 15829 0 nil planning element t nil nil nil nil nil nil nil #110=(section (:standard-properties [15400 15400 15400 15829 15829 0 nil section element t nil 15400 15829 nil nil nil nil #109#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defvar meow-window-keymap\12    (let ((keymap (make-keymap)))\12      (define-key keymap (kbd \"v\") #'split-window-right)\12      (define-key keymap (kbd \"h\") #'split-window-below)\12      (define-key keymap (kbd \"c\") #'delete-window)\12      (define-key keymap (kbd \"w\") #'next-window-any-frame)\12      keymap))\12\12  ;; define an alias for your keymap\12  (defalias 'meow-window-keymap meow-window-keymap)\12")) 0] #110# 0] (src-block (:standard-properties [14966 14966 nil nil 15381 0 nil planning element t nil nil nil nil nil nil nil #111#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defvar meow-dired-keymap\12    (let ((keymap (make-keymap)))\12      (define-key keymap (kbd \"d\") #'dired)\12      (define-key keymap (kbd \"j\") #'dired-jump)\12      (define-key keymap (kbd \"J\") #'dired-jump-other-window)\12      (define-key keymap (kbd \"n\") #'dired-create-empty-file)\12      keymap))\12\12  ;; define an alias for your keymap\12  (defalias 'meow-dired-keymap meow-dired-keymap)\12")) 0] [[[nil nil #113=(section (:standard-properties [15846 15846 15846 16206 16206 0 nil section element t nil 15846 16206 nil nil nil nil #112#])) 0] [nil nil #16# 0] (src-block (:standard-properties [15846 15846 nil nil 16206 0 nil planning element t nil nil nil nil nil nil nil #113#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defvar meow-file-keymap\12    (let ((keymap (make-keymap)))\12      (define-key keymap (kbd \"f\") #'find-file)\12      (define-key keymap (kbd \"r\") #'consult-recent-file)\12      (define-key keymap (kbd \"p\") #'projectile-find-file)\12      keymap))\12\12  ;; define an alias for your keymap\12  (defalias 'meow-file-keymap meow-file-keymap)\12")) 0] [[nil nil #116=(section (:standard-properties [16250 16250 16250 16649 16649 0 nil section element t nil 16250 16649 nil nil nil nil #114#])) 0] [nil nil #115# 0] (src-block (:standard-properties [16250 16250 nil nil 16649 0 nil planning element t nil nil nil nil nil nil nil #116#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defvar meow-org-checklist-keymap\12    (let ((keymap (make-keymap)))\12      (define-key keymap (kbd \"x\") #'org-toggle-checkbox)\12      (define-key keymap (kbd \"s\") #'rr/org-sort-list-by-checkbox-type)\12      (define-key keymap (kbd \"S\") #'org-sort)\12      keymap))\12\12  ;; define an alias for your keymap\12  (defalias 'meow-org-checklist-keymap meow-org-checklist-keymap)\12")) 0] #114# 0] #112# 0] #117# 0] [[[[[nil nil (src-block (:standard-properties [16672 16672 nil nil 17149 0 nil planning element t nil nil nil nil nil nil nil #144=(section (:standard-properties [16672 16672 16672 17149 17149 0 nil section element t nil 16672 17149 nil nil nil nil #115#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defvar meow-org-clock-keymap\12    (let ((keymap (make-keymap)))\12      (define-key keymap (kbd \"i\") #'org-clock-in)\12      (define-key keymap (kbd \"o\") #'org-clock-out)\12      (define-key keymap (kbd \"c\") #'org-clock-cancel)\12      (define-key keymap (kbd \"d\") #'org-clock-display)\12      (define-key keymap (kbd \"g\") #'org-clock-goto)\12      keymap))\12\12  ;; define an alias for your keymap\12  (defalias 'meow-org-clock-keymap meow-org-clock-keymap)\12")) 0] [nil nil #121=(section (:standard-properties [17173 17173 17173 17667 17667 0 nil section element t nil 17173 17667 nil nil nil nil #118#])) 0] #118# 0] [[nil nil #119# 0] [nil nil (src-block (:standard-properties [17693 17693 nil nil 18129 0 nil planning element t nil nil nil nil nil nil nil #120=(section (:standard-properties [17693 17693 17693 18129 18129 0 nil section element t nil 17693 18129 nil nil nil nil #119#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defvar meow-org-deadline-keymap\12    (let ((keymap (make-keymap)))\12      (define-key keymap (kbd \"s\") #'org-schedule)\12      (define-key keymap (kbd \"d\") #'org-deadline)\12      (define-key keymap (kbd \"t\") #'org-time-stamp)\12      (define-key keymap (kbd \"T\") #'org-time-stamp-inactive)\12      keymap))\12\12  ;; define an alias for your keymap\12  (defalias 'meow-org-deadline-keymap meow-org-deadline-keymap)\12")) 0] #120# 0] (src-block (:standard-properties [17173 17173 nil nil 17667 0 nil planning element t nil nil nil nil nil nil nil #121#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defvar meow-org-narrow-keymap\12    (let ((keymap (make-keymap)))\12      (define-key keymap (kbd \"s\") #'org-narrow-to-subtree)\12      (define-key keymap (kbd \"b\") #'org-narrow-to-block)\12      (define-key keymap (kbd \"e\") #'org-narrow-to-element)\12      (define-key keymap (kbd \"r\") #'org-narrow-to-region)\12      (define-key keymap (kbd \"w\") #'widen)\12      keymap))\12\12  ;; define an alias for your keymap\12  (defalias 'meow-org-narrow-keymap meow-org-narrow-keymap)\12")) 0] [[[nil nil #124=(section (:standard-properties [18151 18151 18151 18641 18641 0 nil section element t nil 18151 18641 nil nil nil nil #122#])) 0] [nil nil #123# 0] (src-block (:standard-properties [18151 18151 nil nil 18641 0 nil planning element t nil nil nil nil nil nil nil #124#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defvar meow-org-link-keymap\12    (let ((keymap (make-keymap)))\12      (define-key keymap (kbd \"l\") #'org-insert-link)\12      (define-key keymap (kbd \"v\") #'crux-view-url)\12      (define-key keymap (kbd \"s\") #'org-store-link)\12      (define-key keymap (kbd \"h\") #'rr/org-insert-html-link)\12      (define-key keymap (kbd \"d\") #'rr/org-insert-link-dwim)\12      keymap))\12\12  ;; define an alias for your keymap\12  (defalias 'meow-org-link-keymap meow-org-link-keymap)\12")) 0] [[nil nil (src-block (:standard-properties [18665 18665 nil nil 19047 0 nil planning element t nil nil nil nil nil nil nil #126=(section (:standard-properties [18665 18665 18665 19047 19047 0 nil section element t nil 18665 19047 nil nil nil nil #123#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defvar meow-org-toggle-keymap\12    (let ((keymap (make-keymap)))\12      (define-key keymap (kbd \"h\") #'org-toggle-heading)\12      (define-key keymap (kbd \"i\") #'org-toggle-item)\12      (define-key keymap (kbd \"x\") #'org-toggle-checkbox)\12      keymap))\12\12  ;; define an alias for your keymap\12  (defalias 'meow-org-toggle-keymap meow-org-toggle-keymap)\12")) 0] [nil nil #143=(section (:standard-properties [19071 19071 19071 19511 19511 0 nil section element t nil 19071 19511 nil nil nil nil #125#])) 0] #125# 0] #126# 0] #122# 0] [[[[[nil nil #127# 0] [nil nil (src-block (:standard-properties [19533 19533 nil nil 20425 0 nil planning element t nil nil nil nil nil nil nil #128=(section (:standard-properties [19533 19533 19533 20425 20425 0 nil section element t nil 19533 20425 nil nil nil nil #127#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defvar meow-org-keymap\12    (let ((keymap (make-keymap)))\12      (define-key keymap (kbd \"x\") #'meow-org-checklist-keymap)\12      (define-key keymap (kbd \"c\") #'meow-org-clock-keymap)\12      (define-key keymap (kbd \"r\") #'meow-org-refile-keymap)\12      (define-key keymap (kbd \"n\") #'meow-org-narrow-keymap)\12      (define-key keymap (kbd \"d\") #'meow-org-deadline-keymap)\12      (define-key keymap (kbd \"l\") #'meow-org-link-keymap)\12      (define-key keymap (kbd \"t\") #'meow-org-toggle-keymap)\12      (define-key keymap (kbd \"N\") #'org-add-note)\12      (define-key keymap (kbd \"o\") #'consult-outline)\12      (define-key keymap (kbd \"q\") #'org-set-tags-command)\12      (define-key keymap (kbd \"e\") #'org-export-dispatch)\12      (define-key keymap (kbd \"a\") #'org-agenda)\12      keymap))\12\12  ;; define an alias for your keymap\12  (defalias 'meow-org-keymap meow-org-keymap)\12")) 0] #128# 0] [[nil nil #131=(section (:standard-properties [20441 20441 20441 20791 20791 0 nil section element t nil 20441 20791 nil nil nil nil #129#])) 0] [nil nil #130# 0] (src-block (:standard-properties [20441 20441 nil nil 20791 0 nil planning element t nil nil nil nil nil nil nil #131#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defvar meow-avy-keymap\12    (let ((keymap (make-keymap)))\12      (define-key keymap (kbd \"j\") #'avy-goto-char)\12      (define-key keymap (kbd \"w\") #'avy-goto-word-1)\12      (define-key keymap (kbd \"l\") #'avy-goto-line)\12      keymap))\12\12  ;; define an alias for your keymap\12  (defalias 'meow-avy-keymap meow-avy-keymap)\12")) 0] #129# 0] [[[nil nil (src-block (:standard-properties [20811 20811 nil nil 21472 0 nil planning element t nil nil nil nil nil nil nil #135=(section (:standard-properties [20811 20811 20811 21472 21472 0 nil section element t nil 20811 21472 nil nil nil nil #130#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defvar meow-project-keymap\12    (let ((keymap (make-keymap)))\12      (define-key keymap (kbd \"f\") #'project-find-file)\12      (define-key keymap (kbd \"D\") #'project-find-dir)\12      (define-key keymap (kbd \"d\") #'project-dired)\12      (define-key keymap (kbd \"m\") #'magit-project-status)\12      (define-key keymap (kbd \"k\") #'project-kill-buffers)\12      (define-key keymap (kbd \"s\") #'project-switch-project)\12      (define-key keymap (kbd \"c\") #'consult-project-buffer)\12      (define-key keymap (kbd \"/\") #'consult-ripgrep)\12      keymap))\12\12  ;; define an alias for your keymap\12  (defalias 'meow-project-keymap meow-project-keymap)\12")) 0] [nil nil #134=(section (:standard-properties [21498 21498 21498 22163 22163 0 nil section element t nil 21498 22163 nil nil nil nil #132#])) 0] #132# 0] [[nil nil #17# 0] [nil nil #142=(section (:standard-properties [22208 22208 22208 22725 22725 0 nil section element t nil 22208 22725 nil nil nil nil #133#])) 0] #133# 0] (src-block (:standard-properties [21498 21498 nil nil 22163 0 nil planning element t nil nil nil nil nil nil nil #134#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defvar meow-eglot-keymap\12    (let ((keymap (make-keymap)))\12      (define-key keymap (kbd \"a\") #'eglot-code-actions)\12      (define-key keymap (kbd \"f\") #'project-find-file)\12      (define-key keymap (kbd \"n\") #'flymake-goto-next-error)\12      (define-key keymap (kbd \"p\") #'flymake-goto-prev-error)\12      (define-key keymap (kbd \"s\") #'flymake-show-project-diagnostics)\12      (define-key keymap (kbd \"r\") #'eglot-rename)\12      (define-key keymap (kbd \"R\") #'eglot-reconnect)\12      (define-key keymap (kbd \"c\") #'consult-flymake)\12      keymap))\12\12  ;; define an alias for your keymap\12  (defalias 'meow-eglot-keymap meow-eglot-keymap)\12")) 0] #135# 0] [[[nil nil #136# 0] [nil nil (src-block (:standard-properties [22743 22743 nil nil 23254 0 nil planning element t nil nil nil nil nil nil nil #137=(section (:standard-properties [22743 22743 22743 23254 23254 0 nil section element t nil 22743 23254 nil nil nil nil #136#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defvar meow-util-keymap\12    (let ((keymap (make-keymap)))\12      (define-key keymap (kbd \"r\") #'restart-emacs)\12      (define-key keymap (kbd \"h\") #'meow-highlight-keymap)\12      (define-key keymap (kbd \"g\") #'magit-status)\12      (define-key keymap (kbd \"k\") #'magit-discard)\12      (define-key keymap (kbd \"f\") #'free-keys)\12      (define-key keymap (kbd \"w\") #'writegood-mode)\12      keymap))\12\12  ;; define an alias for your keymap\12  (defalias 'meow-util-keymap meow-util-keymap)\12")) 0] #137# 0] [[[nil nil #139=(section (:standard-properties [23269 23269 23269 27081 27081 0 nil section element t nil 23269 27081 nil nil nil nil #138#])) 0] [nil nil (src-block (:standard-properties [23467 23467 nil nil 27081 0 nil nil element t nil nil nil nil nil nil nil #139#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun meow-setup ()\12    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)\12    (meow-motion-overwrite-define-key\12     '(\"j\" . meow-next)\12     '(\"k\" . meow-prev)\12     '(\"<escape>\" . ignore))\12    (meow-leader-define-key\12     ;; SPC j/k will run the original command in MOTION state.\12     '(\"j\" . \"H-j\")\12     '(\"k\" . \"H-k\")\12     ;; Use SPC (0-9) for digit arguments.\12     '(\"1\" . meow-digit-argument)\12     '(\"2\" . meow-digit-argument)\12     '(\"3\" . meow-digit-argument)\12     '(\"4\" . meow-digit-argument)\12     '(\"5\" . meow-digit-argument)\12     '(\"6\" . meow-digit-argument)\12     '(\"7\" . meow-digit-argument)\12     '(\"8\" . meow-digit-argument)\12     '(\"9\" . meow-digit-argument)\12     '(\"0\" . meow-digit-argument)\12     '(\"`\" . meow-last-buffer)\12     '(\"RET\" . consult-bookmark)\12     '(\"b\" . meow-buffer-keymap)\12     '(\"h\" . meow-help-keymap)  \12     '(\"s\" . meow-persp-keymap)\12     '(\"d\" . meow-dired-keymap)\12     '(\"j\" . meow-avy-keymap)\12     '(\"f\" . meow-file-keymap)\12     '(\"l\" . meow-eglot-keymap)\12     '(\"p\" . meow-project-keymap)\12     '(\"u\" . meow-util-keymap)\12     '(\"w\" . meow-window-keymap)\12     '(\"o\" . meow-org-keymap)\12     '(\"/\" . meow-keypad-describe-key)\12     '(\"z\" . scratch-buffer)\12     '(\"?\" . meow-cheatsheet))\12    (meow-normal-define-key\12     '(\"0\" . meow-expand-0)\12     '(\"9\" . meow-expand-9)\12     '(\"8\" . meow-expand-8)\12     '(\"7\" . meow-expand-7)\12     '(\"6\" . meow-expand-6)\12     '(\"5\" . meow-expand-5)\12     '(\"4\" . meow-expand-4)\12     '(\"3\" . meow-expand-3)\12     '(\"2\" . meow-expand-2)\12     '(\"1\" . meow-expand-1)\12     '(\"-\" . negative-argument)\12     '(\";\" . meow-reverse)\12     '(\",\" . meow-inner-of-thing)\12     '(\".\" . meow-bounds-of-thing)\12     '(\"/\" . isearch-forward)\12     '(\"C-;\" . popper-kill-latest-popup)\12     '(\"C-S-s\" . consult-line)\12     '(\"C-u\" . meow-page-up)\12     '(\"C-d\" . meow-page-down)\12     '(\"C-w\" . backward-kill-word)\12     '(\"RET\" . +org/dwim-at-point)\12     '(\"TAB\" . +org-cycle-only-current-subtree-h)\12     ;; '(\"C-n\" . rr/org-show-next-heading-tidily)\12     ;; '(\"C-p\" . rr/org-show-previous-heading-tidily)\12     '(\"t\" . org-todo)\12     '(\"[\" . meow-beginning-of-thing)\12     '(\"]\" . meow-end-of-thing)\12     '(\"a\" . meow-append)\12     '(\"A\" . rr/meow-insert-at-end)\12     '(\"b\" . meow-back-word)\12     '(\"B\" . meow-back-symbol)\12     '(\"c\" . meow-change)\12     '(\"d\" . rr/meow-delete-char-or-region)\12     '(\"D\" . meow-backward-delete)\12     '(\"e\" . meow-block)\12     '(\"E\" . meow-to-block)\12     '(\"f\" . meow-find)\12     '(\"F\" . eglot-code-actions)\12     '(\"g\" . meow-nav-keymap)\12     '(\"G\" . meow-grab)\12     '(\"h\" . meow-left)\12     '(\"H\" . meow-left-expand)\12     '(\"i\" . meow-insert)\12     '(\"I\" . rr/meow-insert-at-start)\12     '(\"j\" . meow-next)\12     '(\"J\" . meow-next-expand)\12     '(\"k\" . meow-prev)\12     '(\"K\" . meow-prev-expand)\12     '(\"l\" . meow-right)\12     '(\"L\" . meow-right-expand)\12     '(\"m\" . meow-mark-word)\12     '(\"M\" . meow-mark-symbol)\12     '(\"n\" . meow-search)\12     '(\"N\" . flymake-goto-next-error)\12     '(\"o\" . meow-open-below)\12     '(\"O\" . meow-open-above)\12     '(\"p\" . meow-yank)\12     '(\"P\" . rr/meow-paste-before)\12     '(\"Q\" . meow-goto-line)\12     '(\"r\" . meow-replace)\12     '(\"R\" . meow-swap-grab)\12     '(\"s\" . meow-kill)\12     '(\"T\" . meow-till)\12     '(\"u\" . undo)\12     '(\"U\" . undo-redo)\12     '(\"v\" . meow-visit)\12     '(\"w\" . meow-next-word)\12     '(\"W\" . meow-next-symbol)\12     '(\"x\" . meow-line)\12     '(\"X\" . org-capture)\12     '(\"y\" . rr/meow-save)\12     '(\"Y\" . meow-sync-grab)\12     '(\"z\" . meow-pop-selection)\12     '(\"'\" . repeat)\12     '(\";\" . meow-cancel-selection)\12     '(\":\" . meow-reverse)\12     '(\"<escape>\" . ignore)))\12")) 0] (paragraph (:standard-properties [23269 23269 23269 23467 23467 0 nil planning element t nil nil nil nil nil nil nil #139#])) 0] [nil [nil nil (src-block (:standard-properties [27104 27104 nil nil 27564 0 nil planning element t nil nil nil nil nil nil nil #141=(section (:standard-properties [27104 27104 27104 27564 27564 0 nil section element t nil 27104 27564 nil nil nil nil #140#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package meow\12    :custom\12    (meow-use-cursor-position-hack t)\12    (meow-use-clipboard t)\12    (meow-goto-line-function 'consult-goto-line)\12    :config\12    (setq meow--kbd-delete-char \"<deletechar>\")\12    (meow-thing-register 'angle '(regexp \"<\" \">\") '(regexp \"<\" \">\"))\12    (add-to-list 'meow-char-thing-table '(?a . angle))\12    (meow-global-mode 1)\12    (meow-setup))\12\12  (global-set-key (kbd \"C-<tab>\") 'meow-last-buffer)\12")) 0] #141# 1] #140# 0] #138# 1] (src-block (:standard-properties [22208 22208 nil nil 22725 0 nil planning element t nil nil nil nil nil nil nil #142#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defvar meow-highlight-keymap\12    (let ((keymap (make-keymap)))\12      (define-key keymap (kbd \"t\") #'highlight-symbol-mode)\12      (define-key keymap (kbd \"n\") #'highlight-symbol-next)\12      (define-key keymap (kbd \"p\") #'highlight-symbol-prev)\12      (define-key keymap (kbd \"r\") #'highlight-symbol-remove-all)\12      (define-key keymap (kbd \"c\") #'highlight-symbol-count)\12      keymap))\12\12  ;; define an alias for your keymap\12  (defalias 'meow-highlight-keymap meow-highlight-keymap)\12")) 0] (src-block (:standard-properties [19071 19071 nil nil 19511 0 nil planning element t nil nil nil nil nil nil nil #143#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defvar meow-org-refile-keymap\12    (let ((keymap (make-keymap)))\12      (define-key keymap (kbd \"r\") #'org-refile)\12      (define-key keymap (kbd \"c\") #'org-refile-copy)\12      (define-key keymap (kbd \".\") #'+org/refile-to-current-file)\12      (define-key keymap (kbd \"A\") #'org-archive-subtree)\12      keymap))\12\12  ;; define an alias for your keymap\12  (defalias 'meow-org-refile-keymap meow-org-refile-keymap)\12")) 1] #144# 1] [[[[[[nil nil #145# 0] [nil nil (paragraph (:standard-properties [27599 27599 27599 27655 27656 1 nil planning element t nil nil nil nil nil nil nil #146=(section (:standard-properties [27599 27599 27599 28870 28870 0 nil section element t nil 27599 28870 nil nil nil nil #145#]))])) 0] #146# 0] [[nil nil (src-block (:standard-properties [28161 28161 nil nil 28870 1 nil nil element t nil nil nil nil nil nil nil #146#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package vertico\12    :defer t\12    :bind (:map minibuffer-local-map\12                (\"<Backspace>\" . rr/minibuffer-backward-kill))\12    :custom\12    (vertico-cycle t)\12    :init\12    (vertico-mode +1)\12    (setq completion-styles '(flex partial-completion)\12          completion-ignore-case t\12          completion-category-defaults nil\12          completion-category-overrides nil))\12\12  (define-key vertico-map \"?\" #'minibuffer-completion-help)\12  (define-key vertico-map (kbd \"M-RET\") #'minibuffer-force-complete-and-exit)\12  (define-key vertico-map (kbd \"M-TAB\") #'minibuffer-complete)\12\12  (use-package savehist\12    :custom\12    (history-length 25)\12    :init\12    (savehist-mode))\12")) 0] nil #147# -1] (src-block (:standard-properties [27656 27656 nil nil 28161 1 nil nil element t nil nil nil nil nil nil nil #146#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun rr/minibuffer-backward-kill (arg)\12    \"When minibuffer is completing a file name delete up to parent\12  folder, otherwise delete a word\"\12    (interactive \"p\")\12    (if minibuffer-completing-file-name\12        ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608\12        (if (string-match-p \"/.\" (minibuffer-contents))\12            (zap-up-to-char (- arg) ?/)\12          (delete-minibuffer-contents))\12      (delete-word (- arg))))\12\12")) 0] [[nil nil (paragraph (:standard-properties [28884 28884 28884 29084 29085 1 nil planning element t nil nil nil nil nil nil nil #148=(section (:standard-properties [28884 28884 28884 29561 29561 0 nil section element t nil 28884 29561 nil nil nil nil #147#]))])) 0] nil (src-block (:standard-properties [29085 29085 nil nil 29561 1 nil nil element t nil nil nil nil nil nil nil #148#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package marginalia\12    :after vertico\12    :custom\12    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))\12    (marginalia-align 'right)\12    (marginalia-align-offset -5)\12    :init\12    (marginalia-mode))\12\12  (use-package all-the-icons-completion\12    :after (marginalia all-the-icons)\12    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)\12    :init\12    (all-the-icons-completion-mode))\12")) -1] #148# -1] [[[[[nil nil #150=(section (:standard-properties [29574 29574 29574 29893 29893 0 nil section element t nil 29574 29893 nil nil nil nil #149#])) 0] nil (paragraph (:standard-properties [29574 29574 29574 29636 29637 1 nil planning element t nil nil nil nil nil nil nil #150#])) -1] [[nil nil #19# 0] nil #154=(section (:standard-properties [29904 29904 29904 29959 29959 0 nil section element t nil 29904 29959 nil nil nil nil #19#])) -1] (src-block (:standard-properties [29637 29637 nil nil 29893 1 nil nil element t nil nil nil nil nil nil nil #150#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package orderless\12    :after vertico\12    :init\12    (setq completion-styles '(orderless)\12          completion-category-defaults nil\12          completion-category-overrides '((file (styles . (partial-completion))))))\12")) 0] [[[nil nil #151# 0] nil #152=(section (:standard-properties [29985 29985 29985 30650 30650 0 nil section element t nil 29985 30650 nil nil nil nil #151#])) -1] [[nil nil (src-block (:standard-properties [30037 30037 nil nil 30650 0 nil nil element t nil nil nil nil nil nil nil #152#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package consult\12    :defer t\12    :hook (completion-list-mode . consult-preview-at-point-mode)\12    :init\12    :config\12    (consult-customize\12     consult-theme\12     :preview-key '(:debounce 0.2 any)\12     consult-ripgrep consult-git-grep consult-grep\12     consult-bookmark consult-recent-file consult-xref\12     consult--source-bookmark consult--source-recent-file\12     consult--source-project-recent-file\12     :preview-key \"M-.\")\12    ;; Optionally configure the narrowing key.\12    ;; Both < and C-+ work reasonably well.\12    (setq consult-narrow-key \"<\") ;; (kbd \"C-+\")\12    )\12")) 0] nil #153# -1] (paragraph (:standard-properties [29985 29985 29985 30036 30037 1 nil planning element t nil nil nil nil nil nil nil #152#])) 0] (paragraph (:standard-properties [29904 29904 29904 29959 29959 0 nil planning element t nil nil nil nil nil nil nil #154#])) 0] [[[nil nil (paragraph (:standard-properties [30659 30659 30659 30742 30742 0 nil planning element t nil nil nil nil nil nil nil #155=(section (:standard-properties [30659 30659 30659 32052 32052 0 nil section element t nil 30659 32052 nil nil nil nil #153#]))])) 0] nil (src-block (:standard-properties [30742 30742 nil nil 32052 0 nil nil element t nil nil nil nil nil nil nil #155#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package corfu\12    :defer t\12    :ensure t\12    ;; Optional customizations\12    :custom\12    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'\12    (corfu-auto t)                 ;; Enable auto completion\12    (corfu-separator ?\\s)          ;; Orderless field separator\12    (corfu-quit-at-boundary 'separator)\11;; Never quit at completion boundary\12    (corfu-quit-no-match 'separator)      ;; Never quit, even if there is no match\12    (corfu-preview-current 'insert)    ;; Disable current candidate preview\12    (corfu-preselect-first nil)    ;; Disable candidate preselection\12    (corfu-on-exact-match nil)     ;; Configure handling of exact matches\12    (corfu-echo-documentation nil) ;; Disable documentation in the echo area\12    (corfu-scroll-margin 5)        ;; Use scroll margin\12\12    ;; Enable Corfu only for certain modes.\12    :hook ((prog-mode . corfu-mode)\12           (shell-mode . corfu-mode)\12           (eshell-mode . corfu-mode)\12           (typescript-mode . corfu-mode)\12           (typescript-ts-mode . corfu-mode))\12\12    ;; Recommended: Enable Corfu globally.\12    ;; This is recommended since Dabbrev can be used globally (M-/).\12    ;; See also `corfu-excluded-modes'.\12    :init\12    (global-corfu-mode))\12\12  (setq tab-always-indent 'complete)\12")) -1] [[[nil nil #157=(section (:standard-properties [32065 32065 32065 32518 32518 0 nil section element t nil 32065 32518 nil nil nil nil #156#])) 0] [nil nil (src-block (:standard-properties [32128 32128 nil nil 32518 0 nil nil element t nil nil nil nil nil nil nil #157#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package kind-icon\12    :after corfu\12    :custom\12    (kind-icon-use-icons t)\12    (kind-icon-default-face 'corfu-default)\12    (kind-icon-blend-background nil)\12    (kind-icon-blend-frac 0.08)\12    (svg-lib-icons-dir (no-littering-expand-var-file-name \"svg-lib/cache/\"))\12    :config\12    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))\12")) 0] (paragraph (:standard-properties [32065 32065 32065 32127 32128 1 nil planning element t nil nil nil nil nil nil nil #157#])) 0] [nil nil #158# 0] #20# -1] #156# 1] #155# 0] #149# 1] [[[[nil nil (paragraph (:standard-properties [32585 32585 32585 32933 32934 1 nil planning element t nil nil nil nil nil nil nil #160=(section (:standard-properties [32585 32585 32585 33301 33301 0 nil section element t nil 32585 33301 nil nil nil nil #158#]))])) 0] [nil nil #159# 0] (src-block (:standard-properties [32934 32934 nil nil 33301 0 nil nil element t nil nil nil nil nil nil nil #160#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package helpful\12    :defer t\12    :commands (helpful-callable helpful-variable helpful-command helpful-key helpful-function)\12    :bind\12    ([remap describe-command] . helpful-command)\12    ([remap describe-function] . helpful-callable)\12    ([remap describe-variable] . helpful-variable)\12    ([remap describe-key] . helpful-key))\12")) 0] [[nil nil (paragraph (:standard-properties [33309 33309 33309 33399 33400 1 nil planning element t nil nil nil nil nil nil nil #162=(section (:standard-properties [33309 33309 33309 33467 33467 0 nil section element t nil 33309 33467 nil nil nil nil #159#]))])) 0] [nil nil #161# 0] (src-block (:standard-properties [33400 33400 nil nil 33467 0 nil nil element t nil nil nil nil nil nil nil #162#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package crux\12    :defer t)\12")) 0] #162# 0] [[[[nil nil (paragraph (:standard-properties [33480 33480 33480 33595 33596 1 nil planning element t nil nil nil nil nil nil nil #164=(section (:standard-properties [33480 33480 33480 33668 33668 0 nil section element t nil 33480 33668 nil nil nil nil #161#]))])) 0] [nil nil #163# 0] (src-block (:standard-properties [33596 33596 nil nil 33668 0 nil nil element t nil nil nil nil nil nil nil #164#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package free-keys\12    :defer t)\12")) 0] [[nil nil (paragraph (:standard-properties [33676 33676 33676 33703 33704 1 nil planning element t nil nil nil nil nil nil nil #165=(section (:standard-properties [33676 33676 33676 35137 35137 0 nil section element t nil 33676 35137 nil nil nil nil #163#]))])) 0] [nil nil #21# 0] (src-block (:standard-properties [33704 33704 nil nil 35137 0 nil nil element t nil nil nil nil nil nil nil #165#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package dired\12    :straight (:type built-in)\12    :defer t\12    :commands (dired dired-jump)\12    :bind (:map dired-mode-map\12                (\"H\" . dired-omit-mode)\12                (\"h\" . dired-single-up-directory)\12                (\"l\" . dired-single-buffer)\12                (\"s-[\" . persp-prev)\12                (\"s-]\" . persp-next)\12                (\"M-j\" . persp-prev)\12                (\"M-k\" . persp-next))\12    :config\12    (setq\12     ;; https://github.com/d12frosted/homebrew-emacs-plus/issues/383\12     insert-directory-program \"/opt/homebrew/bin/gls\"\12     dired-listing-switches \"-tagho --group-directories-first\"\12     dired-omit-files \"^\\\\.[^.].*\"\12     dired-omit-verbose nil\12     dired-hide-details-hide-symlink-targets nil\12     dired-kill-when-opening-new-dired-buffer t\12     delete-by-moving-to-trash t)\12\12    (autoload 'dired-omit-mode \"dired-x\")\12\12    (add-hook 'dired-load-hook\12              (lambda ()\12                (interactive)\12                (dired-collapse)))\12\12    (add-hook 'dired-mode-hook\12              (lambda ()\12                (interactive)\12                (dired-omit-mode 1)\12                (hl-line-mode 1)\12                (diredfl-mode 1)\12                (diff-hl-dired-mode 1)))\12\12    (use-package dired-single\12      :defer t)\12\12    (use-package dired-ranger\12      :defer t)\12\12    (use-package dired-collapse\12      :defer t)\12\12    (use-package diredfl\12      :defer t)\12    )\12")) 0] #165# 0] [[[nil nil #167=(section (:standard-properties [35165 35165 35165 35552 35552 0 nil section element t nil 35165 35552 nil nil nil nil #166#])) 0] [nil nil (src-block (:standard-properties [35392 35392 nil nil 35552 1 nil nil element t nil nil nil nil nil nil nil #167#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package diff-hl)\12  (global-diff-hl-mode)\12  (diff-hl-flydiff-mode 1)\12  (diff-hl-dired-mode 1)\12  (diff-hl-margin-mode 1)\12")) 0] (paragraph (:standard-properties [35165 35165 35165 35391 35392 1 nil planning element t nil nil nil nil nil nil nil #167#])) 0] [[nil nil #169=(section (:standard-properties [35561 35561 35561 35806 35806 0 nil section element t nil 35561 35806 nil nil nil nil #168#])) 0] [nil nil (src-block (:standard-properties [35626 35626 nil nil 35806 0 nil nil element t nil nil nil nil nil nil nil #169#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package magit\12    :commands magit-status\12    :custom\12    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))\12")) 0] (paragraph (:standard-properties [35561 35561 35561 35625 35626 1 nil planning element t nil nil nil nil nil nil nil #169#])) 0] #168# 0] #166# 0] #164# 1] #160# -1] #18# 0] #99# 0] [[[[[[[[nil nil #170# 0] [nil nil (src-block (:standard-properties [35826 35826 nil nil 35892 0 nil planning element t nil nil nil nil nil nil nil #171=(section (:standard-properties [35826 35826 35826 35892 35892 0 nil section element t nil 35826 35892 nil nil nil nil #170#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package eat\12    :defer t)\12")) 0] #171# 0] [[nil nil #172# 0] [nil nil (paragraph (:standard-properties [35922 35922 35922 36053 36054 1 nil planning element t nil nil nil nil nil nil nil #173=(section (:standard-properties [35922 35922 35922 36283 36283 0 nil section element t nil 35922 36283 nil nil nil nil #172#]))])) 0] #173# 0] #22# 0] [[nil nil #174# 0] [nil nil (paragraph (:standard-properties [36317 36317 36317 36688 36689 1 nil planning element t nil nil nil nil nil nil nil #175=(section (:standard-properties [36317 36317 36317 36858 36858 0 nil section element t nil 36317 36858 nil nil nil nil #174#]))])) 0] #175# 0] (src-block (:standard-properties [36054 36054 nil nil 36283 0 nil nil element t nil nil nil nil nil nil nil #173#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package treesit-auto\12    :straight t\12;    :defer t\12    :custom\12    (treesit-auto-install 'prompt)\12    :config\12    (treesit-auto-add-to-auto-mode-alist 'all)\12    (global-treesit-auto-mode))\12")) -1] [[[nil nil #176# 0] [nil nil (paragraph (:standard-properties [36868 36868 36868 37058 37059 1 nil planning element t nil nil nil nil nil nil nil #177=(section (:standard-properties [36868 36868 36868 37709 37709 0 nil section element t nil 36868 37709 nil nil nil nil #176#]))])) 0] #177# 0] [[nil nil #23# 0] [[nil nil #179=(section (:standard-properties [37738 37738 37738 37969 37969 0 nil section element t nil 37738 37969 nil nil nil nil #178#])) 0] [nil nil (src-block (:standard-properties [37800 37800 nil nil 37969 1 nil nil element t nil nil nil nil nil nil nil #179#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package prettier\12    :defer t)\12  (setq prettier-mode-sync-config-flag nil)\12  (add-hook 'after-init-hook #'global-prettier-mode)\12")) 0] (paragraph (:standard-properties [37738 37738 37738 37800 37800 0 nil planning element t nil nil nil nil nil nil nil #179#])) 0] #178# 1] (src-block (:standard-properties [37059 37059 nil nil 37709 0 nil nil element t nil nil nil nil nil nil nil #177#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package jsonrpc\12    :defer t)\12\12  (use-package typescript-ts-mode\12    :defer t\12    :mode \"\\\\.ts\\\\'\"\12    :hook (typescript-ts-mode . eglot-ensure))\12\12  (use-package eglot\12    :defer t\12    :hook (\12           ((typescriptreact-mode typescript-ts-mode) . eglot-ensure)\12  \11\11 (go-ts-mode . eglot-ensure)\12           (typescriptreact-mode . flymake-popon-mode)\12           )\12    :config\12    (setq eglot-confirm-server-initiated-edits nil)\12    (setq eglot-ignored-server-capabilities nil)\12    (add-to-list 'eglot-server-programs\12  \11\11\11   '((typescript-ts-mode typescript-mode) . (\"typescript-language-server\" \"--stdio\"))))\12")) 1] (src-block (:standard-properties [36689 36689 nil nil 36858 1 nil nil element t nil nil nil nil nil nil nil #175#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (straight-use-package\12   '(flymake-popon\12     :type git\12     :repo \"https://codeberg.org/akib/emacs-flymake-popon.git\")\12   :defer t)\12")) 0] [[[nil [nil nil #180# 0] #25# 1] [[nil nil (paragraph (:standard-properties [38011 38011 38011 38149 38150 1 nil planning element t nil nil nil nil nil nil nil #182=(section (:standard-properties [38011 38011 38011 38415 38415 0 nil section element t nil 38011 38415 nil nil nil nil #180#]))])) 0] [nil nil #181# 0] (src-block (:standard-properties [38150 38150 nil nil 38415 1 nil nil element t nil nil nil nil nil nil nil #182#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package perspective\12    :defer t\12    :bind ((\"C-x k\" . persp-kill-buffer*))\12    :custom\12    (persp-mode-prefix-key (kbd \"C-c M-p\"))\12    (persp-initial-frame-name \"main\")\12    (persp-sort 'created)\12    :init\12    (persp-mode))\12")) 0] #182# 0] [[[nil nil (paragraph (:standard-properties [38432 38432 38432 38495 38496 1 nil planning element t nil nil nil nil nil nil nil #184=(section (:standard-properties [38432 38432 38432 38738 38738 0 nil section element t nil 38432 38738 nil nil nil nil #181#]))])) 0] [nil nil #183# 0] (src-block (:standard-properties [38496 38496 nil nil 38738 1 nil nil element t nil nil nil nil nil nil nil #184#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (add-hook 'ibuffer-hook\12            (lambda ()\12              (persp-ibuffer-set-filter-groups)\12              (unless (eq ibuffer-sorting-mode 'alphabetic)\12                (ibuffer-do-sort-by-alphabetic))))\12")) 0] [[nil nil (paragraph (:standard-properties [38758 38758 38758 38807 38808 1 nil planning element t nil nil nil nil nil nil nil #185=(section (:standard-properties [38758 38758 38758 38977 38977 0 nil section element t nil 38758 38977 nil nil nil nil #183#]))])) 0] [nil nil #26# 0] (src-block (:standard-properties [38808 38808 nil nil 38977 1 nil nil element t nil nil nil nil nil nil nil #185#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq persp-state-default-file (concat user-emacs-directory \"var/persp-auto-save\"))\12  (add-hook 'kill-emacs-hook #'persp-state-save)\12")) 0] #185# 0] #184# 0] #24# -1] [[[[[[nil nil #188=(section (:standard-properties [39009 39009 39009 41230 41230 0 nil section element t nil 39009 41230 nil nil nil nil #186#])) 0] [nil nil #187# 0] (src-block (:standard-properties [39009 39009 nil nil 41230 1 nil planning element t nil nil nil nil nil nil nil #188#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun rr/set-org-capture-templates ()\12    `((\"o\" \"Organize\")\12      (\"ot\" \"Task\" entry (file+olp, (rr/org-path \"organize.org\") \"Tasks\")\12       \"* TODO %?\\n%U\\n %i\" :kill-buffer t)\12      (\"oe\" \"Event\" entry (file+olp, (rr/org-path \"organize.org\") \"Events\")\12       \"* TODO %?\\n%U\\n %i\")\12      (\"og\" \"Guitar\" entry (file+olp, (rr/org-path \"organize.org\") \"Goals\" \"Guitar\" \"Practice Log\")\12       \"* %u\\n%?\")\12  \11\11\12      (\"w\" \"Work\")\12      (\"wt\" \"Work Task\" entry (file+olp, (rr/org-path \"work-tasks.org\") \"Tasks\")\12       \"* TODO %?\\n%U\\n %i\" :kill-buffer t)\12      (\"wd\" \"Deep Task\" entry (file+olp, (rr/org-path \"work-tasks.org\") \"All Tasks\" \"Deep\")\12       \"* TODO %?\\n%U\\n %i\" :kill-buffer t)\12      (\"ws\" \"Shallow Task\" entry (file+olp, (rr/org-path \"work-tasks.org\") \"All Tasks\" \"Shallow\")\12       \"* TODO %?\\n%U\\n %i\" :kill-buffer t)\12      (\"wi\" \"Work Inbox\" entry (file+olp, (rr/org-path \"work-tasks.org\") \"Inbox\")\12       \"* %?\\n%U\\n %i\")\12      (\"wm\" \"Work Meeting\" entry (file+headline, (rr/org-path \"work-tasks.org\") \"Meeting Notes\")\12       \"* %?\\n%U\\n %i\")\12      (\"wa\" \"Activity Log\" entry (file+olp+datetree, (rr/org-path \"work-tasks.org\") \"Activity Log\")\12       \"* %?\\n%U\\n %i\")\12\12  \11(\"m\" \"Meeting\")\12      (\"mm\" \"1:1 with Max\" entry (file+datetree, \"~/Documents/roam-notes/meetings/1on1/max.org\")\12       \"* %U\\n- %?\\n %i\" :kill-buffer t)\12      (\"mr\" \"1:1 with Rob\" entry (file+datetree, \"~/Documents/roam-notes/meetings/1on1/rob.org\")\12       \"* %U\\n- %?\\n %i\" :kill-buffer t)\12      (\"mj\" \"1:1 with Joseph\" entry (file+datetree, \"~/Documents/roam-notes/meetings/1on1/joseph.org\")\12       \"* %U\\n- %?\\n %i\" :kill-buffer t)\12  \11\12      (\"j\" \"Journal\" entry (file+datetree, (rr/org-path \"journal.org\"))\12       \"* %?\\n\")\12  \11\12      (\"n\" \"Notes\")\12      (\"nr\" \"Resource\" entry (file+olp, (rr/org-path \"refile.org\") \"Resources\")\12       \"* %?\\n%U\\n %i\")\12      (\"nc\" \"Curiosity\" entry (file+olp, (rr/org-path \"refile.org\") \"Curiosities\")\12       \"* %?\\n%U\\n %i\")\12      (\"no\" \"Other\" entry (file+olp, (rr/org-path \"refile.org\") \"Notes\")\12       \"* %?\\n%U\\n %i\")\12  \11\12      (\"l\" \"Life\")\12      (\"lj\" \"Journal\" entry (file+olp+datetree, (rr/org-path \"life.org\") \"Journal\") \"* %?\\n%U\\n %i\")\12      )\12    )\12")) 0] [nil nil (src-block (:standard-properties [41246 41246 nil nil 43384 1 nil planning element t nil nil nil nil nil nil nil #189=(section (:standard-properties [41246 41246 41246 43384 43384 0 nil section element t nil 41246 43384 nil nil nil nil #187#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun rr/org-path (path)\12    (expand-file-name path org-directory))\12\12  (defun rr/org-mode-setup ()\12    (org-indent-mode)\12    (variable-pitch-mode 1)\12    (auto-fill-mode 0)\12    (visual-line-mode)\12    (setq org-directory \"~/org-mode\")\12    (setq org-agenda-files (append (directory-files org-directory t \"\\\\.org$\") (rr/org-roam-list-notes-by-tag \"project\")))\12    (setq org-capture-templates (rr/set-org-capture-templates))\12    (setq org-todo-keywords\12          '((sequence \"TODO(t)\" \"STRT(s)\" \"WAIT(w)\" \"HOLD(h)\" \"IDEA(i)\" \"CODE(c)\" \"FDBK(f)\" \"|\" \"DONE(d!)\" \"KILL(k!)\")\12            ))\12    (setq org-id-link-to-org-use-id 'use-existing))\12\12  (use-package org\12    :demand t\12    :hook (org-mode . rr/org-mode-setup)\12    :config\12    ;;    (rr/org-mode-setup)\12    (setq org-ellipsis \" ▾\"\12          org-hide-emphasis-markers t\12          org-log-done 'time\12          org-log-into-drawer t\12          ;; org-adapt-indentation t\12          ;; org-element-use-cache nil\12          org-special-ctrl-a/e t\12          org-insert-heading-respect-content t\12          org-tags-column -70\12          org-agenda-start-with-log-mode t\12          org-agenda-skip-scheduled-if-done t\12          org-agenda-skip-deadline-if-done t\12          org-agenda-include-deadlines t\12          org-agenda-tags-column 100\12          org-agenda-include-diary t\12          org-catch-invisible-edits 'smart\12          org-fontify-whole-heading-line t\12          org-ctrl-k-protect-subtree t\12          org-cycle-separator-lines 0\12          org-refile-use-outline-path 'file\12          org-outline-path-complete-in-steps nil\12  \11\11org-tag-alist '(;; Places\12  \11\11\11\11\11\11(\"@home\" . ?H)\12  \11\11\11\11\11\11(\"@work\" . ?W)\12  \11\11\11\11\11\11;; Devices\12  \11\11\11\11\11\11(\"@phone\" . ?P)\12  \11\11\11\11\11\11(\"@computer\" . ?C)\12  \11\11\11\11\11\11;; Activities\12  \11\11\11\11\11\11(\"@writing\" . ?w)\12  \11\11\11\11\11\11(\"@errands\" . ?r)\12  \11\11\11\11\11\11(\"@email\" . ?e)\12  \11\11\11\11\11\11(\"@call\" . ?c)\12  \11\11\11\11\11\11)\12          org-refile-allow-creating-parent-nodes 'confirm\12          org-refile-targets\12          '((nil :maxlevel . 6)\12            (org-agenda-files :maxlevel . 6)))\12\12    (advice-add 'org-refile :after 'org-save-all-org-buffers))\12\12  (require 'org-indent)\12")) 0] #189# -1] [[[nil nil #191=(section (:standard-properties [43420 43420 43420 43598 43598 0 nil section element t nil 43420 43598 nil nil nil nil #190#])) 0] [nil nil (src-block (:standard-properties [43526 43526 nil nil 43598 1 nil nil element t nil nil nil nil nil nil nil #191#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package ox-gfm\12    :after org)\12")) 0] (paragraph (:standard-properties [43420 43420 43420 43525 43526 1 nil planning element t nil nil nil nil nil nil nil #191#])) 0] [nil nil #193=(section (:standard-properties [43612 43612 43612 43913 43913 0 nil section element t nil 43612 43913 nil nil nil nil #192#])) 0] #192# -1] #190# 0] [[[[nil nil (src-block (:standard-properties [43792 43792 nil nil 43913 1 nil nil element t nil nil nil nil nil nil nil #193#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package org-appear\12    :after org)\12  (add-hook 'org-mode-hook 'org-appear-mode)\12")) 0] [nil nil #195=(section (:standard-properties [43933 43933 43933 44187 44187 0 nil section element t nil 43933 44187 nil nil nil nil #194#])) 0] #194# 0] [nil nil (src-block (:standard-properties [43997 43997 nil nil 44187 1 nil nil element t nil nil nil nil nil nil nil #195#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package org-bullets\12    :after org\12    :hook (org-mode . org-bullets-mode)\12    :custom\12    (org-bullets-bullet-list '(\"◉\" \"○\" \"●\" \"○\" \"●\" \"○\" \"●\")))\12")) 0] (paragraph (:standard-properties [43933 43933 43933 43996 43997 1 nil planning element t nil nil nil nil nil nil nil #195#])) -1] [[[nil nil #197=(section (:standard-properties [44209 44209 44209 44654 44654 0 nil section element t nil 44209 44654 nil nil nil nil #196#])) 0] [nil nil (src-block (:standard-properties [44370 44370 nil nil 44654 1 nil nil element t nil nil nil nil nil nil nil #197#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun rr/org-mode-visual-fill ()\12    (setq visual-fill-column-width 120\12          visual-fill-column-center-text t)\12    (visual-fill-column-mode 1))\12\12  (use-package visual-fill-column\12    :after org\12    :hook (org-mode . rr/org-mode-visual-fill))\12")) 0] (paragraph (:standard-properties [44209 44209 44209 44369 44370 1 nil planning element t nil nil nil nil nil nil nil #197#])) 0] [nil nil #199=(section (:standard-properties [44672 44672 44672 47058 47058 0 nil section element t nil 44672 47058 nil nil nil nil #198#])) 0] #198# -1] #196# 0] (paragraph (:standard-properties [43612 43612 43612 43791 43792 1 nil planning element t nil nil nil nil nil nil nil #193#])) 0] [[[[nil nil (paragraph (:standard-properties [44726 44726 44726 44779 44779 0 nil nil element t nil nil nil nil nil nil nil #199#])) 0] [nil nil (paragraph (:standard-properties [44928 44928 44928 44974 44974 0 nil nil element t nil nil nil nil nil nil nil #199#])) 0] (src-block (:standard-properties [44779 44779 nil nil 44928 1 nil nil element t nil nil nil nil nil nil nil #199#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package org-super-agenda\12    :straight t\12    :after org\12    :defer t\12    :init\12    (org-super-agenda-mode))\12")) 0] [nil nil #28# 0] (src-block (:standard-properties [44974 44974 nil nil 47058 1 nil nil element t nil nil nil nil nil nil nil #199#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq org-agenda-span 'day)\12\12  (setq org-agenda-custom-commands\12        `((\"d\" \"Dashboard\"\12           ((agenda \"\" ((org-deadline-warning-days 7)))\12            (tags-todo \"+PRIORITY=\\\"A\\\"\"\12                       ((org-agenda-overriding-header \"High Priority\")))\12            (todo \"STRT\"\12                  ((org-agenda-overriding-header \"In Progress\")\12                   (org-agenda-max-todos nil)))\12            (todo \"TODO\"\12                  ((org-agenda-overriding-header \"Unprocessed Inbox Tasks\")))))\12          (\"w\" \"Work Tasks\"\12           ((agenda \"\" ((org-deadline-warning-days 7))\12  \11\11\11\11  (tags-todo \"+work-meeting\"\12  \11\11\11\11\11\11\11 ((org-agenda-overriding-header \"Work Tasks\")))\12  \11\11\11\11  )))\12          (\"%\" \"Appointments\" agenda* \"Today's appointments\"\12           ((org-agenda-span 1)\12            (org-agenda-max-entries 3)))\12  \11\11(\"f\" \"Follow up\"\12  \11\11 ((tags-todo \"+followup\"\12  \11\11\11\11\11 ((org-agenda-overriding-header \"Follow-up Tasks\")))\12  \11\11  (tags-todo \"-{.*}\"\12  \11\11\11\11\11 ((org-agenda-overriding-header \"Untagged Tasks\")))))\12  \11\11(\"r\" \"Weekly Review\"\12  \11\11 ((agenda \"\"\12  \11\11\11\11  ((org-agenda-overriding-header \"Completed Tasks\")\12  \11\11\11\11   (org-agenda-skip-function '(org-agenda-skip-entry-if 'nottodo 'done))\12  \11\11\11\11   (org-agenda-span 'week)))\12  \11\11  (agenda \"\"\12  \11\11\11\11  ((org-agenda-overriding-header \"Unfinished Scheduled Tasks\")\12  \11\11\11\11   (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))\12  \11\11\11\11   (org-agenda-span 'week)))))\12  \11\11(\"u\" \"Super View\"\12  \11\11 ((agenda \"\" ((org-agenda-span 1)\12  \11\11\11\11\11  (org-super-agenda-groups\12  \11\11\11\11\11   '(\12  \11\11\11\11\11\11 (:name \"Today\"\12  \11\11\11\11\11\11\11\11:time-grid t\12  \11\11\11\11\11\11\11\11:date today\12  \11\11\11\11\11\11\11\11:scheduled today\12  \11\11\11\11\11\11\11\11:order 1\12  \11\11\11\11\11\11\11\11:face 'warning\12  \11\11\11\11\11\11\11\11)\12  \11\11\11\11\11\11 (:name \"Overdue\"\12  \11\11\11\11\11\11\11\11:deadline past\12  \11\11\11\11\11\11\11\11:face 'error\12  \11\11\11\11\11\11\11\11)\12  \11\11\11\11\11\11 (:name \"Reschedule\"\12  \11\11\11\11\11\11\11\11:scheduled past\12  \11\11\11\11\11\11\11\11:face 'error\12  \11\11\11\11\11\11\11\11)\12  \11\11\11\11\11\11 (:name \"Projects\"\12  \11\11\11\11\11\11\11\11:tag (\"project\" \"@proj\")\12  \11\11\11\11\11\11\11\11)\12  \11\11\11\11\11\11 (:name \"Due soon\"\12  \11\11\11\11\11\11\11\11:deadline future\12  \11\11\11\11\11\11\11\11:scheduled future)\12  \11\11\11\11\11\11 ))))))\12  \11\11))\12")) -1] [[[nil nil #202=(section (:standard-properties [47112 47112 47112 47477 47477 0 nil section element t nil 47112 47477 nil nil nil nil #200#])) 0] [nil nil #201# 0] (src-block (:standard-properties [47112 47112 nil nil 47477 1 nil planning element t nil nil nil nil nil nil nil #202#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (with-eval-after-load 'org\12    (org-babel-do-load-languages\12     'org-babel-load-languages\12     '((emacs-lisp . t)\12       (python . t)\12       (shell . t))))\12\12  (setq org-confirm-babel-evaluate nil)\12\12  (with-eval-after-load 'org\12    (require 'org-tempo)\12    (add-to-list 'org-structure-template-alist '(\"el\" . \"src emacs-lisp\")))\12")) 0] [nil nil (paragraph (:standard-properties [47503 47503 47503 47650 47651 1 nil planning element t nil nil nil nil nil nil nil #203=(section (:standard-properties [47503 47503 47503 47768 47768 0 nil section element t nil 47503 47768 nil nil nil nil #201#]))])) 0] #203# -1] #200# 0] (paragraph (:standard-properties [44672 44672 44672 44725 44726 1 nil planning element t nil nil nil nil nil nil nil #199#])) -1] #186# 0] [[[[[[[nil nil #204# 0] [nil nil (src-block (:standard-properties [47804 47804 nil nil 48218 0 nil planning element t nil nil nil nil nil nil nil #205=(section (:standard-properties [47804 47804 47804 48218 48218 0 nil section element t nil 47804 48218 nil nil nil nil #204#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; Automatically tangle PrivateConfig.org config file when we save it\12  (defun rr/org-babel-tangle-config ()\12    (when (string-match \"dotfiles\\/\" (buffer-file-name))\12      ;; Dynamic scoping to the rescue\12      (let ((org-confirm-babel-evaluate nil))\12        (org-babel-tangle))))\12\12  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'rr/org-babel-tangle-config)))\12")) 0] #205# 0] [nil nil #207=(section (:standard-properties [48248 48248 48248 48665 48665 0 nil section element t nil 48248 48665 nil nil nil nil #206#])) 0] #206# -1] [[[nil nil (src-block (:standard-properties [48406 48406 nil nil 48665 1 nil nil element t nil nil nil nil nil nil nil #207#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package org-make-toc\12    :after org)\12\12  (defun rr/enable-org-make-toc-mode ()\12    (if (equal (buffer-name) \"PostInitConfig.org\")\12        (org-make-toc-mode)))\12\12  (add-hook 'find-file-hook 'rr/enable-org-make-toc-mode)\12")) 0] [nil nil #210=(section (:standard-properties [48692 48692 48692 49281 49281 0 nil section element t nil 48692 49281 nil nil nil nil #208#])) 0] #208# 0] [nil nil #209# 0] (src-block (:standard-properties [48692 48692 nil nil 49281 1 nil planning element t nil nil nil nil nil nil nil #210#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq org-todo-keyword-faces\12        '((\"WAIT\" . (:foreground \"#e6bf85\" :weight bold))\12          (\"TODO\" . (:foreground \"#a0bc70\" :weight bold))\12          (\"STRT\" . (:foreground \"#a7a2dc\" :weight bold))\12          (\"HOLD\" . (:foreground \"#e6bf85\" :weight bold))\12          (\"CODE\" . (:foreground \"#e6bf85\" :weight bold))\12          (\"FDBK\" . (:foreground \"#e6bf85\" :weight bold))\12          (\"IDEA\" . (:foreground \"#fdac37\" :weight bold))\12          (\"DONE\" . (:foreground \"#5c6267\" :weight bold))\12          (\"KILL\" . (:foreground \"#ee7570\" :weight bold))))\12")) -1] (paragraph (:standard-properties [48248 48248 48248 48405 48406 1 nil planning element t nil nil nil nil nil nil nil #207#])) 0] [[[[nil nil (paragraph (:standard-properties [49294 49294 49294 49392 49393 1 nil planning element t nil nil nil nil nil nil nil #211=(section (:standard-properties [49294 49294 49294 51100 51100 0 nil section element t nil 49294 51100 nil nil nil nil #209#]))])) 0] [nil nil #30# 0] (src-block (:standard-properties [49393 49393 nil nil 51100 1 nil nil element t nil nil nil nil nil nil nil #211#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (set-face-attribute 'org-document-title nil :font my-variable-pitch-font :weight 'regular :height 1.5)\12\12  (dolist (face '((org-level-1 . 1.3)\12                  (org-level-2 . 1.2)\12                  (org-level-3 . 1.15)\12                  (org-level-4 . 1.0)\12                  (org-level-5 . 1.1)\12                  (org-level-6 . 1.1)\12                  (org-level-7 . 1.1)\12                  (org-level-8 . 1.1)))\12    (set-face-attribute (car face) nil :font my-variable-pitch-font :weight 'regular :height (cdr face))\12\12    ;; Original background color of org-block: #3B3D4A\12    (set-face-attribute 'org-block nil :foreground \"unspecified\" :background \"#2D313B\" :inherit 'fixed-pitch)\12    (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)\12    (set-face-attribute 'org-todo nil  :inherit 'fixed-pitch)\12    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)\12    (set-face-attribute 'org-list-dt nil  :inherit 'fixed-pitch)\12    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))\12    (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))\12    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))\12    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))\12    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))\12    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)\12    (set-face-attribute 'org-tag nil :foreground \"#5A5D67\")\12    (set-face-attribute 'hl-line nil :background \"#0d3b66\")\12    (set-face-attribute 'org-column nil :background \"unspecified\")\12    (set-face-attribute 'org-column-title nil :background \"unspecified\"))\12")) 0] [nil nil #215=(section (:standard-properties [51142 51142 51142 51338 51338 0 nil section element t nil 51142 51338 nil nil nil nil #29#])) 0] #29# -1] [[[nil nil #212# 0] [nil nil (paragraph (:standard-properties [51369 51369 51369 51415 51416 1 nil planning element t nil nil nil nil nil nil nil #213=(section (:standard-properties [51369 51369 51369 52047 52047 0 nil section element t nil 51369 52047 nil nil nil nil #212#]))])) 0] #213# 0] [nil nil #214# 0] (src-block (:standard-properties [51416 51416 nil nil 52047 1 nil nil element t nil nil nil nil nil nil nil #213#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun +org-get-todo-keywords-for (&optional keyword)\12    \"Returns the list of todo keywords that KEYWORD belongs to.\"\12    (when keyword\12      (cl-loop for (type . keyword-spec)\12               in (cl-remove-if-not #'listp org-todo-keywords)\12               for keywords =\12               (mapcar (lambda (x) (if (string-match \"^\\\\([^(]+\\\\)(\" x)\12                                       (match-string 1 x)\12                                     x))\12                       keyword-spec)\12               if (eq type 'sequence)\12               if (member keyword keywords)\12               return keywords)))\12")) -1] (paragraph (:standard-properties [51142 51142 51142 51338 51338 0 nil planning element t nil nil nil nil nil nil nil #215#])) 0] #211# 0] [[[[nil nil (paragraph (:standard-properties [52070 52070 52070 52348 52349 1 nil planning element t nil nil nil nil nil nil nil #217=(section (:standard-properties [52070 52070 52070 58305 58305 0 nil section element t nil 52070 58305 nil nil nil nil #214#]))])) 0] [nil nil #216# 0] (src-block (:standard-properties [52349 52349 nil nil 58305 1 nil nil element t nil nil nil nil nil nil nil #217#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun +org/dwim-at-point (&optional arg)\12    \"Do-what-I-mean at point.\12\12  If on a:\12  - checkbox list item or todo heading: toggle it.\12  - clock: update its time.\12  - headline: cycle ARCHIVE subtrees, toggle latex fragments and inline images in\12    subtree; update statistics cookies/checkboxes and ToCs.\12  - footnote reference: jump to the footnote's definition\12  - footnote definition: jump to the first reference of this footnote\12  - table-row or a TBLFM: recalculate the table's formulas\12  - table-cell: clear it and go into insert mode. If this is a formula cell,\12    recaluclate it instead.\12  - babel-call: execute the source block\12  - statistics-cookie: update it.\12  - latex fragment: toggle it.\12  - link: follow it\12  - otherwise, refresh all inline images in current tree.\"\12    (interactive \"P\")\12    (if (button-at (point))\12        (call-interactively #'push-button)\12      (let* ((context (org-element-context))\12             (type (org-element-type context)))\12        ;; skip over unimportant contexts\12        (while (and context (memq type '(verbatim code bold italic underline strike-through subscript superscript)))\12          (setq context (org-element-property :parent context)\12                type (org-element-type context)))\12        (pcase type\12          (`headline\12           (cond ((memq (bound-and-true-p org-goto-map)\12                        (current-active-maps))\12                  (org-goto-ret))\12                 ((and (fboundp 'toc-org-insert-toc)\12                       (member \"TOC\" (org-get-tags)))\12                  (toc-org-insert-toc)\12                  (message \"Updating table of contents\"))\12                 ((string= \"ARCHIVE\" (car-safe (org-get-tags)))\12                  (org-force-cycle-archived))\12                 ((or (org-element-property :todo-type context)\12                      (org-element-property :scheduled context))\12                  (org-todo\12                   (if (eq (org-element-property :todo-type context) 'done)\12                       (or (car (+org-get-todo-keywords-for (org-element-property :todo-keyword context)))\12                           'todo)\12                     'done))))\12           ;; Update any metadata or inline previews in this subtree\12           (org-update-checkbox-count)\12           (org-update-parent-todo-statistics)\12           (when (and (fboundp 'toc-org-insert-toc)\12                      (member \"TOC\" (org-get-tags)))\12             (toc-org-insert-toc)\12             (message \"Updating table of contents\"))\12           (let* ((beg (if (org-before-first-heading-p)\12                           (line-beginning-position)\12                         (save-excursion (org-back-to-heading) (point))))\12                  (end (if (org-before-first-heading-p)\12                           (line-end-position)\12                         (save-excursion (org-end-of-subtree) (point))))\12                  (overlays (ignore-errors (overlays-in beg end)))\12                  (latex-overlays\12                   (cl-find-if (lambda (o) (eq (overlay-get o 'org-overlay-type) 'org-latex-overlay))\12                               overlays))\12                  (image-overlays\12                   (cl-find-if (lambda (o) (overlay-get o 'org-image-overlay))\12                               overlays)))\12             (+org--toggle-inline-images-in-subtree beg end)\12             (if (or image-overlays latex-overlays)\12                 (org-clear-latex-preview beg end)\12               (org--latex-preview-region beg end))\12             ))\12\12          (`clock (org-clock-update-time-maybe))\12\12          (`footnote-reference\12           (org-footnote-goto-definition (org-element-property :label context)))\12\12          (`footnote-definition\12           (org-footnote-goto-previous-reference (org-element-property :label context)))\12\12          ((or `planning `timestamp)\12           (org-follow-timestamp-link))\12\12          ((or `table `table-row)\12           (if (org-at-TBLFM-p)\12               (org-table-calc-current-TBLFM)\12             (ignore-errors\12               (save-excursion\12                 (goto-char (org-element-property :contents-begin context))\12                 (org-call-with-arg 'org-table-recalculate (or arg t))))))\12\12          (`table-cell\12           (org-table-blank-field)\12           (org-table-recalculate arg)\12           (when (and (string-empty-p (string-trim (org-table-get-field)))\12                      (bound-and-true-p evil-local-mode))\12             (evil-change-state 'insert)))\12\12          (`babel-call\12           (org-babel-lob-execute-maybe))\12\12          (`statistics-cookie\12           (save-excursion (org-update-statistics-cookies arg)))\12\12          ((or `src-block `inline-src-block)\12           (org-babel-execute-src-block arg))\12\12          ((or `latex-fragment `latex-environment)\12           (org-latex-preview arg))\12\12          (`link\12           (let* ((lineage (org-element-lineage context '(link) t))\12                  (path (org-element-property :path lineage)))\12             (if (or (equal (org-element-property :type lineage) \"img\")\12                     (and path (image-type-from-file-name path)))\12                 (+org--toggle-inline-images-in-subtree\12                  (org-element-property :begin lineage)\12                  (org-element-property :end lineage))\12               (org-open-at-point arg))))\12\12          ((guard (org-element-property :checkbox (org-element-lineage context '(item) t)))\12           (let ((match (and (org-at-item-checkbox-p) (match-string 1))))\12             (org-toggle-checkbox (if (equal match \"[ ]\") '(16)))))\12\12          (_\12           (if (or (org-in-regexp org-ts-regexp-both nil t)\12                   (org-in-regexp org-tsr-regexp-both nil  t)\12                   (org-in-regexp org-link-any-re nil t))\12               (call-interactively #'org-open-at-point)\12             (+org--toggle-inline-images-in-subtree\12              (org-element-property :begin context)\12              (org-element-property :end context))))))))\12")) 0] [nil nil (paragraph (:standard-properties [58328 58328 58328 58423 58424 1 nil planning element t nil nil nil nil nil nil nil #218=(section (:standard-properties [58328 58328 58328 59878 59878 0 nil section element t nil 58328 59878 nil nil nil nil #216#]))])) 0] #218# -1] [[[nil nil #32# 0] [nil nil (paragraph (:standard-properties [59901 59901 59901 60261 60261 0 nil planning element t nil nil nil nil nil nil nil #219=(section (:standard-properties [59901 59901 59901 60261 60261 0 nil section element t nil 59901 60261 nil nil nil nil #32#]))])) 0] #219# 0] [nil nil #221=(section (:standard-properties [60301 60301 60301 61656 61656 0 nil section element t nil 60301 61656 nil nil nil nil #220#])) 0] #220# -1] (src-block (:standard-properties [58424 58424 nil nil 59878 1 nil nil element t nil nil nil nil nil nil nil #218#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun rr/org-insert-link-dwim ()\12    \"Like `org-insert-link' but with personal dwim preferences.\"\12    (interactive)\12    (let* ((point-in-link (org-in-regexp org-link-any-re 1))\12           (clipboard-url (when (string-match-p \"^http\" (current-kill 0))\12                            (current-kill 0)))\12           (region-content (when (region-active-p)\12                             (buffer-substring-no-properties (region-beginning)\12                                                             (region-end)))))\12      (cond ((and region-content clipboard-url (not point-in-link))\12             (delete-region (region-beginning) (region-end))\12             (insert (org-make-link-string clipboard-url region-content)))\12            ((and clipboard-url (not point-in-link))\12             (insert (org-make-link-string\12                      clipboard-url\12                      (read-string \"title: \"\12                                   (with-current-buffer (url-retrieve-synchronously clipboard-url)\12                                     (dom-text (car\12                                                (dom-by-tag (libxml-parse-html-region\12                                                             (point-min)\12                                                             (point-max))\12                                                            'title))))))))\12            (t\12             (call-interactively 'org-insert-link)))))\12")) 0] #217# -1] [[[[[[nil nil (src-block (:standard-properties [60461 60461 nil nil 61656 1 nil nil element t nil nil nil nil nil nil nil #221#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun +org-cycle-only-current-subtree-h (&optional arg)\12    \"Toggle the local fold at the point, and no deeper.\12         `org-cycle's standard behavior is to cycle between three levels: collapsed,\12         subtree and whole document. This is slow, especially in larger org buffer. Most\12         of the time I just want to peek into the current subtree -- at most, expand\12         *only* the current subtree.\12\12         All my (performant) foldings needs are met between this and `org-show-subtree'\12         (on zO for evil users), and `org-cycle' on shift-TAB if I need it.\"\12    (interactive \"P\")\12    (unless (eq this-command 'org-shifttab)\12      (save-excursion\12        (org-beginning-of-line)\12        (let (invisible-p)\12          (when (and (org-at-heading-p)\12                     (or org-cycle-open-archived-trees\12                         (not (member org-archive-tag (org-get-tags))))\12                     (or (not arg)\12                         (setq invisible-p (outline-invisible-p (line-end-position)))))\12            (unless invisible-p\12              (setq org-cycle-subtree-status 'subtree))\12            (org-cycle-internal-local)\12            t)))))\12")) 0] [nil nil #222# 0] #31# 0] [nil nil (src-block (:standard-properties [61698 61698 nil nil 64579 1 nil planning element t nil nil nil nil nil nil nil #223=(section (:standard-properties [61698 61698 61698 64579 64579 0 nil section element t nil 61698 64579 nil nil nil nil #222#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun +org--insert-item (direction)\12    (let ((context (org-element-lineage\12                    (org-element-context)\12                    '(table table-row headline inlinetask item plain-list)\12                    t)))\12      (pcase (org-element-type context)\12        ;; Add a new list item (carrying over checkboxes if necessary)\12        ((or `item `plain-list)\12         ;; Position determines where org-insert-todo-heading and org-insert-item\12         ;; insert the new list item.\12         (if (eq direction 'above)\12             (org-beginning-of-item)\12           (org-end-of-item)\12           (backward-char))\12         (org-insert-item (org-element-property :checkbox context))\12         ;; Handle edge case where current item is empty and bottom of list is\12         ;; flush against a new heading.\12         (when (and (eq direction 'below)\12                    (eq (org-element-property :contents-begin context)\12                        (org-element-property :contents-end context)))\12           (org-end-of-item)\12           (org-end-of-line)))\12\12        ;; Add a new table row\12        ((or `table `table-row)\12         (pcase direction\12           ('below (save-excursion (org-table-insert-row t))\12                   (org-table-next-row))\12           ('above (save-excursion (org-shiftmetadown))\12                   (+org/table-previous-row))))\12\12        ;; Otherwise, add a new heading, carrying over any todo state, if\12        ;; necessary.\12        (_\12         (let ((level (or (org-current-level) 1)))\12           ;; I intentionally avoid `org-insert-heading' and the like because they\12           ;; impose unpredictable whitespace rules depending on the cursor\12           ;; position. It's simpler to express this command's responsibility at a\12           ;; lower level than work around all the quirks in org's API.\12           (pcase direction\12             (`below\12              (let (org-insert-heading-respect-content)\12                (goto-char (line-end-position))\12                (org-end-of-subtree)\12                (insert \"\\n\" (make-string level ?*) \" \")))\12             (`above\12              (org-back-to-heading)\12              (insert (make-string level ?*) \" \")\12              (save-excursion (insert \"\\n\"))))\12           (when-let* ((todo-keyword (org-element-property :todo-keyword context))\12                       (todo-type    (org-element-property :todo-type context)))\12             (org-todo\12              (cond ((eq todo-type 'done)\12                     ;; Doesn't make sense to create more \"DONE\" headings\12                     (car (+org-get-todo-keywords-for todo-keyword)))\12                    (todo-keyword)\12                    ('todo)))))))\12\12      (when (org-invisible-p)\12        (org-show-hidden-entry))\12      (when (and (bound-and-true-p evil-local-mode)\12                 (not (evil-emacs-state-p)))\12        (evil-insert 1))))\12")) 0] #223# -1] [[[nil nil #225=(section (:standard-properties [64602 64602 64602 64968 64968 0 nil section element t nil 64602 64968 nil nil nil nil #224#])) 0] [nil nil (src-block (:standard-properties [64650 64650 nil nil 64968 1 nil nil element t nil nil nil nil nil nil nil #225#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun +org/insert-item-below (count)\12    \"Inserts a new heading, table cell or item below the current one.\"\12    (interactive \"p\")\12    (dotimes (_ count) (+org--insert-item 'below)))\12\12  (with-eval-after-load 'org\12    (define-key org-mode-map (kbd \"M-RET\") '+org/insert-item-below))\12")) 0] (paragraph (:standard-properties [64602 64602 64602 64649 64650 1 nil planning element t nil nil nil nil nil nil nil #225#])) 0] [nil nil #227=(section (:standard-properties [64991 64991 64991 65258 65258 0 nil section element t nil 64991 65258 nil nil nil nil #226#])) 0] #226# -1] #224# 0] [[[[[nil nil (src-block (:standard-properties [65039 65039 nil nil 65258 1 nil nil element t nil nil nil nil nil nil nil #227#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun +org/insert-item-above (count)\12    \"Inserts a new heading, table cell or item above the current one.\"\12    (interactive \"p\")\12    (dotimes (_ count) (+org--insert-item 'above)))\12")) 0] [nil nil #229=(section (:standard-properties [65289 65289 65289 65815 65815 0 nil section element t nil 65289 65815 nil nil nil nil #228#])) 0] #228# 0] [nil nil (src-block (:standard-properties [65392 65392 nil nil 65815 1 nil nil element t nil nil nil nil nil nil nil #229#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun +org/refile-to-current-file (arg &optional file)\12    \"Refile current heading to elsewhere in the current buffer.\12  If prefix ARG, copy instead of move.\"\12    (interactive \"P\")\12    (let ((org-refile-targets `((,file :maxlevel . 10)))\12          (org-refile-use-outline-path nil)\12          (org-refile-keep arg)\12          current-prefix-arg)\12      (call-interactively #'org-refile)))\12")) 0] (paragraph (:standard-properties [65289 65289 65289 65391 65392 1 nil planning element t nil nil nil nil nil nil nil #229#])) -1] [[[nil nil #231=(section (:standard-properties [65854 65854 65854 66980 66980 0 nil section element t nil 65854 66980 nil nil nil nil #230#])) 0] [nil nil (src-block (:standard-properties [65918 65918 nil nil 66980 1 nil nil element t nil nil nil nil nil nil nil #231#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun rr/org-show-next-heading-tidily ()\12    \"Show next entry, keeping other entries closed.\"\12    (interactive)\12    (if (save-excursion (end-of-line) (outline-invisible-p))\12        (progn (org-show-entry) (show-children))\12      (outline-next-heading)\12      (unless (and (bolp) (org-on-heading-p))\12        (org-up-heading-safe)\12        (hide-subtree)\12        (error \"Boundary reached\"))\12      (org-overview)\12      (org-reveal t)\12      (org-show-entry)\12      (show-children)))\12\12  (global-set-key (kbd \"M-n\") 'rr/org-show-next-heading-tidily)\12\12  (defun rr/org-show-previous-heading-tidily ()\12    \"Show previous entry, keeping other entries closed.\"\12    (interactive)\12    (let ((pos (point)))\12      (outline-previous-heading)\12      (unless (and (< (point) pos) (bolp) (org-on-heading-p))\12        (goto-char pos)\12        (hide-subtree)\12        (error \"Boundary reached\"))\12      (org-overview)\12      (org-reveal t)\12      (org-show-entry)\12      (show-children)))\12\12  (global-set-key (kbd \"M-p\") 'rr/org-show-previous-heading-tidily)\12")) 0] (paragraph (:standard-properties [65854 65854 65854 65917 65918 1 nil planning element t nil nil nil nil nil nil nil #231#])) 0] [nil nil #233=(section (:standard-properties [67015 67015 67015 67450 67450 0 nil section element t nil 67015 67450 nil nil nil nil #232#])) 0] #232# -1] #230# 0] [[[[nil nil (src-block (:standard-properties [67079 67079 nil nil 67450 1 nil nil element t nil nil nil nil nil nil nil #233#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun rr/org-sort-list-by-checkbox-type ()\12    \"Sort list items according to Checkbox state.\"\12    (interactive)\12    (org-sort-list\12     nil ?f\12     (lambda ()\12       (if (looking-at org-list-full-item-re)\12           (cdr (assoc (match-string 3)\12                       '((\"[X]\" . 4) (\"[-]\" . 3) (\"[ ]\" . 2) (nil . 1))))\12         4))))\12")) 0] [nil nil #235=(section (:standard-properties [67504 67504 67504 68439 68439 0 nil section element t nil 67504 68439 nil nil nil nil #234#])) 0] #234# 0] [[nil nil (src-block (:standard-properties [67595 67595 nil nil 68439 1 nil nil element t nil nil nil nil nil nil nil #235#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (eval-after-load 'org-list\12    '(add-hook 'org-checkbox-statistics-hook (function rr/checkbox-list-complete)))\12\12  (defun rr/checkbox-list-complete ()\12    (save-excursion\12      (org-back-to-heading t)\12      (let ((beg (point)) end)\12        (end-of-line)\12        (setq end (point))\12        (goto-char beg)\12        (if (re-search-forward \"\\\\[\\\\([0-9]*%\\\\)\\\\]\\\\|\\\\[\\\\([0-9]*\\\\)/\\\\([0-9]*\\\\)\\\\]\" end t)\12            (if (match-end 1)\12                (if (equal (match-string 1) \"100%\")\12                    ;; all done - do the state change\12                    (org-todo 'done)\12                  (org-todo 'todo))\12              (if (and (> (match-end 2) (match-beginning 2))\12                       (equal (match-string 2) (match-string 3)))\12                  (org-todo 'done)\12                (org-todo 'todo)))))))\12")) 0] nil #33# -1] (paragraph (:standard-properties [67504 67504 67504 67594 67595 1 nil planning element t nil nil nil nil nil nil nil #235#])) 0] [[[nil nil (paragraph (:standard-properties [68450 68450 68450 68481 68481 0 nil planning element t nil nil nil nil nil nil nil #238=(section (:standard-properties [68450 68450 68450 68481 68481 0 nil section element t nil 68450 68481 nil nil nil nil #33#]))])) 0] nil #236# -1] [nil nil (paragraph (:standard-properties [68496 68496 68496 68554 68555 1 nil planning element t nil nil nil nil nil nil nil #237=(section (:standard-properties [68496 68496 68496 70074 70074 0 nil section element t nil 68496 70074 nil nil nil nil #236#]))])) 0] #237# -1] #238# 0] (paragraph (:standard-properties [67015 67015 67015 67078 67079 1 nil planning element t nil nil nil nil nil nil nil #233#])) 0] (paragraph (:standard-properties [64991 64991 64991 65038 65039 1 nil planning element t nil nil nil nil nil nil nil #227#])) 1] [[[[[[nil nil #239# 0] [nil nil (src-block (:standard-properties [70092 70092 nil nil 70633 1 nil planning element t nil nil nil nil nil nil nil #240=(section (:standard-properties [70092 70092 70092 70633 70633 0 nil section element t nil 70092 70633 nil nil nil nil #239#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun rr/org-roam-filter-by-tag (tag-name)\12  \11(lambda (node)\12  \11\11(member tag-name (org-roam-node-tags node))))\12\12  (defun rr/org-roam-list-notes-by-tag (tag-name)\12  \11(let ((nodes (org-roam-node-list)))\12  \11\11(mapcar #'org-roam-node-file\12  \11\11\11\11\11\11(seq-filter\12  \11\11\11\11\11\11 (rr/org-roam-filter-by-tag tag-name)\12  \11\11\11\11\11\11 (org-roam-node-list)))))\12\12  (defun rr/org-roam-refresh-agenda-list ()\12  \11(interactive)\12  \11(setq org-agenda-files (rr/org-roam-list-notes-by-tag \"project\")))\12\12;  (rr/org-roam-refresh-agenda-list)\12")) 0] #240# 0] [[nil nil #243=(section (:standard-properties [70661 70661 70661 71879 71879 0 nil section element t nil 70661 71879 nil nil nil nil #241#])) 0] [nil nil #242# 0] (src-block (:standard-properties [70661 70661 nil nil 71879 0 nil planning element t nil nil nil nil nil nil nil #243#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun rr/org-roam-project-finalize-hook ()\12    \"Adds the captured project file to `org-agenda-files' if the\12    capture was not aborted.\"\12    ;; Remove the hook since it was added temporarily\12    (remove-hook 'org-capture-after-finalize-hook #'rr/org-roam-project-finalize-hook)\12\12    ;; Add project file to the agenda list if the capture was confirmed\12    (unless org-note-abort\12      (with-current-buffer (org-capture-get :buffer)\12        (add-to-list 'org-agenda-files (buffer-file-name)))))\12\12  (defun rr/org-roam-find-project ()\12    (interactive)\12    ;; Add the project file to the agenda after capture is finished\12    (add-hook 'org-capture-after-finalize-hook #'rr/org-roam-project-finalize-hook)\12\12    ;; Select a project file to open, creating it if necessary\12    (org-roam-node-find\12     nil\12     nil\12     (rr/org-roam-filter-by-tag \"project\")\12     nil\12     :templates\12     '((\"p\" \"project\" plain\12        (file \"~/org-mode/roam/work/templates/projectNoteTemplate.org\")\12    \11\11:if-new (file+head \"%<%Y%m%d%H%M%S>-${slug}.org\" \"#+title: ${title}\\n#+category: ${title}\\n#+filetags: project\")\12    \11\11:unnarrowed t))))\12\12  (global-set-key (kbd \"C-c n p\") #'rr/org-roam-find-project)\12")) 0] #241# 0] [[nil nil (src-block (:standard-properties [71930 71930 nil nil 72811 0 nil planning element t nil nil nil nil nil nil nil #245=(section (:standard-properties [71930 71930 71930 72811 72811 0 nil section element t nil 71930 72811 nil nil nil nil #242#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun rr/org-roam-capture-task ()\12    (interactive)\12    ;; Add the project file to the agenda after capture is finished\12    (add-hook 'org-capture-after-finalize-hook #'rr/org-roam-project-finalize-hook)\12\12    ;; Capture the new task, creating the project file if necessary\12    (org-roam-capture- :node (org-roam-node-read\12                              nil\12                              (rr/org-roam-filter-by-tag \"project\"))\12                       :templates '((\"p\" \"project\" plain \"** TODO %?\"\12                                     :if-new (file+head+olp \"%<%Y%m%d%H%M%S>-${slug}.org\"\12                                                            \"#+title: ${title}\\n#+category: ${title}\\n#+filetags: project\"\12                                                            (\"Tasks\"))))))\12  (global-set-key (kbd \"C-c n t\") #'rr/org-roam-capture-task)\12")) 0] [nil nil #250=(section (:standard-properties [72870 72870 72870 73846 73846 0 nil section element t nil 72870 73846 nil nil nil nil #244#])) 0] #244# 0] #245# -1] [[[nil nil #246# 0] [nil nil (paragraph (:standard-properties [73877 73877 73877 73928 73929 1 nil planning element t nil nil nil nil nil nil nil #247=(section (:standard-properties [73877 73877 73877 74231 74231 0 nil section element t nil 73877 74231 nil nil nil nil #246#]))])) 0] #247# 0] [[nil nil #248# 0] [nil [nil nil (src-block (:standard-properties [74603 74603 nil nil 75205 0 nil nil element t nil nil nil nil nil nil nil #249=(section (:standard-properties [74246 74246 74246 75205 75205 0 nil section element t nil 74246 75205 nil nil nil nil #248#]))] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package org-roam-ui\12  :straight\12    (:host github :repo \"org-roam/org-roam-ui\" :branch \"main\" :files (\"*.el\" \"out\"))\12    :after org-roam\12;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have\12;;         a hookable mode anymore, you're advised to pick something yourself\12;;         if you don't care about startup time, use\12;;  :hook (after-init . org-roam-ui-mode)\12    :config\12    (setq org-roam-ui-sync-theme t\12          org-roam-ui-follow t\12          org-roam-ui-update-on-save t\12          org-roam-ui-open-on-start t))\12")) 0] (paragraph (:standard-properties [74246 74246 74246 74602 74603 1 nil planning element t nil nil nil nil nil nil nil #249#])) 1] #249# 1] (src-block (:standard-properties [73929 73929 nil nil 74231 1 nil nil element t nil nil nil nil nil nil nil #247#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun org-roam-node-insert-immediate (arg &rest args)\12    (interactive \"P\")\12    (let ((args (cons arg args))\12          (org-roam-capture-templates (list (append (car org-roam-capture-templates) '(:immediate-finish t)))))\12      (apply #'org-roam-node-insert args)))\12")) 1] (src-block (:standard-properties [72870 72870 nil nil 73846 0 nil planning element t nil nil nil nil nil nil nil #250#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun rr/org-roam-copy-todo-to-today ()\12  (interactive)\12  (let ((org-refile-keep t) ;; Set this to nil to delete the original!\12        (org-roam-dailies-capture-templates\12          '((\"t\" \"tasks\" entry \"%?\"\12             :if-new (file+head+olp \"%<%Y-%m-%d>.org\" \"#+title: %<%Y-%m-%d>\\n\" (\"Tasks\")))))\12        (org-after-refile-insert-hook #'save-buffer)\12        today-file\12        pos)\12    (save-window-excursion\12      (org-roam-dailies--capture (current-time) t)\12      (setq today-file (buffer-file-name))\12      (setq pos (point)))\12\12    ;; Only refile if the target file is different than the current file\12    (unless (equal (file-truename today-file)\12                   (file-truename (buffer-file-name)))\12      (org-refile nil nil (list \"Tasks\" today-file nil pos)))))\12\12(add-to-list 'org-after-todo-state-change-hook\12             (lambda ()\12               (when (equal org-state \"DONE\")\12                 (rr/org-roam-copy-todo-to-today))))\12")) 0] [[[nil [nil nil #252=(section (:standard-properties [75227 75227 75227 75439 75439 0 nil section element t nil 75227 75439 nil nil nil nil #251#])) 0] #251# 1] [[nil nil (src-block (:standard-properties [75367 75367 nil nil 75439 1 nil nil element t nil nil nil nil nil nil nil #252#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package ox-hugo\12    :after ox)\12")) 0] [nil nil #254=(section (:standard-properties [75500 75500 75500 76083 76083 0 nil section element t nil 75500 76083 nil nil nil nil #253#])) 0] #253# 0] (paragraph (:standard-properties [75227 75227 75227 75366 75367 1 nil planning element t nil nil nil nil nil nil nil #252#])) 0] [[[nil nil (src-block (:standard-properties [75864 75864 nil nil 76083 0 nil nil element t nil nil nil nil nil nil nil #254#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun rr/enable-hugo-auto-export-mode ()\12    (if (equal (buffer-name) \"blog.org\")\12        (org-hugo-auto-export-mode)))\12\12  (add-hook 'find-file-hook 'rr/enable-hugo-auto-export-mode)\12")) 0] [nil nil #256=(section (:standard-properties [76130 76130 76130 77274 77274 0 nil section element t nil 76130 77274 nil nil nil nil #255#])) 0] #255# 0] [[nil nil (src-block (:standard-properties [76455 76455 nil nil 77274 0 nil nil element t nil nil nil nil nil nil nil #256#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun rr/extract-hugo-post-file-name ()\12    \"Create a filename out of blog post's title.\12\12This method is expected to be executed on a TODO heading on a an\12org file containing blog posts that would be exported using\12ox-hugo. Running this interactive command would set an org\12property called EXPORT_FILE_NAME that is required by ox-hugo to\12generate a Hugo-friendly markdown file in the location specified\12in HUGO_BASE_DIR property.\"\12    (interactive)\12    (setq-local blog-post-title (nth 4 (org-heading-components)))\12      (let* ((file-name (replace-regexp-in-string \"_+\" \"-\" (replace-regexp-in-string \"\\\\W\" \"_\" (string-trim (downcase blog-post-title)))))\12             (blog-post-file-name (concat file-name \".md\")))\12        (org-set-property \"EXPORT_FILE_NAME\" blog-post-file-name)))\12")) 0] [[nil nil #258=(section (:standard-properties [77287 77287 77287 77401 77401 0 nil section element t nil 77287 77401 nil nil nil nil #257#])) 0] [nil nil (src-block (:standard-properties [77319 77319 nil nil 77401 0 nil nil element t nil nil nil nil nil nil nil #258#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (persp-state-restore persp-state-default-file)\12")) 0] (paragraph (:standard-properties [77287 77287 77287 77318 77319 1 nil planning element t nil nil nil nil nil nil nil #258#])) 0] #257# 1] (paragraph (:standard-properties [76130 76130 76130 76454 76455 1 nil planning element t nil nil nil nil nil nil nil #256#])) 1] (paragraph (:standard-properties [75500 75500 75500 75863 75864 1 nil planning element t nil nil nil nil nil nil nil #254#])) 1] #34# 0] (src-block (:standard-properties [68555 68555 nil nil 70074 0 nil nil element t nil nil nil nil nil nil nil #237#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package org-roam\12    :straight t\12    :demand t\12    :custom\12    (org-roam-directory \"~/org-mode/roam/work\")\12    (org-roam-dailies-directory \"journals/\")\12    (org-roam-completion-everywhere t)\12    (org-roam-capture-templates\12     '((\"d\" \"Default\" plain\12        \"%?\"\12        :if-new (file+head \"%<%Y%m%d%H%M%S>-${slug}.org\" \"#+title: ${title}\\n\")\12        :unnarrowed t)\12       (\"p\" \"Project\" plain\12        (file \"~/org-mode/roam/work/templates/projectNoteTemplate.org\")\12        :if-new (file+head \"%<%Y%m%d%H%M%S>-${slug}.org\" \"#+title: ${title}\\n#+category: ${title}\\n#+filetags:project\")\12        :unnarrowed t)\12       \12       (\"m\" \"Meeting\" plain\12        (file \"~/org-mode/roam/work/templates/meetingTemplate.org\")\12        :if-new (file+head \"%<%Y%m%d%H%M%S>-${slug}.org\" \"#+title: ${title}\\n#+filetags:meeting\")\12        :unnarrowed t)\12       )\12     )\12    (org-roam-dailies-capture-templates\12     '((\"d\" \"default\" entry \"* %?\\n[%<%I:%M %p>]\\n\" :target\12        (file+head \"%<%Y-%m-%d>.org\" \"#+title: %<%Y-%m-%d>\\n#+filetags:%<%Yw%V>\\n\")))\12     )\12    :bind ((\"C-c n l\" . org-roam-buffer-toggle)\12           (\"C-c n f\" . org-roam-node-find)\12           (\"C-c n i\" . org-roam-node-insert)\12           (\"C-c n I\" . org-roam-node-insert-immediate)\12           (\"C-c n a\" . org-roam-tag-add)\12           (\"C-c n d\" . org-roam-dailies-map)\12           )\12    :config\12    (setq org-roam-node-display-template (concat \"${title:*} \" (propertize \"${tags:10}\" 'face 'org-tag)))\12    (org-roam-setup))\12")) 0] (paragraph (:standard-properties [60301 60301 60301 60460 60461 1 nil planning element t nil nil nil nil nil nil nil #221#])) 1] (src-block (:standard-properties [47651 47651 nil nil 47768 1 nil nil element t nil nil nil nil nil nil nil #203#] :language #46# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; This may not be needed\12  (push '(\"conf-unix\" . conf-unix) org-src-lang-modes)\12")) 1] #27# 0] nil nil 0] org-element--cache-compare)) ((version "2.3")))